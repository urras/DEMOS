//------
//  Загрузчик с 8-дюймового гибкого диска для ДВК и Электроника-60
//------

// Аппаратура грузит загрузчик на адрес 0 и запускает с первого слова.
// Первой машинной инструкцией должен быть NOP, иначе аппаратура
// не передаст управления. При этом приоритет процессора равен 0 и
// из-за этого необходимо уметь обрабатывать прерывания от таймера.
// При запуске загрузчик получает в r0 номер дисковода, с которого
// производится загрузка.

// Генератор загрузчиков проставляет начальные значения адреса дорожки
// и сектора в тело загрузчика перед записью его на диск с системой.

//--- РАСПРЕДЕЛЕНИЕ ДИСКА -----------------------------------//
//   NEX.ADDRESS  :   -   ...    -     0     1     2    ...  //
//   TRACK/SECTOR :  0/1  ...  0/26   1/1   1/5   1/9   ...  //
//                                   <BOOT> <VL> <STARTER..  //
//-----------------------------------------------------------//

/CSR = 177170; DBR=CSR+2        //EQUALS CSR=&FE78,DBR=&FE7A
.globl CSR,DBR

//  Коды команд и биты статуса в CSR
 Error =100000                  //Флаг ошибки
 Init  = 40000                  //Команда сброса накопителя
 Ready =   200
 Done  =    40
 Unit  =    20                  //Бит выбора накопителя
 RDsect=    06                  //Команда чтения сектора в буфер
 RDbuff=    02                  //Команда чтения буфера в машину
 Go    =     1                  //Стартовый бит

//--- ЯЧЕЙКИ С ФИКСИРОВАННЫМИ АДРЕСАМИ --//
  nop               //Наличие этой инструкции проверяет аппаратура
  movb Units(r0),opcode         //Задаем номер дисковода
  br  DXboot
 Qsect: 073567                  //Длина чтения в секторах по 128
        Wait; 000340            //BPT-вектор
 TRC0:  01
 SEC0:  11                      //Адрес чтения -> дорожка+сектор
//---------------------------------------//

 Units:  .byte RDsect+Go; .byte Unit+RDsect+Go

 AddrLoad = 2000
 Track=r1; Sector=r2; AddrBuff=r3; AddrCSR=r4; AddrDBR=r5

 CarryBit = 1                   //Бит ^C в слове состояния

//-- Ожидание конца операции --
Wait:
  1:
    bit $[Error+Done+Ready],*AddrCSR
  beq 1b
  2:  bmi 2b                    //Бит 15 -> Ошибка !
   //Двигаем бит 7 в бит 0 PSW
  movb *AddrCSR,2(sp); aslb 2(sp); rolb 2(sp)
Desact:                         //Метка для таймера
  rti

//-- Чтение из DX#: N/4 блоков с адреса 2 --
DXboot:
  mov $AddrLoad,AddrBuff;  mov AddrBuff,sp
  mov TRC0,Track;  mov SEC0,Sector
  mov $CSR,AddrCSR
  br TimeOver

  Desact; 000340                //Вектор прерывания от таймера

 TimeOver:
  mov $DBR,AddrDBR
  br 3f
  4:
    mov (pc)+,*AddrCSR          //Передаем команду `чтение сектора'
    opcode: 0
    bpt                         //Ждем бита 7 (TRANSF. REQ)
    mov Sector,*AddrDBR;  bpt
    mov Track,*AddrDBR;   bpt   //Ждем бита 5 (DONE)
    mov $RDbuff\!Go,*AddrCSR    //Передаем команду `чтение буфера'
    5:
      bpt
    bcc 6f                      //пока бит 7 CSR
      movb *AddrDBR,(AddrBuff)+
    br 5b
    6:
    movb $'=,177566             //Индикация на консоль
    inc Sector
    cmp Sector,$27.
    bne 7f
      mov $1,Sector;  inc Track
    7:
  3:
  dec Qsect;  bpl 4b
  mov sp,pc                     //Запуск программы
