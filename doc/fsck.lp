
            дддд   ееееее   м     м    oooo     сссс
           д   д   е        мм   мм   o    o   с    с
          д    д   е        м м м м   o    o   с    с
          д    д   еееее    м  м  м   o    o   с
          д    д   е        м     м   o    o   с
          д    д   е        м     м   o    o   с    с
         дддддддд  ееееее   м     м    oooo     сссс



          демосдемосдемосдемосдемосдемосдемосдемосде
          емосдемосдемосдемосдемосдемосдемосдемосдем
          мо                                      мо
          ос                                      ос
          сд        ОПЕРАЦИОННАЯ СИСТЕМА          сд
          де                                      де
          ем               ДЕМОС                  ем
          мо                                      мо
          ос                                      ос
          сд                                      сд
          де             Версия 1.0               де
          ем                                      ем
          мо                                      мо
          сдемосдемосдемосдемосдемосдемосдемосдемосд
          демосдемосдемосдемосдемосдемосдемосдемосде







            ПРОГРАММА ПРОВЕРКИ ФАЙЛОВОЙ СИСТЕМЫ






                  Руднев Алексей Петрович
                 Долбин Алексей Николаевич












                       МОСКВА - 1985









                                                           1



   Fsck - интерактивная  программа  проверки  и  исправления
ошибок в файловой системе ОС ДЕМОС.





























































2




                1. ПРЕДВАРИТЕЛЬНЫЕ СВЕДЕНИЯ



   1.1. Назначение программы fsck


   Программа fsck предназначена для проверки  и,  в  случаях
нарушения  целостности,  исправления  файловой  системы   ОС
ДЕМОС.

   Нарушение целостности файловой системы  может  произойти,
например, в таких случаях:

-    при неверной последовательности останова ОС,  например,
     когда не была выполнена команда sync(8) перед остановом
     центрального процессора;

-    при аппаратных сбоях и неверном обращении с приводами и
     пакетами, например, в процессе работы закрыли на запись
     смонтированную файловую систему или перевели  привод  в
     автономный режим работы.

   Программа fsck может работать в одном из следующих  режи-
мов.

1.   Этот режим предназначен для автоматической  проверки  и
     коррекции файловой системы, не влекущей потерь информа-
     ции. Применяется при  вызове  ОС  во  время  выполнения
     стартового  файла  /etc/rc для монтирования указанных в
     /etc/rc накопителей.

2.   Если автоматическая коррекция файловой  системы  невоз-
     можна из-за предполагаемых потерь информации (fsck дает
     аварийный код ответа), тогда следует  начать  работу  в
     диалоговом  режиме.  Отметим, что при работе fsck в ди-
     алоговом режиме файловая система не подвергается  изме-
     нениям без предварительного на то согласия оператора.


   1.2. Структура файловой системы


   Файловая система ОС  ДЕМОС  построена  по  иерархическому
принципу, ее элементы образуют граф с единственным корнем.

   В системе различают три типа файлов.

1.   Обыкновенные файлы содержат символьную информацию,  об-
     разующую тексты либо программы. В них также хранят коды
     программ.

2.   Справочники  содержат  имена  других  справочников  или
     файлов.  Пользователь  может  создавать подсправочники,
     читать из них информацию, но запись в справочник  поль-
     зователем запрещена.





                                                           3

3.   Специальные файлы соответствуют устройствам ввода/выво-
     да. Они обладают тем свойством, что операционная систе-
     ма разрешает взаимодействовать с ними, как с обыкновен-
     ными  файлами,  хотя  направляемая  в них информация не
     сохраняется в файловой  системе,  а  передается  непос-
     редственно на устройства.

   Кроме этого, файловая система содержит ряд служебных бло-
ков,  обеспечивающих  ее  функционирование. К ним относятся:
суперблок, i-узлы, косвенные блоки, блоки данных (справочни-
ки и файлы) и блоки списка свободного пространства. Рассмот-
рим подробнее каждую компоненту.


   1.2.1. Суперблок


   Суперблок содержит информацию о размере файловой системы,
размере списка i-узлов, части списка свободных блоков, коли-
честве свободных  блоков,  количестве  свободных  i-узлов  и
части списка свободных i-узлов.

   Запись новой версии суперблока производится  периодически
в процессе работы файловой системы или при выполнении коман-
ды sync.


   1.2.2. I-узлы


   I-узел содержит информацию о своем типе (справочник, файл
или  специальный файл); о числе записей справочника, связан-
ных с i-узлом; списке блоков, требуемых для i-узла и о  раз-
мере i-узла.

   I-узел записывается в  файловую  систему  после  закрытия
файла, связанного с данным i-узлом.


   1.2.3. Косвенные блоки


   Существует трехуровневая иерархия косвенных блоков:  кос-
венные  блоки первого, второго и третьего уровней. Косвенный
блок первого уровня содержит список номеров  блоков,  требу-
емых  для  i-узла.  Каждая  из  128 записей косвенного блока
представляет собой номер блока данных. Косвенный блок второ-
го  уровня  содержит список номеров косвенных блоков первого
уровня. Косвенный блок третьего уровня содержит список номе-
ров косвенных блоков второго уровня.

   Косвенные блоки записываются  в  файловую  систему  после
того, как они были модифицированы операционной системой.











4

   1.2.4. Блоки данных


   Блок  данных  может  содержать  информацию,  составляющую
какой-либо  файл или записи справочника. Каждая запись спра-
вочника состоит из имени файла и номера i-узла.

   Блоки данных записываются в файловую систему после  того,
как они были модифицированы операционной системой.


   1.2.5. Блок списка свободного пространства


   Блоки,  составляющие  список   свободного   пространства,
представляют  собой  список  блоков,  не  содержащихся в су-
перблоке,  i-узлах,  косвенных  блоках  или  блоках  данных.
Каждый  блок списка свободного пространства содержит счетчик
числа записей в данный блок списка свободного  пространства,
указатель на следующий блок списка свободного пространства и
часть списка свободных блоков файловой системы.

   Блоки списка свободного пространства записываются в  фай-
ловую систему после того, как они были модифицированы опера-
ционной системой.







































                                                           5




    2. ВЫЯВЛЕНИЕ И УСТРАНЕНИЕ ОШИБОК В ФАЙЛОВОЙ СИСТЕМЕ


   Благодаря наличию в несмонтированной и закрытой на запись
файловой системе избыточных данных, она может быть проверена
на структурную целостность. Избыточные данные либо  считыва-
ются  из  файловой  системы,  либо вычисляются из других из-
вестных величин. Вследствие того, что fsck работает  в  нес-
колько  этапов,  во  время  проверки  файловой системы важно
обеспечить ее статическое состояние, т.е.  размонтировать  и
закрыть на запись.

   Оператор может работать с fsck в диалоговом режиме. Когда
программа fsck находит ошибки, она сообщает об этом операто-
ру, и ждет от него разрешения на их устранение.

   В данном разделе описаны действия оператора по  выявлению
и устранению ошибок в таких компонентах файловой системы как
суперблок, i-узел, косвенные блоки, блоки данных, блоки, со-
держащие  записи  справочников,  и  блоки списков свободного
пространства.


   2.1. Методы восстановления файловых систем


   При восстановлении файловых систем различают две  страте-
гии  работы:  восстановление корневой и монтируемой файловых
систем.

   Основная сложность в исправлении корневой файловой систе-
мы заключается в том, что она не может быть размонтирована.

   Окончив ее восстановление машину следует остановить и пе-
ревызвать  ОС, т.к. операционная система запоминает управля-
ющие данные корневой файловой системы как на диске, так и  в
оперативной памяти, при необходимости переписывая информацию
из памяти на диск. При исправлении ошибок в  любой  файловой
системе   происходит   запись  скорректированной  информации
только на диск. Если позволить ОС работать дальше, то невер-
ная  информация неизбежно будет переписана из памяти на диск
и, таким образом, испортит всю проделанную работу.

   Для исправления монтируемых файловых систем их  требуется
лишь  размонтировать  перед началом восстановления - никакой
перезагрузки по окончании работ производить не нужно.

   При любой работе  по  восстановлению  необходимо  помнить
следующее:

-    восстанавливаемая  файловая система должна быть размон-
     тирована;

-    если восстанавливается корневая  файловая  система,  то
     работа  с  ней  должна проходить в однопользовательском
     режиме, а к диску обращаются как к устройству небуфери-
     зованного обмена; по окончании восстановительных работ,
     не выполняя команды sync, следует  перевызвать  систему
     (именно  поэтому проверка корневой системы при загрузке


6

     ОС производится из файла /.profile , а не из /etc/rc);

-    если  уверенности  в  результатах  восстановления  нет,
     предварительно скопируйте файловую систему на ленту.

   При проверке больших (более 20000 блоков) корневых файло-
вых  систем fsck использует рабочий файл размером примерно 8
блоков для диска емкостью 2.5 Мбайт. Возникает вопрос:  "Где
его  разместить?"  Так  как  хранящаяся  в нем информация не
должна менять файловую систему. Можно предложить два способа
решения  этого  вопроса.  Размещать  рабочий  файл на другом
устройстве, либо заранее создать в корневой файловой системе
файл достаточных размеров и указать его при вызове fsck. При
работе с этим файлом будут меняться только блоки  данных  на
диске, что не мешает работе fsck.


   2.2. Вызов fsck


   Приведем возможные формы вызова fsck.

/etc/fsck -p [-R] имя_устр.

/etc/fsck [-sx] [-S] [-y] [-n] [-t имя_файла] [имя_устр.]

   С ключом -p fsck восстанавливает заданные файловые систе-
мы  в автономном режиме (без участия оператора). Обычно этот
вариант вызова используется в командном  файле  /etc/rc  при
загрузке ОС.

   Ключ "-R" используется  при  проверке  корневой  файловой
системы. При работе с этим ключом fsck выдает следующие коды
ответа:

ключ -R            задан      не задан

исправная            0            0
файловая система
не изменялась

неисправная          8            8
файловая система

система была         0            1
исправлена

   Далее перечислены ошибки в файловой системе, которые fsck
с ключом -p исправляет без участия оператора:

-    i-узлы не имеют ссылок;

-    счетчики связей в i-узле  и  реальное  число  связей  с
     файлом не совпдают;

-    блоки либо пропущены,  либо  числятся  одновременно  за
     файлом и в списке свободных блоков;

-    неверные счетчики в суперблоках.

   Если при проверке резидентного  диска  встретятся  другие
ошибки, fsck заканчивает работу с аварийным кодом завершения


                                                           7

и выдается сообщение о том, что  операционную  систему  надо
перезагрузить.

   По каждой исправленной  ошибке  выдается  диагностическое
сообщение,  указывающее  имя  проверяемой файловой системы и
проведенные в ней изменения. После успешного  восстановления
файловой  системы  fsck укажет имеющееся в ней число файлов,
свободных и использованных блоков.

   Без ключа -p fsck проверяет и интерактивно устраняет про-
тиворечивые  ситуации, возникающие в файловой системе. Обна-
ружив ошибку в файловой системе, fsck задает вопросы и далее
действует сообразуясь с ответами оператора. Отметим, что при
автономной работе fsck может произойти некоторая потеря  ин-
формации, хранящейся в файловой системе. Количество потерян-
ной информации может быть определено по диагностическим  со-
общениям.  Fsck  начинает  восстановление  файловой  системы
только после того, как  будет  получен  ответ  оператора  по
каждой  директиве. Если у оператора нет полномочий на запись
в файловую систему, то fsck по умолчанию начнет  работать  с
ключом -n.

   Вызвав fsck для интерактивной работы, в командной  строке
можно указать следующие ключи.

-y   Предполагается, что на все вопросы системы fsck был дан
     положительный  ответ.  Этим  ключом  нужно пользоваться
     чрезвычайно осторожно, т.к. его задание дает fsck  воз-
     можность  продолжить  работу  даже в случае обнаружения
     чрезвычайно опасных ошибок.

-n   Предполагается, что на все вопросы fsck был дан отрица-
     тельный  ответ.  Файловая система в этом случае закрыта
     для fsck на запись.

-sx  Не учитывается существующий список свободных блоков, на
     диск  автоматически записывается новый суперблок файло-
     вой системы; перед запуском fsck с этим ключом файловую
     систему следует предварительно размонтировать. Если это
     невозможно, дождитесь завершения всех процессов и пере-
     загрузитесь  немедленно  после  восстановления файловой
     системы - это необходимо сделать для того, чтобы испор-
     ченная  копия суперблока, находящаяся в оперативной па-
     мяти, не использовалась и не была записана  в  файловую
     систему.

     Ключ  -sx  позволяет  создать  оптимальную  организацию
     списка  свободных блоков. Перечислим существующие вари-
     анты ключа -sx:

       -s3 (rp03)

       -s4 (rp04, rp05, rp06)

       -sчисло-блоков-на-цилиндр : число-пропускаемых-блоков
       (для остальных устройств)

     Если цифра в ключе не задана, то используются значения,
     заданные при создании и использовании файловой системы.
     Если эти значения не были определены, используется  ве-
     личина 400:9.



8

-S   Этот ключ аналогичен ключу  -sx,  но  список  свободных
     блоков  заменяется  на  новый только в том случае, если
     расхождений в файловой системе не обнаружено.

     Указание этого ключа предполагает, что fsck по  умолча-
     нию получает отрицательные ответы на возможные вопросы.
     Этот ключ полезен для  реорганизации  списка  свободных
     блоков в корректной файловой системе.

-t   Если fsck не может получить достаточно памяти для своих
     таблиц,  он  использует  рабочий  файл. Если при вызове
     fsck был задан ключ -t, то указанный при нем  файл  ис-
     пользуется  в качестве рабочего. Если ключ -t не задан,
     то в этой ситуации fsck потребует от оператора  указать
     имя рабочего файла. Указанный файл не должен находиться
     в проверяемой фйловой  системе;  исключение  составляет
     проверка  корневой файловой системы - в этом случае ра-
     бочий файл достаточных размеров должен быть создан  за-
     ранее.

   Fsck отслеживает следующие противоречия в файловых систе-
мах.

1.   Блоки, ссылки на которые имеются более, чем в одном  i-
     узле или списке свободных блоков.

2.   Блоки, ссылки на которые имеются в  i-узле  или  списке
     свободных блоков, находятся вне файловой системы.

3.   Неверное число связей в i-узлах.

4.   Неверна размерность справочника  и  номеров  i-узлов  в
     справочнике.

5.   Неверный формат i-узла.

6.   Блоки нигде не учтены.

7.   Проверка справочника:

       файл, указывающий на отсутствующий i-узел;

       неверно задана величина i-узла.

8.   Проверка суперблока:

       i-узлов больше 65536;

       под i-узлы отведено блоков больше, чем имеется в фай-
       ловой системе.

9.   Неверный формат списка свободных блоков.

10.  Неверно задано общее число свободных блоков и/или  сво-
     бодных i-узлов.

   Файлы и справочнки, на которые отсутствуют ссылки, созда-
ются с верными ссылками в справочнике lost+found. Им присва-
иваются имена, равные номеру i-узла. Единственным  ограниче-
нием  является то, что справочник lost+found должен быть за-
ранее создан в "корне" проверяемой файловой  системы,  и  он
должен  иметь  достаточные  размеры. Для этого в нем создают


                                                           9

некоторое число файлов или  справочников  с  последующим  их
уничтожением (перед запуском fsck).

   Проверка устройств небуферизованного обмена всегда испол-
нятся быстрее.

   В целом программа fsck вместе с процедурой автоматическо-
го  контроля  файловых  систем  обеспечивает надежную работу
системы без содержательного вмешательства  системного  прог-
раммиста.


   2.3. Пример использования fsck.


   Ниже приводится фрагмент командного файла, осуществляюще-
го проверку и монтирование дисков.

if fsck -p -t /buffsck /dev/rrk1
   then
/etc/mount /dev/rk1 /usr
   else
echo "Сами проверяйте диски!"
fi


   Далее разбираются компоненты файловой системы и  возника-
ющие в них ошибки.


   2.4. Суперблок


   Одной из наиболее часто портящихся частей файловой систе-
мы  является суперблок. Эта особенность суперблока связана с
тем, что каждое перераспределение  блоков  файловой  системы
вызывает его изменение.

   Чаще всего суперблок и связанные с ним части нарушаются в
случае останова машины, а команда sync не была последней ко-
мандой, произведшей вывод в файловую систему.

   Суперблок может  проверяться на непротиворечивость следу-
ющих  параметров:  размер файловой системы, размер списка i-
узлов и списка свободных блоков, счетчика свободных блоков и
счетчика свободных i-узлов.


   2.4.1. Размеры файловой системы и списка i-узлов


   Размер файловой системы должен  быть  больше,  чем  число
блоков,  используемых  суперблоком  и списком i-узлов. Коли-
чество i-узлов должно быть  меньше, чем 65535. Информация  о
размерах  файловой системы и списка i-узлов является осново-
полагающей для работы fsck. Хотя возможность  проверки  этих
параметров  отсутствует,  fsck все же может осуществлять ее,
исходя из того, что они должны находиться в допустимых  пре-
делах.  Все  остальные проверки файловой системы основаны на
этой информации.




10

   2.4.2. Список свободных блоков


   Список свободных блоков начинается в суперблоке и продол-
жается в блоках списка свободного пространства файловой сис-
темы. В каждом блоке списка свободного пространства проверя-
ются  на  корректность следующие параметры: размер списка не
должен выходить за указанный диапазон; номера  и  количество
уже распределенных в файловой системе блоков не должны выхо-
дить за указанный диапазон. Проверка  необходима  для  того,
чтобы убедиться в том, что найдены все блоки файловой систе-
мы.

   Первый список свободных блоков содержится  в  суперблоке.
Fsck  проверяет находится ли величина счетчика списка  в ди-
апазоне от нуля до пятидесяти. Кроме того программа проверя-
ет,  чтобы  номер  каждого блока был меньше, чем первый блок
данных файловой системы или больше, чем последний блок  фай-
ловой  системы.  Затем она сравнивает номер каждого блока со
списком уже распределенных блоков. Если указатель   на  блок
списка  свободного  пространства   -  ненулевая величина, то
считывается следующий блок списка свободного пространства, и
процесс повторяется.

   Когда считываются все блоки, проверяется равно  ли  число
блоков,  используемых  списком свободных блоков и число бло-
ков, необходимых для i-узлов, общему числу  блоков  файловой
системы.

   Если в списке свободных блоков обнаружено какое-либо про-
тиворечие,  то  fsck может перестроить этот список, исключив
из него все блоки, занесенные в список занятых под  информа-
цию блоков.


   2.4.3. Счетчик свободных блоков


   Суперблок содержит счетчик общего числа свободных блоков,
отведенных  файловой системе. Fsck сравнивает его величину с
числом свободных блоков в файловой системе. Если они не сов-
падают, то fsck может заменить счетчик в суперблоке на теку-
щее значение счетчика свободных блоков.


   2.4.4. Счетчик свободных i-узлов


   Суперблок содержит счетчик общего числа свободных i-узлов
файловой системы. Fsck сравнивает этот счетчик с числом сво-
бодных в настоящее время i-узлов файловой системы. Если  они
не  совпадают,  fsck  может заменить счетчик в суперблоке на
текущее значение счетчика свободных узлов.











                                                          11

   2.5. I-узлы


   Отдельный i-узел не так  подвержен  нарушениям,  как  су-
перблок.  Однако,  в  системе находится большое число задей-
ствованных i-узлов, поэтому вероятность нарушения списка  i-
узлов не меньше вероятности нарушения суперблока.

   Список i-узлов проверяется последовательно, начиная с  i-
узла  1 (i-узел 0 не существует) до последнего i-узла файло-
вой системы. Каждый i-узел может быть проверен на непротиво-
речивость  следующих  параметров: формат и тип, счетчик свя-
зей, ошибочно включенные в несколько файлов  (дублированные)
блоки, дефектные блоки и размер i-узла.


   2.5.1. Формат и тип


   Каждый i-узел содержит слово, определяющее тип  и  состо-
яние  i-узла.  I-узлы  могут  быть  одного из четырех типов:
обычный, i-узел справочника, специального  блокориентирован-
ного  файла и i-узел специального символьного файла. Если i-
узел не принадлежит ни к одному из указанных  типов,  значит
его  тип  неверен.  I-узлы  могут находиться в одном из трех
состояний: учетенном, неучтенном, и ни в одном из этих  двух
состояний.  Последнее состояние указывает на некорректно от-
форматированный i-узел. I-узел оказывается в подобном состо-
янии,  если  в список i-узлов записываются ошибочные данные,
например, вследствие сбоя аппаратуры.  В  этом  случае  fsck
может только очистить i-узел.


   2.5.2. Счетчик связей


   Каждый i-узел содержит счетчик общего числа записей спра-
вочника, связанных с данным  i-узлом.

   Fsck проверяет счетчик связей каждого i-узла  прослежива-
нием общей структуры справочника, начиная с корневого, и вы-
числяя фактический счетчик связей для каждого i-узла.

   Если полученное значение счетчика связей не равно нулю, а
значение  текущего (находящегося в оперативной памяти) счет-
чика связей - величина нулевая, это означает, что для i-узла
записи  справочника не обнаружены. При этом, если оба значе-
ния счетчика связей не равны нулю и друг  другу,  то  запись
справочника  может быть добавлена или удалена без обновления
i-узла.

   Если значение находящегося  во  внешней  памяти  счетчика
связей   не равно нулю, а текущий счетчик связей равен нулю,
fsck  может  связать  отсоединенный  файл  со   справочником
lost+found.  Если величины обоих счетчиков отличны от нуля и
не равны друг другу, fsck может заменить значение  находяще-
гося во внешней памяти счетчика связей на его текущее значе-
ние.






12

   2.5.3. Дублированные блоки


   Каждый i-узел содержит список  или  указатели  на  списки
(косвенные блоки) всех блоков, необходимых i-узлу.

   Fsck сравнивает номер каждого блока, необходимого i-узлу,
со  списком уже распределенных блоков. Если какой-либо номер
блока уже отдан другому i-узлу, номер этого блока добавляет-
ся к списку дублированных блоков. В остальных случаях список
распределенных блоков модифицируется для  включения  в  него
номера этого блока. Если обнаружены какие-либо дублированные
блоки, fsck может частично выполнить второй проход по списку
i-узлов  для  нахождения  i-узла  дублированного  блока. Без
исследования содержимого  файлов,  связанных  с  данными  i-
узлами, информации, определяющей, какой из i-узлов нарушен и
должен быть стерт, недостаточно. В большинстве  случаев,  i-
узел  с более ранним временем изменения является дефектным и
должен быть стерт.

   Это условие может возникнуть при  использовании  файловой
системы  совместно  с блоками, необходимыми одновременно как
для списка свободных блоков, так и для остальных частей фай-
ловой системы.

   Причиной появления большого числа дублированных блоков  в
i-узле  может  быть отсутствие в файловой системе косвенного
блока.

   Fsck требуется разрешение оператора на  чистку  обоих  i-
узлов.


   2.5.4. Ошибочные блоки


   Каждый i-узел содержит список  или  указатель  на  списки
всех блоков, необходимых i-узлу.

   Fsck осуществляет проверку номера каждого блока,  необхо-
димого  i-узлу, на значение, меньшее, чем первый блок данных
или большее, чем последний блок файловой системы. Если номер
блока выходит за указанный диапазон, значит он ошибочен.

   Причиной большого числа ошибочных блоков в i-узле являет-
ся отсутствие в файловой системе косвенного блока.

   Fsck требуется разрешение оператора на  чистку  обоих  i-
узлов.


   2.5.5. Проверка размеров


   Каждый i-узел содержит 32-битное (4-байтное) поле  разме-
ра.  Этот размер указывает число символов в файле, связанном
с данным i-узлом и проверяется на  несоответствие  следующих
параметров: размеры справочника не кратны шестнадцати симво-
лам или число фактически используемых блоков не соответству-
ет размеру i-узла.




                                                          13

   I-узлу справочникa файловой системы  соответствует  уста-
новленный  в  единицу  бит справочникa в слове, определяющем
тип i-узла. Размер справочникa должен быть кратен шестнадца-
ти, т.к. каждая запись справочникa содержит 16 байтов инфор-
мации (2 байта - на номер i-узла и 14 байтов - на имя  файла
или справочникa).

   По этой ошибке fsck может выдать  только  предупреждение,
т.к. информации, необходимой для ее исправления, не хватает.

   Быстрая "прикидка" на  непротиворечивость  поля  размеров
i-узла  проводится получением из поля размеров числа связан-
ных с i-узлом блоков, и его сравнением с текущим числом бло-
ков, отведенных этому i-узлу.

   Fsck вычисляет число блоков, находящихся в i-узле, следу-
ющим образом: число символов в i-узле  делится на число сим-
волов, приходящееся на блок (512 байт), и результат округля-
ется.  Fsck  добавляет  по  одному  блоку в каждый косвенный
блок, связанный с данным  i-узлом.  Если  фактическое  число
блоков  не  соответствует вычисленному, fsck предупреждает о
возможной ошибке в размере файла. Но это только предупрежде-
ние,  потому  что ДЕМОС не вставляет блоки в файлы, создава-
емые в произвольном порядке.


   2.6. Косвенные блоки


   Косвенные блоки принадлежат i-узлу. Следовательно,  несо-
ответствие  данных в косвенных блоках непосредственно влияет
на i-узел, которому они принадлежат.

   Проверка может выявить следующие противоречия: блоки  уже
захвачены  другим  i-узлом и число блоков выходит за границы
файловой системы.

   Для нахождения и корректировки противоречий, связанных  с
косвенными  блоками, примените действия, описанные в пунктах
2.2.3. и 2.2.4., последовательно к каждому уровню  косвенных
блоков.


   2.7. Блоки данных


   Существует два типа блоков данных - простые блоки  данных
и  блоки  данных справочников. Простые блоки данных содержат
информацию, хранящуюся в файле.  Блоки  данных  справочников
содержат записи справочников. Fsck не проверяет простые бло-
ки данных на достоверность их содержимого.

   Проверка каждого блока данных справочника  может  выявить
следующие  противоречия:  номера  i-узлов  указывают  на не-
распределенные i-узлы; число i-узлов справочника больше, чем
число i-узлов файловой системы; неверное число i-узлов спра-
вочника для "." и ".." и, наконец, отсоединенные от файловой
системы справочники.

   Если номер i-узла записи справочника указывает  на  неуч-
тенный  узел,  то  fsck  удаляет  эту запись. Такая ситуация
может возникнуть потому, что блоки данных, содержащие записи


14

справочника,  были изменены и записаны в файловую систему, а
i-узел - еще нет.

   Если i-узел записи справочника указывает за конец  списка
i-узлов, fsck может удалить эту запись. Это состояние возни-
кает, если в блок данных справочника записываются  ошибочные
данные.

   Запись номера i-узла  для  справочника  "."  должна  быть
первой  записью  в  блоке  данных  справочника.  Ее величина
должна быть равна номеру i-узла блока данных справочника.

   Запись номера i-узла для  справочника  ".."  должна  быть
второй  записью  в  блоке  данных  справочника.  Ее величина
должна быть равна номеру  i-узла  "родителя"  данной  записи
справочника  (или  номеру  i-узла  блока данных справочника,
если справочник - корневой).

   Если номера i-узлов справочника неверны, fsck заменяет их
верными.

   Fsck проверяет общую связность файловой системы. Если об-
наруживается,  что  справочники не связаны с файловой систе-
мой, fsck присоединяет их в  справочнике  lost+found.  Такая
ситуация возникает когда i-узлы записываются в файловую сис-
тему, а соответствующие блоки данных справочника - нет.


   2.8. Блоки списков свободного пространства


   Блоки списков  свободного  пространства  принадлежат  су-
перблоку.  Следовательно,  возникающие  в них несоответствия
влияют непосредственно на суперблок.

   В результате проверки могут быть выявлены следующие  про-
тиворечия: размер списка превышает указанный диапазон; число
блоков выходит  за допустимые границы; блоки уже присоедине-
ны к файловой системе.

   Выявление и  устранение  этих  ошибок  обсуждается  в  п.
2.1.2.






















                                                          15




                       3. ДИАГНОСТИКА


   В процессе работы, программа fsck выдает различные  диаг-
ностические  сообщения, причиной которых являются обнаружен-
ные в файловой системе ошибки или неправильное задание  опе-
ратором режимов работы программы.

   Обнаружив ошибку, fsck сообщает о ее причине и, если воз-
можно,  предлагает  оператору различные варианты продолжения
работы. В данной  главе  описаны  диагностические  сообщения
fsck, возможные ответы оператора на вопросы программы и дей-
ствия, выполняемые fsck после получения ответов.

   Диагностические сообщения сгруппированы по  шагам  работы
fsck.  В разделе 3.1 приведены сообщения, общие для всех или
ряда шагов работы fsck.


   3.1. Подготовительные действия


   Перед проверкой файловой системы fsck создает  внутренние
таблицы  и  открывает  необходимые  файлы.  В данном разделе
рассматривается диагностика, возникающая при открытии файлов
и  создании  таблиц.  Кроме того, поясняются диагностические
сообщения, возникающие вследствие неправильного  использова-
ния ключей в командной строке, требований на выделение памя-
ти, открытия и состояния файлов, проверок размеров  файловой
системы и создания рабочих файлов.


C option?

Для fsck ключ C не имеет смысла. Доступны  следующие  ключи:
-y, -n, -su -t, -p, -R, -S. Fsck прекращает работу.


Bad -t option

За ключем -t не указано имя файла. Fsck прекращает работу.


Invalid -s argument, defaults assumed

За ключем -s не стоят параметры  3,  4  или  параметр  коли-
чество_блоков_на_цилиндре:кличество_пропускаемых_блоков.  По
умолчанию fsck предполагает 400 блоков_на_цилиндре и 9  про-
пускаемых_блоков.


Incompatible options -n and -s

Список свободных блоков невозможно восстановить без  модифи-
кации файловой системы. Fsck прекращает работу.


Can't get memory



16

Операционная система на может выделить fsck необходимое  ко-
личество оперативной памяти. Fsck прекращает работу.


F is not а block or character device

В качестве устройства fsck указано имя обычного, а не специ-
ального  файла. Проверка данной файловой системы прекращает-
ся.


Can't open f

Файловая система f не может быть открыта для чтения. Провер-
ка  данной  файловой  системы прекращается. Проверьте режимы
доступа f.


Size снеск: fsize X isize Y

Для списка i-узлов отведено блоков  больше,  чем  имеется  в
самой  файловой  системе,  либо  в ней задано более 65535 i-
узлов. Проверка данной файловой системы прекращается (см. п.
2.1.1.).


Can't create F

Запрос fsck на создание временного файла не  выполнен.  Про-
верка данной файловой системы прекращается. Проверьте режимы
доступа F.


CAN NOT SEEK: BLK B (CONTINUE)


Запрос fsck на переход к блоку  с  номером  B  не  выполнен.
Серьезная ошибка файловой системы.

   Возможны следующие ответы на вопрос CONTINUE:

  YES    Попытаться продолжить  проверку  файловой  системы.
         Данная ошибка не позволит произвести полную провер-
         ку файловой системы. Необходимо произвести  повтор-
         ный вызов программы fsck для ее проверки. Если блок
         был частью виртуальной кэш-памяти, выполнение  fsck
         будет  прекращено  с  сообщением  "Fatal I/O error"
         ("ошибка ввода/вывода").

  NO     Прекратить выполнение программы.


CAN NOT READ: BLK B (CONTINUE)

Запрос fsck на чтение указанного блока данной файловой  сис-
темы не выполнен. Серьезная ошибка в файловой системе.

   Возможны следующие ответы на вопрос CONTINUE:

  YES    Продолжить проверку файловой системы. Данная ошибка
         не  позволит  произвести  полную  проверку файловой
         системы.  Необходимо  произвести  повторный   вызов


                                                          17

         программы  fsck  для  ее  проверки.  Если  блок был
         частью  виртуальной  кэш-памяти,  выполнение   fsck
         будет  прекращено  с  сообщением "Fatal I/O error "
         ("ошибка ввода/вывода").

  NO     Прекратить выполнение программы.


CAN NOT WRITE: BLK B (CONTINUE)


Запрос fsck на запись указанного блока данной файловой  сис-
темы не выполнен. Диск защищен по записи.

   Возможны следующие ответы на вопрос CONTINUE:

  YES    Продолжить проверку файловой системы. Эта ошибка не
         позволит произвести полную проверку файловой систе-
         мы. Необходимо произвести второй  прогон  программы
         fsck   для ее проверки. Если блок был частью вирту-
         альной кэш-памяти, выполнение fsck будет прекращено
         с сообщением "Fatal I/O error" ("ошибка ввода/выво-
         да").

  NO     Прекратить выполнение программы.


   3.2. Шаг 1: проверка блоков и размеров


   На первом шаге проверяется список i-узлов. В данном  раз-
деле описаны диагностические сообщения, возникающие при про-
верке типов i-узлов; заполнении таблицы  недоступных  файлов
(на которые нет ссылок в списке i-узлов); исследовании номе-
ров блоков i-узла, относящихся к ошибочным или дублированным
блокам,  т.е. ошибочно включенным в несколько файлов или од-
новременно в файл и список свободных блоков; проверке разме-
ра и формата i-узла.


UNKNOWN FILE TYPE I=N (CLEAR)

Дескриптор i-узла N указывает, что файл не является блокори-
ентированным или символьным специальным файлом, справочником
или обычным файлом (см. п. 2.2.1.).

   Возможны следующие ответы на вопрос CLEAR:

  YES    Обнулить содержмое i-узла N.  В  любом  случае  эта
         ошибка  вызовет  на шаге 2 ошибку "UNALLOCATED" для
         каждой записи справочника,  указывающей  на  данный
         i-узел.

  NO     Игнорировать эту ошибку.


LINK COUNT TABLE OWERFLOW (CONTINUE)

Переполнение внутренней таблицы fsck, содержащей  список  i-
узлов и недоступных файлов. Перекомпилируйте  fsck с большим
значением maxlncnt.



18

   На вопрос CONTINUE возможны следующие ответы:

  YES    Продолжить выполнение программы. Эта ошибка не поз-
         волит  выполнить  полную проверку файловой системы.
         Необходим повторный вызов fsck. При обнаружении еще
         одного  i-узла  со  счетчиком нулевых связей данная
         ошибка повторяется.

  NO     Остановить выполнение программы.


B BAD I=N

I-узел содержит блок, номер "B" которого либо меньше  номера
первого  блока  данных  файловой системы, либо больше номера
последнего блока файловой системы. Если в i-узле много  бло-
ков,  номера которых выходят за допустимый диапазон файловой
системы, то данная ошибка может вызвать  на  шаге  1  ошибку
"EXCESSIVE BAD BLKS". Кроме того, эта ошибка всегда вызывает
ошибку "BAD/DUP" на выполнении шагов 2 и 4 (см. п. 2.2.4).


EXCESSIVE BAD BLKS I=N (CONTINUE)

В файловой системе, связанной с i-узлом  N,  число  неверных
блоков  (блоков,  номера  которых либо меньше номера первого
блока данных файловой системы, либо больше номера последнего
блока  этой  файловой  системы) превышает допустимое (обычно
10)(см. п. 2.2.4).

   На вопрос CONTINUE возможны следующие ответы:

  YES    Игнорировать в данном i-узле лишние блоки и продол-
         жить  проверку  следующего i-узла файловой системы.
         Данная ошибка не позволит осуществить  полную  про-
         верку  файловой системы. Для повторной проверки не-
         обходимо еще раз вызвать программу fsck.

  NO     Остановить программу fsck.


B DUP I=N

I-узел N содержит блок номер "B", который уже отнесен к дру-
гому  i-узлу.  Если  i-узел N содержит слишком большое число
блоков, отнесенных к другим i-узлам, то на шаге 1 может воз-
никнуть  ошибка  "EXCESSIVE  DUP  BLKS".  Кроме того, данная
ошибка  всегда  приводит  к  выполнению  шага  1b  и  ошибке
"BAD/DUP" на шагах 2 и 4 (см. п. 2.2.3).


EXCESSIVE DUP BLKS I=N (CONTINUE)

Число блоков, отнесенных к другим i-узлам, превышает  допус-
тимое (обычно 10); см. п. 2.2.3.

   На вопрос CONTINUE  возможны следующие ответы:

  YES    Игнорировать лишние блоки данного i-узла и  продол-
         жить  проверку в следующем i-узле файловой системы.
         Данная ошибка не позволит осуществить  полную  про-
         верку  файловой  системы.  Необходим  еще повторный


                                                          19

         вызов программы fsck.

  NO     Остановить программу fsck.


DUP TABLE OVERFLOW (CONTINUE)

Переполнение таблицы fsck, содержащей  номера  дублированных
блоков.  Необходимо перекомпилировать fsck с большей величи-
ной duptblsize.

   На вопрос CONTINUE возможны следующие ответы:

  YES    Продолжть выполнение программы.  Данная  ошибка  не
         позволит осуществить полную проверку фйловой систе-
         мы. Необходим повторный вызов fsck. При обнаружении
         еще одного дублированного блока эта ошибка повторя-
         ется.

  NO     Остановить выполнение программы fsck.


POSSIBLE FILE SIZE ERROR I=N

Размер i-узла не соответствует  фактическому  числу  блоков,
используемых  данным i-узлом. Это сообщение является предуп-
реждающим (см. п. 2.2.5).


DIRECTORY MISALIGNED I=N

Рассогласование справочника, т.е. размер i-узла  справочника
не кратен размеру записи (обычно 16). Это сообщение является
предупреждающим (см. п. 2.2.5).


PARTIALLY ALLOCATED INODE I=N (CLEAR)

I-узел ни выделен, ни невыделен  файловой  системе  (см.  п.
2.2.1).

   На вопрос CLEAR возможны следующие ответы:

  YES    Обнулить содержимое i-узла.

  NO     Игнорировать ошибку.


   3.3. Шаг 1b: поиск оставшихся дублированных блоков


   Если в файловой системе обнаружен  блок,  номер  которого
закреплен  за несколькими i-узлами, то для поиска первого из
них файловая система просматривается вторично.


B DUP I=N

I-узел содержит блок номер "B",  который  уже  закреплен  за
другим  i-узлом. Эта ошибка всегда вызывает ошибку "BAD/DUP"
на шаге 2. Исследовав ошибку "DUP" при выполнении шагов 1  и
2, можно определить, в каких i-узлах содержатся блоки, номе-


20

ра  которых  закреплены  за  несколькими  i-узлами  (см.  п.
2.2.3).


   3.4. Шаг 2: проверка полных имен файлов


   На шаге 2 уничтожаются записи  справочников,  указывающие
на  "аварийные" i-узлы, обнаруженные на шагах 1 и 1b. В этом
разделе описаны ошибки, относящиеся к типу и состоянию  кор-
невого  i-узла, диапазону величин указателей на i-узлы спра-
вочников, записям справочников, указывающим на дефектные  i-
узлы.


ROOT INODE UNALLOCATED, TERMINATING

В корневом i-узле (которым является обычно второй i-узел) не
проставлены  биты,  определяющие  тип.  Выполнение программы
прекращается (см. п. 2.2.1).


ROOT INODE NOT DIRECTORY (FIX)

Корневой i-узел (которым является обычно второй i-узел) име-
ет тип i-узла, отличный от типа "справочник" (см. п. 2.2.1).

   На вопрос FIX возможны следующие ответы:

  YES    Установить для корневого  i-узла  тип  справочника.
         Если блоки данных корневого i-узла не являются бло-
         ками справочника, то возникает очень большое  число
         ошибок.

  NO     Остановить выполнение программы fsck.

DUPS/BAD IN ROOT INODE (CONTINUE)

На шаге 1 в корневом i-узле (обычно, второй i-узел) были об-
наружены  дублированные или ошибочные блоки файловой системы
(см. п. 2.2.3 и п. 2.2.4).

   На вопрос CONTINUE можно давать следующие ответы:

  YES    Игнорировать ошибку "DUPS/BAD" в корневом i-узле  и
         попытаться  продолжить  проверку  файловой системы.
         Некорректность корневого i-узла  может  привести  к
         очень большому числу ошибок.

  NO     Остановить выполнение программы.


I OUT OF RANGE I=N NAME=F (REMOVE)

Запись справочника F содержит i-узел номер N, значение кото-
рого больше верхней границы списка i-узлов (см. п. 2.4).

   На вопрос REMOVE дают следующие ответы:

  YES    Удалить запись справочника файловой системы F.




                                                          21

  NO     Игнорировать ошибку.


UNALLOCATED  I=N  OWNER=O  MODE=M  SIZE=S   MTIME=T   NAME=F
(REMOVE)

Запись справочника  F содержит i-узел N, тип которого не оп-
ределен.  Печатаются  следующие  параметры:  владелец O, тип
файла M, размер S, время модификации T и имя файла F (см. п.
2.4).

   На вопрос REMOVE возможны следующие ответы:

  YES    Удалить запись справочника  F.

  NO     Игнорировать ошибку.


DUP/BAD I=N OWNER=O MODE=M SIZE=S MTIME=T DIR=F (REMOVE)

На шагах 1 или 1b были обнаружены дублированные или  ошибоч-
ные  блоки,  связанные  с  записью справочника F, i-узлом N.
Печатаются следующие параметры: владелец  O,  тип  файла  M,
размер  S,  время  модификации T и имя справочника F (см. п.
2.2.3 и п. 2.2.4).

   На вопрос REMOVE возможны следующие ответы:

  YES    Удалить запись справочника F.

  NO     Игнорировать ошибку.


DUP/BAD I=N OWNER=O MODE=M SIZE=S MTIME=T FILE=F (REMOVE)

На шагах 1 или 1b были обнаружены дублированные или  ошибоч-
ные  блоки,  связанные  с  записью справочника F, i-узлом N.
Печатаются следующие параметры: владелец  O,  тип  файла  M,
размер  S, время модификации T и имя файла F (см. п. 2.2.3 и
п. 2.2.4).

   На вопрос REMOVE возможны следующие ответы:

  YES    Удалить запись справочника F.

  NO     Игнорировать ошибку.


   3.5. Шаг 3: проверка связности


   В данном разделе приводится  список  ошибок,  возникающих
из-за  отсутствия  ссылок на справочники, а также отсутствия
или переполнения справочников lost+found.

UNREF DIR I=N OWNER=O MODE=M SIZE=S MTIME=T (RECONNECT)

При проходе по файловой системе i-узел N справочника не  был
соединен  с  записью справочника. Печатаются следующие пара-
метры: владелец O, тип файла M, размер S и время модификации
T i-узла N справочника (см. п. 2.4 и п. 2.2.2).



22

   На вопрос RECONNECT возможны следующие ответы:

  YES    Заново присоединить i-узел N к справочнику потерян-
         ных  файлов  (обычно  lost+found) в данной файловой
         системе; если при этом возникают какие-либо ошибки,
         то при проходе шага 3 выдается аварийная диагности-
         ка по "lost+found". Кроме того, если было проведено
         нормальное  соединение,  то на шаге 3 может возник-
         нуть ошибка типа CONNECTED.

  NO     Игнорировать ошибку.  Этот  ответ,  при  выполнении
         шага 4, может вызвать ошибку типа UNREF.

SORRY, NO lost+found DIRECTORY

В корневом справочнике файловой системы отсутствует справоч-
ник  lost+found;  fsck игнорирует команду присоединить спра-
вочник lost+found. При выполнении шага 4 может  быть  выдано
аварийное сообщение типа UNREF.


SORRY, NO SPACE IN lost+found DIRECTORY

В корневом справочнике файловой системы нет места для добав-
ления еще одной записи в справочник lost+found; fsck игнори-
рует команду "присоединить  справочник  к  lost+found".  Эта
ошибка  является  причиной  ошибки типа UNREF при выполнении
шага 4. Уничтожьте ненужные записи в lost+found или увеличь-
те его размеры.

DIR I=11 CONNECTED, PARENT WAS I=12

Это сообщение носит информационный характер: сообщается, что
i-узел  11  успешно  соединен со справочником lost+found. I-
узел 12, являющийся "родителем" i-узла 11, заменяется  номе-
ром i-узла справочника lost+found (см. п. 2.4 и п. 2.2.2).


   3.6. Шаг 4: проверка счетчиков ссылок


   В данном разделе приводятся сообщения об ошибках,  причи-
нами  которых  являются: существование файлов или справочни-
ков, не имеющих ссылок; отсутствие или переполнение справоч-
ника  lost+found; неверные счетчики ссылок для файлов, спра-
вочников или специальных файлов; ошибочные  и  дублированные
блоки  в  файлах и справочниках; неверные счетчики всех сво-
бодных i-узлов.

UNREF FILE I=N OWNER=O MODE=M SIZE=S MTIME=T (RECONNECT)

При проходе по файловой системе i-узел N не был  соединен  с
записью  справочника. Печатаются следующие параметры: владе-
лец O, тип файла M, размер S и время модификации T i-узла  N
(см. п. 2.2.2).

   На вопрос RECONNECT возможны следующие ответы:

  YES    Еще раз присоединить i-узел N к  справочнику  поте-
         рянных  файлов  (обычно lost+found) данной файловой
         системы. Если при этом возникают какие-либо затруд-
         нения,  то  при  выполнении шага 4 может возникнуть


                                                          23

         ошибка, связанная со справочником lost+found.

  NO     Игнорировать ошибку. Этот ответ может вызвать ошиб-
         ку типа CLEAR при выполнении шага 4.


SORRY, NO lost+found DIRECTORY

В корневом справочнике файловой системы отсутствует справоч-
ник  lost+found;  fsck  в этом случае не присоединяет файл к
lost+found. Эта ошибка влечет за собой ошибку типа CLEAR при
выполнении шага 4. Проверьте режимы доступа к lost+found.


SORRY, NO SPACE IN lost+found DIRECTORY

В корневом справочнике файловой системы нет  места  для  еще
одной  записи  в справочнике lost+found; fsck игнорирует ко-
манду присоединить файл к lost+found. Эта ошибка  влечет  за
собой  ошибку  типа  CLEAR  при выполнении шага 4. Проверьте
размер и содержимое справочника lost+found.


(CLEAR)

I-узел, описанный в предыдущем разделе, не может быть присо-
единен еще раз (см. п. 2.2.2).

   На вопрос CLEAR возможны следующие ответы:

  YES    Инициализировать i-узел, рассмотренный в предыдущем
         разделе.

  NO     Игнорировать ошибку.


LINK COUNT FILE I=N OWNER=O MODE=M  SIZE=S  MTIME=T  COUNT=X
SHOULD BE Y (ADJUST)

Счетчик связей i-узла N, являющегося файлом, должен быть  не
"X",  а "Y". Печатаются следующие параметры: владелец O, тип
файла M, размер S и время модификации T (см. п. 2.2.2).

   На вопрос ADJUST возможны следующие ответы:

  YES    Заменить счетчик связей i-узла N файла на "Y".

  NO     Игнорировать ошибку.


LINK COUNT DIR I=N OWNER=O  MODE=M  SIZE=S  MTIME=T  COUNT=X
SHOULD BE Y (ADJUST)

Счетчик связей i-узла N,  являющегося  справочником,  должен
быть не "X", а "Y". Печатаются следующие параметры: владелец
O, тип файла M, размер S и время модификации T справочника I
(см. п. 2.2.2).

   На вопрос ADJUST возможны следующие ответы:





24

  YES    Заменить счетчик связей  i-узла  N  справочника  на
         "Y".

  NO     Игнорировать ошибку.


LINK COUNT F  I=N  OWNER=O  MODE=M  SIZE=S  MTIME=T  COUNT=X
SHOULD BE Y (ADJUST)

Счетчик связей для i-узла N файловой системы F  должен  быть
не "X", а "Y". Печатаются следующие параметры: имя F, владе-
лец O, тип файла M, размер S и время модификации T  (см.  п.
2.2.2).

   На вопрос ADJUST возможны следующие ответы:

  YES    Заменить счетчик связей i-узла N на Y.

  NO     Игнорировать ошибку.


UNREF FILE I=N OWNER=O MODE=M SIZE=S MTIME=T(CLEAR)

При проходе по файловой системе i-узел N файла не был присо-
единен к записи справочника. Печатаются следующие параметры:
владелец O, тип файла M, размер S и время модификации  T  i-
узла N (см. п. 2.2.2 и п. 2).

   На вопрос CLEAR возможны следующие ответы:

  YES    Обнулить содержимое i-узла N.

  NO     Игнорировать ошибку.


UNREF DIR I=N OWNER=O MODE=M SIZE=S MTIME=T (CLEAR)

При проходе по файловой системе i-узел N справочника не  был
присоединен к записи справочника. Печатаются следующие пара-
метры: владелец O, тип файла M, размер S и время модификации
T i-узла N.

   На вопрос CLEAR возможны следующие ответы:

  YES    Обнулить содержимое i-узла N.

  NO     Игнорировать ошибку.


BAD/DUP FILE I=N OWNER=O MODE=M SIZE=S MTIME=T (CLEAR)

Во время выполнения шагов 1 или 1b были обнаружены  дублиро-
ванные  или  ошибочные  блоки, связанные с i-узлами N файла.
Печатаются следующие параметры: владелец  O,  тип  файла  M,
размер  S  и время модификации T i-узла N (см. п. 2.2.3 и п.
2.2.4).

   На вопрос CLEAR возможны следующие ответы:

  YES    Обнулить содержимое i-узла N.




                                                          25

  NO     Игнорировать ошибку.


BAD/DUP DIR I=N OWNER=O MODE=M SIZE=S MTIME=T (CLEAR)

Во время выполнения шагов 1 или 1b были обнаружены  дублиро-
ванные  или ошибочные блоки, связанные с i-узлами N справоч-
ника. Печатаются следующие параметры: владелец O, тип  файла
M,  размер  S и время модификации T i-узла N (см. п. 2.2.3 и
п. 2.2.4).

   На вопрос CLEAR возможны следующие ответы:

  YES    Обнулить содержимое i-узла N.

  NO     Игнорировать ошибку.


FREE INODE COUNT WRONG IN SUPERBLK (FIX)

Текущий счетчик свободных i-узлов не соответствует  счетчику
в суперблоке данной файловой системы (см. п. 2.1.4).

   На вопрос FIX возможны следующие ответы:

  YES    Заменить счетчик  в  суперблоке  текущим  значением
         счетчика.

  NO     Игнорировать ошибку.


   3.7. Шаг 5: проверка списков свободных блоков


   В данном разделе приводится список ошибок, возникающих  в
списке свободных блоков. Их причинами является существование
ошибочных блоков в списке свободных блоков, неверное  значе-
ние счетчика свободных блоков, дублированных блоков в списке
свободных блоков,  отсутствие  номеров  свободных  блоков  в
списке  свободных  блоков  и наличие неверного счетчика всех
свободных блоков.

EXCESSIVE BAD BLKS IN FREE LIST (CONTINUE)

Количество блоков, содержащихся в списке  свободных  блоков,
превышает  допустимое  число  (обычно  10). Их номера меньше
первого блока данных файловой системы или больше,  чем  пос-
ледний блок файловой системы (см. п. 2.1.2 и п. 2.2.4).

   На вопрос CONTINUE возможны следующие ответы:

  YES    Игнорировать оставшиеся блоки из списка  и  продол-
         жить выполнение fsck. Эта ошибка влечет ошибку типа
         BAD BLKS IN FREE LIST на шаге 5.

  NO     Прекратить выполнение программы.

EXCESSIVE DUP BLKS IN FREE LIST (CONTINUE)

Количество блоков, содержащихся в списке  свободных  блоков,
превышает  допустимое  число  (обычно 10), требуемое i-узлам
или предыдущим частям списка свободных блоков (см. п.  2.1.2


26

и п. 2.2.3).

   На вопрос CONTINUE возможны следующие ответы:

  YES    Игнорировать оставшиеся блоки из списка  и  продол-
         жить выполнение fsck. Эта ошибка влечет ошибку типа
         DUP BLKS IN FREE LIST на шаге 5.

  NO     Прекратить выполнение программы.

BAD FREEBLK COUNT

Значение  счетчика  свободных  блоков  в  списке  свободного
пространства  больше  50 или меньше 0. Данная ошибка вызовет
ошибку типа BAD FREE LIST на шаге 5 (см. п. 2.1.2).

X BAD BLKS IN FREE LIST

X блоков в списке свободных блоков имеют  значения  номеров,
меньше,  чем номер первого блока данных файловой системы или
больше, чем номер последнего  блока  файловой  системы.  Эта
ошибка  приведет  к ошибке типа BAD FREE LIST на шаге 5 (см.
п. 2.1.2 и п. 2.2.4).


X DUP BLKS IN FREE LIST

В списке свободных блоков было обнаружено X блоков, затребо-
ванных i-узлами или предыдущими частями блока списка свобод-
ного пространства. Эта ошибка вызобет ошибку типа  BAD  FREE
LIST на шаге 5 (см. п. 2.1.2 и п. 2.2.3).


X BLK(S) MISSING

X неиспользуемых файловой системой блоков не было обнаружено
в  списке  свободных  блоков. Эта ошибка вызовет ошибку типа
BAD FREE LIST на шаге 5 (см. п. 2.1.2).


FREE BLK COUNT WRONG IN SUPERBLCK (FIX)

Фактический счетчик свободных блоков не соответствует  счет-
чику, находящемуся в суперблоке данной файловой системы (см.
п. 2.1.3).

   На вопрос FIX возможны следующие ответы:

  YES    Заменить значение счетчика в суперблоке на  текущее
         значение из оперативной памяти.

  NO     Игнорировать ошибку.


BAD FREE LIST (SALVAGE)

На шаге 5 были найдены ошибочные или дублированные  блоки  в
списке свободных блоков или блоки, пропущенные в данной фай-
ловой системе (см. п. 2.1.2, п. 2.2.3 и п. 2.2.4).

   На вопрос SALVAGE возможны следующие ответы:



                                                          27

  YES    Заменить текущее значение счетчика в суперблоке  на
         значение  из  оперативной памяти. Новый список сво-
         бодных блоков должен будет сократить  время  ожида-
         ния,  выделяемое диску, для его подхода в требуемую
         позицию.

  NO     Игнорировать ошибку.


   3.8. Шаг 6: восстановление списка свободных блоков


   В данном разделе приведены ошибки, причинами которых  яв-
ляется  задание  неверных  значений  параметров пропускаемых
блоков и блоков, приходящихся на цилиндр.

Default free-block list spacing assumed

Это сообщение только указывает, что число пропускаемых  бло-
ков больше числа блоков, приходящихся на цилиндр; число про-
пускаемых блоков меньше единицы; число блоков,  приходящихся
на  цилиндр  меньше  единицы или превышает 500. По умолчанию
назначается 9 пропускаемых блоков и 400 блоков, приходящихся
на цилиндр.


   3.9. Чистка


   После проверки файловой  системы,  выполняются  некоторые
действия по ее чистке. В данном разделе приводятся сообщения
о файловой системе и изменении ее состояния.

X files Y blocks Z free

Данное сообщение указывает, что проверенная файловая система
содержала  X  файлов, в ней использовано Y блоков и Z блоков
свободно.

***** BOOT DEMOS (NO SYNC!) *****

Это сообщение указывает на то, что программа fsck  закончила
модификацию  монтируемой или корневой файловой системы. Если
сразу же не перезагрузить ситему ДЕМОС, то  изменения,  вне-
сенные  fsck  в  файловую систему, могут быть уничтожены при
обменах с оперативной памятью.

***** FILE SYSTEM WAS MODIFIED *****

Это сообщение указывает на то, что  fsck  изменила  файловую
систему.  Если данная файловая система  смонтирована или яв-
ляется корневой, необходимо остановить fsck и  перезагрузить
ДЕМОС.  Если перезагрузка не будет осуществлена, работа, вы-
полненная программой fsck, может пропасть впустую.










28



                         СОДЕРЖАНИЕ



1.  ПРЕДВАРИТЕЛЬНЫЕ СВЕДЕНИЯ...........................    3
    1.1. Назначение программы fsck.....................    3
    1.2. Структура файловой системы....................    3
    1.2.1. Суперблок...................................    4
    1.2.2. I-узлы......................................    4
    1.2.3. Косвенные блоки.............................    4
    1.2.4. Блоки данных................................    5
    1.2.5. Блок списка свободного пространства.........    5

2.  ВЫЯВЛЕНИЕ И УСТРАНЕНИЕ ОШИБОК В ФАЙЛОВОЙ СИСТЕМЕ...    6
    2.1. Методы восстановления файловых систем.........    6
    2.2. Вызов fsck....................................    7
    2.3. Пример использования fsck.....................   10
    2.4. Суперблок.....................................   10
    2.4.1. Размеры файловой системы и списка i-узлов...   10
    2.4.2. Список свободных блоков.....................   11
    2.4.3. Счетчик свободных блоков....................   11
    2.4.4. Счетчик свободных i-узлов...................   11
    2.5. I-узлы........................................   12
    2.5.1. Формат и тип................................   12
    2.5.2. Счетчик связей..............................   12
    2.5.3. Дублированные блоки.........................   13
    2.5.4. Ошибочные блоки.............................   13
    2.5.5. Проверка размеров...........................   13
    2.6. Косвенные блоки...............................   14
    2.7. Блоки данных..................................   14
    2.8. Блоки списков свободного пространства.........   15

3.  ДИАГНОСТИКА........................................   16
    3.1. Подготовительные действия.....................   16
    3.2. Шаг 1: проверка блоков и размеров.............   18
    3.3. Шаг 1b: поиск  оставшихся  дублированных  бло-
         ков...........................................   20
    3.4. Шаг 2: проверка полных имен файлов............   21
    3.5. Шаг 3: проверка связности.....................   22
    3.6. Шаг 4: проверка счетчиков ссылок..............   23
    3.7. Шаг 5: проверка списков свободных блоков......   26
    3.8. Шаг 6: восстановление  списка  свободных  бло-
         ков...........................................   28
    3.9. Чистка........................................   28


















                                                          29

