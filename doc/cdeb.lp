
            дддд   ееееее   м     м    oooo     сссс
           д   д   е        мм   мм   o    o   с    с
          д    д   е        м м м м   o    o   с    с
          д    д   еееее    м  м  м   o    o   с
          д    д   е        м     м   o    o   с
          д    д   е        м     м   o    o   с    с
         дддддддд  ееееее   м     м    oooo     сссс



          демосдемосдемосдемосдемосдемосдемосдемосде
          емосдемосдемосдемосдемосдемосдемосдемосдем
          мо                                      мо
          ос                                      ос
          сд        ОПЕРАЦИОННАЯ СИСТЕМА          сд
          де                                      де
          ем               ДЕМОС                  ем
          мо                                      мо
          ос                                      ос
          сд                                      сд
          де             Версия 1.0               де
          ем                                      ем
          мо                                      мо
          сдемосдемосдемосдемосдемосдемосдемосдемосд
          демосдемосдемосдемосдемосдемосдемосдемосде







                    ДИАЛОГОВЫЙ ОТЛАДЧИК
                 ДЛЯ ЯЗЫКОВ СИ И ФОРТРАН-77






                  Флеров Михаил Николаевич












                       МОСКВА - 1985









                                                           1



   Описывается диалоговый отладчик  "cdeb",  предназначенный
для   интерактивной   отладки  программ  на  языках  "Си"  и
"Фортран-77". Отладка ведется в терминах языка,  на  котором
написана отлаживаемая программа.



























































2




                        1. Введение


   Отладчик cdeb позволяет отлаживать программы,  написанные
на  языках  Си  и  Фортран-77, по шагам в терминах исходного
языка, т.е. выполнять их по отдельным операторам, просматри-
вать  значения  переменных  в произвольный момент выполнения
программы, обнаруживать операторы, вызывающие аварийные  со-
бытия в программе и т.п. С его помощью можно быстро находить
ошибки кодирования, нарушение логики работы и  причины  ава-
рийных событий в программе. Отладчик прост и может использо-
ваться программистами средней квалификации. Для работы с от-
ладчиком  не требуется знание языка ассемблера или тонкостей
реализации языка Си или Фортран-77 на конкретной ЭВМ.

   В инструкции при описании команд отладчика приняты следу-
ющие синтаксические обозначения:

   - основные понятия записываются русскими буквами и симво-
     лом  "_" и начинаются с большой буквы, например: Число,
     Описание_переменной;

   - необязательные элементы команд  помещаются  в  фигурные
     скобки, например: ^s{Число};

   - обозначения <ВК> и <СУ> означают клавиши "ВК" ("возврат
     каретки")  и "СУ" ("символ управления") соответственно,
     <СУ>D означает одновременно нажатые клавиши  <су>  и  D
     (при этом вырабатывается код "управляющее D");

   - остальные символы обозначают сами себя.

   В описании предполагается, что сигнал "quit" генерируется
при нажатии <СУ>\, а сигнал "interrupt" - при нажатии <СУ>C.



























                                                           3




             2. ОСНОВНЫЕ ВОЗМОЖНОСТИ ОТЛАДЧИКА


   Отладчик cdeb позволяет:

1)   приостанавливать выполнение  программы  в  произвольной
     точке,  т.е. перед выполнением заданного оператора, при
     вызове указанной функции, при вызове функции на  задан-
     ной глубине рекурсии;

2)   приостанавливать выполнение программы в случае  аварий-
     ного  события,  при изменении указанной переменной, при
     получении конкретной переменной заданного  значения,  в
     произвольный момент времени по нажатию определенной уп-
     равляющей клавиши;

3)   просматривать текст приостановленной программы в произ-
     вольной последовательности;

4)   просматривать и изменять значения переменных  и  масси-
     вов, смотреть стек вызовов функций, изменять номер опе-
     ратора, с которого начнется выполнение программы  после
     дальнейшего запуска;

5)   выполнять программу  по  шагам,  т.е.  останавливая  ее
     перед выполнением каждого оператора;

6)   продолжать выполнение программы, задав точку или  усло-
     вие останова;

7)   отлаживать экранную программу с другого терминала.

   Вся отладка идет в терминах исходного языка, т.е.  опера-
торы  показываются в том виде, в каком они написаны в тексте
программы. Место останова  в  программе  задается  указанием
строки  текста  программы (а не адреса машинной инструкции).
За один шаг выполняется целиком  оператор  исходного  языка.
Показ и модификация переменных производится в формате, зави-
сящем от их типа. При просмотре переменных  разрешается  ис-
пользовать операцию индексации [...] и операции языка Си "*"
и "&" . Для отладки  Си-программ  предусмотрена  возможность
просматривать содержимое памяти и регистров.

   Программа "cdeb" позволяет отлаживать  программы,  состо-
ящие  из  нескольких  модулей (файлов), написанных на разных
языках.















4




              3. ИСПОЛЬЗОВАНИЕ ОТЛАДЧИКА CDEB



   3.1. Принцип работы отладчика


   Для отладки программ с помощью cdeb, они должны быть спе-
циальным    образом   оттранслированы   Си-   или   Фортран-
комплятором. При этом компиляторы вставляют  в  отлаживаемую
программу  команды,  необходимые  для  работы cdeb. Отладчик
также использует таблицу имен  переменных,  подготавливаемую
ассемблером  и  редактором связей. Отладчик запускает подго-
товленную для него программу и управляет  ее  выполнением  с
помощью  системного вызова ptrace. Если программа состоит из
нескольких файлов, то часть из них может быть скомпилирована
в обычном режиме - программы из этих файлов будут выполнять-
ся без контроля отладчика.


   3.2. Запуск отладчика


   Все отлаживаемые модули (файлы) программы  предварительно
требуется  странслировать  с  ключом "-d". При этом значащая
часть имен этих файлов (до расширения  ".c"   или  ".f")  не
должна быть длиннее 8 символов. Файлы с текстом отлаживаемых
программ должны находиться в текущем справочнике (их исполь-
зует  отладчик  для  показа  текста). Эти файлы должны соот-
ветствовать отлаживаемой программе, то есть в них не  должно
быть  изменений,  сделанных после трансляции и загрузки этой
программы.

П_Р_И_М_Е_Ч_А_Н_И_Е.
     Отладчик "cdeb" не умеет работать с подпрограммами  или
     функциями,  текст которых подставляется при помощи опе-
     раторов  "#include"  или  "include"   языков   "Си"   и
     Фортран-77.

   При необходимости  программы  скомпилированные  с  ключом
"-d"  можно запускать и без отладчика, но работать они будут
в 2-3 раза медленнее, чем в обычном режиме.

   Формат вызова отладчика cdeb:

        cdeb Имя_программы {параметры}

Отладчик запускает отлаживаемую программу, передавая ей ука-
занные  параметры  командной  строки, останавливает ее перед
выполнением  первого оператора  программы,  показывает  этот
оператор и ждет ввода команды.










                                                           5

   3.3. Общее описание процесса отладки


   Отлаживаемая программа может находиться в двух  состояни-
ях.

1)   Ее выполнение приостановлено. При этом работает  отлад-
     чик  - он воспринимает команды пользователя и позволяет
     просматривать  и  изменять  переменные,   просматривать
     текст  программы,  запускать программу на выполнение. В
     этом состоянии отладчик помнит, перед выполнением какой
     строки была остановлена программа (на экране эта строка
     указывается маркером ">"). При  запуске  программы  она
     начинает  выполняться с того оператора, на котором была
     остановлена.

2)   Программа запущена (соответствующей  командой  отладчи-
     ка). При этом программа выполняется как в обычном режи-
     ме до тех пор, пока не произойдет одно из следующих со-
     бытий:

   - в программе произошло аварийное событие (например,  де-
     ление на 0);

   - выполнение программы дошло  до  указанной  при  запуске
     строки;

   - произошел вызов указанной при запуске функции (подпрог-
     раммы);

   - изменилось значение указанной переменной (массива);

   - значение указанной переменной стало равно заданной  ве-
     личине;

   - пользователь  прервал  программу  и   вызвал  отладчик,
     нажав <СУ>\.

   При этом программа останавливается и указывается  причина
останова  (при аварийных событиях в программе), номер строки
и текст оператора, перед выполнением которого была  останов-
лена программа. Отладчик ждет очередной команды.






















6




                    4. КОМАНДЫ ОТЛАДЧИКА



   4.1. Формат команд


   Когда отладчик ждет поступления очередной команды, он вы-
дает  приглашение  ":".  Перед приглашением могут находиться
некоторые символы (см.ниже), показывающие режим отладчика.

   Команды набираются после получения приглашения (предвари-
тельный набор недопустим) без пробелов. В одной строке можно
набирать несколько команд, разделяя их запятыми. Если коман-
да  начинается  с одного из символов "\" "|" "~" "^" "?" ">"
"<", то запятая, отделяющая ее от предыдущей команды, необя-
зательна. Лишние пробелы в командах не допускаются.

   В начале строки команд можно поставить коэффициент повто-
рения  в  виде: Число* , при этом вся строка будет выполнена
(Число) раз.

   Если перед одной или несколькими командами поставить "(",
то  отладчик  запомнит  эту группу команд, и в дальнейшем ее
можно будет выполнить, набрав ")". Запоминание каждой  новой
группы отменяет предыдущую.

   В некоторых командах могут задаваться целые  числа.  Если
вводимые  целые  начинаются  с  0x  или 0X, то они считаются
шестнадцатиричными. Если целые начинаются с 0, то они счита-
ются  восьмеричными. Во всех остальных случаях они считаются
десятичными. Вещественные числа должны обязательно содержать
точку (т.е. 1е5 недопустимо).

   Команды делятся на следующие группы:

1)   команды просмотра текста программы;

2)   команды запуска программы;

3)   команды просмотра и изменения переменных;

4)   вспомогательные команды.

   Каждая группа команд имеет свой формат.

   Выполнение любой команды отладчика можно прервать,  нажав
<СУ>\ или <СУ>C.

   Ниже под "текущей строкой" будем понимать строку, на  ко-
торой  произошел последний останов программы. Эта строка ис-
пользуется некоторыми командами отладчика.









                                                           7

   4.2. Команды получения информации и выхода


<СУ>D
     конец отладки и выход из отладчика;

?    показ краткого списка команд отладчика.


   4.3. Просмотр текста программы


   Все команды просмотра текста вводятся в одном  из  следу-
ющих форматов:

    Номер_строки{+{Число}}
    Номер_строки{-{Число}}
    +{Число}
    -{Число}


   В качестве номера строки можно использовать  либо  число,
либо  символ  ".",  который  обозначает текущую строку. Если
указан только номер строки, то отладчик показывает несколько
строк  около  запрошенной.  Показывается номер строки и сама
строка. Текущая строка (та, перед выполнением которой  оста-
новлена программа) помечена символом ">". Перед 1-ой строкой
файла ставится маркер: <<< имя_файла  >>>,  после  последней
строки файла ставится маркер: <<< end of имя_файла >>>.

   После номера строки можно добавить +Число или -Число, что
означает:  "показать  еще (Число) следующих/предыдущих строк
после/перед указанной". Если номер строки не был указан,  то
отсчет  строк ведется от последней показанной. Наконец, если
использовать просто знаки + и - (без числа), то это  эквива-
лентно +10 и -10.

Примеры:

.       Показывает группу строк около текущей.

45      Показывает группу строк около строки номер 45.

4+20    Показывает строки с 4-ой по 24-ую.

40-10   Показывает строки с 30-ой по 40-ю.

.+20    Показывает текущую строку и следующие 20 строк.

+15     Показывает следующие 15 строк после последней  пока-
        занной.

-30     Показывает предыдущие 30 строк.

+       Показывает следующие 10 строк вниз.

-       Показывает предыдущие 10 строк

   Следует помнить, что показывается содержимое файлов с ис-
ходными  текстами  программ в момент отладки; если эти файлы
изменялись после трансляции отлаживаемой  программы,  строки
могут не соответствовать отлаживаемой программе. Если "теку-


8

щая" строка на самом деле появилась в результате подстановки
текста оператором "#include" ("include" в Фортране), она по-
казывается неверно.


   4.4. Просмотр и изменениe переменных


   Команды этой группы не вызывают выполнения программы и не
меняют  "текущую" строку программы. Все они требуют указания
имени переменной и (при необходимости) спецификаций  (длины,
размерности,  и  т.д.) используемой переменной. При работе с
программами на Фортране отладчик знает тип и размерность пе-
ременных и в случае, если спецификации не указаны, сам опре-
деляет формат, размерность и длину переменной.

   В командах этой группы для ссылки на переменную или ячей-
ку  памяти используется "описание_переменной", которое имеет
вид:

 Имя_переменной{Модификатор}

Вместо имени переменной можно указать пробел, в этом  случае
подразумевается переменная, указанная в предыдущем запросе:

 Пробел Модификатор


   Имя переменной с модификаторами назовем  описанием  пере-
менной. Вместо имени переменной можно явно указать адрес ис-
пользуемой ячейки памяти - $Число или номер регистра - %Чис-
ло .

   После имени переменной можно дописать следующие модифика-
торы  (в  любом  количестве и в любом порядке, применяются в
основном для языка Си):

:    переменная занимает 1 байт ;

:Число
     переменная занимает (Число) байт;

*    взять об'ект, на который указывает "Имя";

&    взять адрес переменной (для  регистровых  переменных  -
     номер регистра);

.Число
     сместиться на (Число) байт от "Имени";

+Число
     то же, что и .Число ;

-Число
     сместиться на (Число) байт назад от "Имени";

[Число]
     взять элемент (Число) из массива "Имя" (для программ на
     Си  счет идет от 0, а в Фортране индексы предполагаются
     начинаюшимися с 1);




                                                           9

[Число:Число]
     взять указанную двумя числами вырезку  из  массива  (то
     есть  все  элементы из указанного числами диапазона ин-
     дексов).

[Число-Число]
     то же самое;

   Примеры (в основном они относятся к языку Си):

 Имя с          Подразумеваемая переменная
 модификаторами
 a              "int a" или "unsigned a";
 b:             "char b";
 c:4            "long c"  или "float c";
 k[5]           6-е слово массива "int k"
 d:[0:25]       первые 26 элементов массива
                "char d[]";
 e.12           поле структуры "е", смещен-
                ное от начала на 12 байтов;
 i1&            адрес переменной "int i1"
                (или номер регистра);
 ptr*:          байт, на который указывает
                "char *ptr";
 $0200          слово по адресу 0200;
 %6             содержимое регистра 6 (то
                есть "sp");



   4.4.1. Просмотр переменных


   Команды просмотра переменных имеют вид:

 Описание_переменной{Формат_выдачи}


   Переменные выдаются в соответствии с указанным  форматом.
При  отладке  программ  на Си, если формат выдачи не указан,
формат определяется спецификацией длины:  выдается  "символ"
для  длины  1,  десятичное целое со знаком для длин 2 и 4, в
виде вещественного числа для длины 8, в виде дампа (то  есть
одновременно  восьмеричное  и  текстовое  представление) для
других длин переменных. Для Фортрана формат по умолчанию оп-
ределяется  типом  переменных.  Формат  выдачи можно указать
либо как спецификацию формата для "printf",  либо  одним  из
следующих символов, определяющих формат в "cdeb":

$  - выдать переменную одновременно в восьмеричном и тексто-
     вом представлении ("универсальный" формат);

'  - выдать переменную в виде цепочки символов заданной дли-
     ны;

"  - выдать переменную как строку  символов,  независимо  от
     заданной длины(до символа '\0').

   Отладчик по формату сам определяет длину переменной,  по-
этому, если указан формат, указание длины обычно не нужно.




10

   Примеры (положим, что i - целая переменная,  d  -  массив
символов):

 Запрос       Что покажет отладчик
 i              10
 i%o            12
 i'             '\n\0'
 d[4]'          'a'
 d:[4]%d        141



   4.4.2. Изменение переменных


   Отладчик  позволяет  изменять  значение  переменных.  Для
того, чтобы изменить переменную, нужно набрать:

 Описание_переменной = Новое_значение

В качестве значения можно использовать числа, строки  симво-
лов  (например,  'a',  'ab\n15'),  строки в двойных кавычках
(дополняются в конце символом '\0'), а  также  для  Фортрана
логические  переменные  в  виде букв "t" и "f" и комплексные
числа в виде: (1.2 .45e-7). Если набрать несколько значений,
разделяя  их одним пробелом, то они будут присвоены последо-
вательным элементам массива.

Примеры:

 Команда       Действия отладчика
 i1=3          Число 3 записано в "i1"
 c1:='a'       символ 'а' записали в байт
               "c1";
 c1:='abc'     символы 'a', 'b', 'c' запи-
               сали в 3 последовательных
               байта, начиная с "c1";
 c1:="abc"     то же, но в четвертый байт
               записали символ '\0';
 c1:='a' 'b' 'c' 0
               то же самое
 d:[0:2]=1 2 3 записали три элемента массива
               символов "d";
 f:4=1.2e-45   записали вещественное число;
 l=t t f t     для логического массива;
 c=(1.3 -5.6)  комплексное (через пробел).



   4.5. Команды управления выполнением программы


   При выполнении программы она будет остановлена по аварий-
ному  событию или по нажатию клавиши "quit" (<СУ>\), незави-
симо от того, какой командой отладчика программа была  запу-
щена.  При аварийных событиях программа будет остановлена до
выполнения "аварийного" оператора (то  есть  на  самом  деле
программа  выполнит  этот  оператор,  но  отладчик обнаружит
ошибку и восстановит регистры программы такими,  какими  они
были до выполнения этого оператора).




                                                          11

   Программа начинает выполняться по следующим командам  от-
ладчика:

<ВК> , т.е. пустая команда
     Выполнение одного шага программы. Для Си шагом считает-
     ся вычисление одного выражения. Так, оператор:

      if(a+b>c) d = e -k;

будет вычислен за два шага, оператор:

      for(i=0; i<10;++i, ++k) a[k] = i;

выполняется по 3 шага на каждый цикл.  Для  Фортрана  обычно
один шаг соответствует одному оператору программы, но опера-
тор:

        if(a.eq.b) k=p

будет выполнен за два шага (если выполняется условие).  Опе-
раторы ввода/вывода в Фортране также выполняются за несколь-
ко шагов (как правило, по шагу на каждый параметр  оператора
и  на  каждый  элемент  из  списка ввода/вывода). Командой "
(см.ниже) можно установить режим работы отладчика, при кото-
ром  он  останавливается  на  каждой  строке не более одного
раза.  Если  в  программе  встречается  вызов  функции   или
подпрограммы, то действия зависят от режима отладчика. В ис-
ходном режиме отладчик не будет отлаживать функции, то  есть
не  будет  показывать  их  выполнение. Командой ' (см. ниже)
этот режим можно изменить.

   Если набирается несколько команд через запятую, то вместо
ВК надо писать пустую команду, т.е.:

,,,, означает 5 пустых команд, т.е. выполнить 5 шагов.

10*,i
     Выполнить 10 шагов, показывая после каждого  переменную
     i.

   Отладчик имеет 2 флага режима - режим при котором он вхо-
дит в подпрограммы и режим, при котором он не останавливает-
ся дважды на одной строке. Эти режимы изменяются командами '
и  ".  Текущий  режим  показывается наличием соответствующих
символов перед приглашением.

'    Смена режима. После первой подачи этой команды отладчик
     начинает при пошаговой работе показывать выполнение вы-
     зываемых функций, после второго - перестает. Режим  по-
     казывается  символом  ' перед приглашением. Эта команда
     не запускает программу.

"    Смена режима ". После первой подачи этой команды отлад-
     чик  перестает  дважды  останавливаться на одной строке
     для операторов типа if( a>=b )  c=d;   после  второй  -
     снова начинает т.д. Режим показывается символом " перед
     приглашением.

   Программу можно выполнять не только по шагам, но и запус-
титьее, задав условие останова. Все такие команды начинаются
с символа ^ (или  ~),  за  которым  идет  условие  останова.
Существуют следующие команды:


12


^    Безусловный запуск программы. При необходимости,  после
     этого,  программа может быть снова остановлена и вызван
     отладчик  нажатием  клавиши  <СУ>\.  Останов  программы
     может произойти и по аварийному событию в программе.

^Номер_строки
     Запуск программы с остановом на указанной строке  теку-
     щего  файла. По этой команде программа будет запущена и
     будет выполняться до тех пор, пока не дойдет до  выпол-
     нения  оператора  в указанной строке. Перед выполнением
     этого оператора она будет остановлена и отладчик запро-
     сит  очередную  команду. В качестве Номера_строки можно
     указать также символ  ".",  означающий  текущую  строку
     (программа остановится, когда она еще раз дойдет до вы-
     полнения этой строки). При выполнении  программа  может
     быть  остановлена также по аварийному событию или нажа-
     тию клавиши <СУ>\. Если программа дошла  до  выполнения
     указанной  строки, но на более высоком уровне рекурсии,
     то останов произойдет  только,  если  установлен  режим
     входа в подпрограммы: '.

^>   или >
     "Вход" в функцию. Если в операторе, который  будет  вы-
     полняться   на   очередном   шаге  есть  вызов  функции
     (подпрограммы), то отладчик "войдет" в нее и остановит-
     ся перед ее первой строкой, независимо от установленно-
     го режима.

^>Имя_функции   или >Имя_функции
     "Вход" в указанную  функцию  (подпрограмму).  Программа
     запускается и будет снова остановлена, когда произойдет
     вызов указанной функции - перед ее первым оператором.

^< или <
     "Выход" из функции (подпрограммы). Программа запускает-
     ся и будет остановлена по завершении текущей функции.

^Описание_переменной
     Программа запустится, и будет остановлена, когда значе-
     ние  данной  переменной  изменится. Описание_переменной
     соответствует описанию в командах просмотра и изменения
     переменных. Такая команда может ссылаться на переменную
     любого типа или на массив; в последнем  случае  останов
     произойдет по изменению любого элемента массива.

^Описание_переменной=значение
     Программа запустится, и будет остановлена, когда значе-
     ние  данной переменной станет равным заданному. Контро-
     лировать это в действующей версии можно только для  пе-
     ременных  типа  'int'  и  'char'  (Cи)  или integer*2 и
     character*1 (Фортран).

   В последних двух командах  останов  программы  произойдет
после  оператора,  изменившего значение контролируемой пере-
менной.








                                                          13

   4.6. Вспомогательные команды


   Эти команды начинаются с одного из символов \  или  |  за
которым  следует  буква. Букву можно набирать как маленькую,
так и большую. За ней могут идти параметры команды. Мнемони-
ка  этих команды взята по первым буквам указанных английских
слов:

|w   Команда "where" - показ текущей строки.

|dТерминал
     Команда "display" - перенос ввода и вывода отладчика на
     другой терминал - на терминал /dev/Терминал. Применяет-
     ся для отладки программ с экранным диалогом. Перед  по-
     дачей этой команды необходимо "поздороваться" на другом
     терминале под своим  же  именем  и  заблокировать  ввод
     shell'а, например, подав команду "sleep 10000".

|s   Команда "stack" - показ текущего стека вызовов функций,
     то есть последовательности вызовов функций друг из дру-
     га и их параметры в восьмеричном виде. Например,  выда-
     ча:

      prt(060224)
      copp(02)
      main(02,0177760)

     означает, что выполняется функция "prt",  которая  была
     вызвана из функции "copp" с параметром "060224" (скорее
     всего, это  адрес),  функция  "copp"  была  вызвана  из
     функции "main(ac,av)" с параметром, равным 2, а функция
     "main" была вызвана операционной системой (при  запуске
     процесса)  с  параметрами  "ac=2, av=0177760 (это адрес
     массива ссылок на аргументы команды). В  Фортране-77  к
     именам функций добавляется символ "_".

|gЧисло
     Команда "goto" - переход на строку (Число).  Эффект  от
     этой  команды такой же, как если бы в программе был вы-
     полнен оператор 'goto' на указанную строку, т.е.  изме-
     нится  номер  текущей  строки.  При запуске программы в
     дальнейшем ее выполнение будет продолжено уже  с  новой
     строки.  Строка (Число) обязательно должна находиться в
     текущей функции.

|fИмя_функции
     Команда "function" - переход к просмотру текста и пере-
     менных  указанной функции. Если Имя_функции не указано,
     то переходит к текущей функции.














14

                                                 ПРИЛОЖЕНИЕ 


              1. Список команд отладчика CDEB


 ==== CDEB ==== СПИСОК КОМАНД ==== CDEB ====
 <СУ>D   конец отладки
 <СУ>\   вызвать отладчик
 5*...   повторить след. команды 5 раз
 (...    запомнить след. команды
 )       выполнить запомненные команды

 45      показать строки около 45-ой
 .         -"-     -"-  -"- текущец
 45+20     -"-     -"-   с 45 по 65-ую
 .-20      -"- 20 строк перед текущей
 +20 и -20 -"-  20 след./предыд. строк
 +   и  -  -"-  10 след./предыд. строк

 <ВК>    выполнить 1 шаг программы
 ^       продолжить без отладки
 ^12     останов на строке # 12
 ^.        -"-   на тек.строке (1 цикл)
 ^x        -"-   по изменению слова x
 ^x[0:9]   -"-   по    -"-  массива x
 ^x=3      -"-   по значению  x=3
 >имя      -"-   по входу в функцию
 >         -"-   -"- в вызываемую функ.
 <         -"-   по выходу из функции
 '     смена режима входа в функц.
 "      -"-  -"- останова в 1 стр.

 |w    показ текущей строки
 |dh   переключение отладки на /ttyh
 |g14  переход на строку # 14
 |s    показ стека вызовов функций

 x     показать 'int' переменную
 x%o     -"-     -"- в 8-ричном виде
 x:4     -"-    'long'
 x' и x" -"- как символ и стр. до 0
 x$      -"-    x в виде дампа
 x:[6]   -"-    6-ой элемент 'char'
 x[0:9]  -"-    10 слов массива x
 x.6 и x-6 -"- слово со смещ. 6 и -6
 x*      -"-    слово *x
 x[6]&   -"-    адрес 7-ого слова x
 x=4     запись слова
 x:='a'   -"-   байта
 x='abc'  -"-   строки
 x="abc"  -"-    -"-  с'' на конце
 x=0 1 2  -"-   массива слов











                                                          15



                         СОДЕРЖАНИЕ



1.  Введение...........................................    3

2.  ОСНОВНЫЕ ВОЗМОЖНОСТИ ОТЛАДЧИКА.....................    4

3.  ИСПОЛЬЗОВАНИЕ ОТЛАДЧИКА CDEB.......................    5
    3.1. Принцип работы отладчика......................    5
    3.2. Запуск отладчика..............................    5
    3.3. Общее описание процесса отладки...............    6

4.  КОМАНДЫ ОТЛАДЧИКА..................................    7
    4.1. Формат команд.................................    7
    4.2. Команды получения информации и выхода.........    8
    4.3. Просмотр текста программы.....................    8
    4.4. Просмотр и изменениe переменных...............    9
    4.4.1. Просмотр переменных.........................   10
    4.4.2. Изменение переменных........................   11
    4.5. Команды управления выполнением программы......   11
    4.6. Вспомогательные команды.......................   14

ПРИЛОЖЕНИЕ 1.  Список команд отладчика CDEB............   15






































16

