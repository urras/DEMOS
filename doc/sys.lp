
            дддд   ееееее   м     м    oooo     сссс
           д   д   е        мм   мм   o    o   с    с
          д    д   е        м м м м   o    o   с    с
          д    д   еееее    м  м  м   o    o   с
          д    д   е        м     м   o    o   с
          д    д   е        м     м   o    o   с    с
         дддддддд  ееееее   м     м    oooo     сссс



          демосдемосдемосдемосдемосдемосдемосдемосде
          емосдемосдемосдемосдемосдемосдемосдемосдем
          мо                                      мо
          ос                                      ос
          сд        ОПЕРАЦИОННАЯ СИСТЕМА          сд
          де                                      де
          ем               ДЕМОС                  ем
          мо                                      мо
          ос                                      ос
          сд                                      сд
          де             Версия 1.0               де
          ем                                      ем
          мо                                      мо
          сдемосдемосдемосдемосдемосдемосдемосдемосд
          демосдемосдемосдемосдемосдемосдемосдемосде







            РУКОВОДСТВО СИСТЕМНОГО ПРОГРАММИСТА






               Паремский Михаил Владимирович
                Аншуков Сергей Александрович
                Бардин Валерий Владимирович
                  Руднев Алексей Петрович











                       МОСКВА - 1985








                                                           1


                              2






                         АННОТАЦИЯ


   Описывается структура oперационной системы ДЕМОС,  проце-
дура постановки системы и правила ее сопровождения.






















































                              3






                          ВВЕДЕНИЕ


   Данный документ является руководством по постановке  сис-
темы  ДЕМОС  и  ее сопровождению, а также содержит некоторые
сведения о составе системы и ее внутренней структуре. Раздел
"Настройка  системы  Демос"  может использоваться в качестве
самостоятельного руководства по начальной постановке системы
и  получении  документации с дистрибутивной ленты. Подробное
описание системы имеется в  документе  "Описание  применения
операционной  системы Демос". Для генерации и настройки сис-
темы на конкретную конфигурацию ЭВМ  необходимо  знание  ко-
мандного  языка "shell", редактора такстов ("red" или "ed"),
а также основных команд системы (см. описание команд  rm(1),
mv(1),   cp(1),   ls(1),  cat(1),  stty(1),  mt(8),  tar(1),
date(1),  mkfs(8),  automou(8),  mount(8),  fsck(8),  df(1),
boot(8) в руководстве программиста).










































                              4






                 1. ОБЩИЕ СВЕДЕНИЯ О СИСТЕМЕ


    Операционная система ДЕМОС состоит из ядра,  работающего
 в привилегированном режиме, и программных компонент окруже-
 ния, обеспечивающих среду пользователя. Основные  концепции
 ОС ДЕМОС описаны в документе "Описание применения".

                  1.1. Размещение ОС ДЕМОС


    Операционная система ДЕМОС размещается на внешних  запо-
 минающих устройствах прямого доступа. Текущая версия систе-
 мы в качестве таких устройств может использовать  магнитные
 диски  типа  СМ 5400 (ИЗОТ 1370), СМ 5408 или ЕС 5061. Ядро
 системы является резидентным и считывается из файловой сис-
 темы в процессе начальной загрузки ОС в память ЭВМ.

    Пространство на дисках делится на следующие части:

  - корневая файловая система;

  - область подкачки;

  - монтируемые файловые системы.

    Корневая файловая система содержит  основные  программы,
 необходимые  для  нормального  функционирования ОС. Устрой-
 ство, на котором расположена корневая файловая система, за-
 дается  при настройке ОС и может быть изменено при ее вызо-
 ве.

    В нулевом блоке тома, с которого производится  начальная
 загрузка  системы, записывается программа начальной загруз-
 ки, предназначенная для переписи  в  память  загрузчика  ОС
 ДЕМОС  или программ, работающих в отсутствие ОС (тесты обо-
 рудования, программа форматирования дисков и т.д.).

    Область подкачки служит для поддержки виртуальной памяти
 машины.  Область  подкачки  должна быть достаточно большой,
 чтобы не возникало ее переполнения, и может размещаться  на
 любом  диске. Расположение области подкачки указывается при
 настройке системы и также может быть  изменено  при  вызове
 системы.

    Монтируемые файловые системы  -  это  диски  (или  части
 дисков), на которых находятся файловые системы ОС или поль-
 зователей. Монтируемые файловые системы подключаются  после
 вызова  ОС  либо  по  команде оператора, либо автоматически
 (если соответствующие диски установлены в момент запуска ОС
 на  устройства,  которые  опрашиваются командой опознания и
 монтирования дисков).







                              5






                     1.2. Вызов ОС ДЕМОС


    Вызов операционой системы подробно описан в  руководстве
 программиста  ОС  ДЕМОС  и  в оперативной документации (см.
 "boot(8)"):

 1)   С помощью аппаратного загрузчика с внешнего  запомина-
      юшего устройства, считывается программа начальной заг-
      рузки. Правила  использования  аппаратного  загрузчика
      можно  узнать в документации по ЭВМ. Для СМ-4 загрузка
      с диска СМ-5400 производится следующим образом:

  - на клавишном регистре процессора набирается код 173110;

  - последовательно нажимаются клавиши: "останов", "ввод ад-
    реса", "пуск".

    На большинстве остальных ЭВМ (СМ-1420, СМ-1600 и другие)
 вначале вызывается встроенный загрузчик, а затем с консоль-
 ного терминала вводится имя устройства, например:

 DK2 - загрузка с СМ-5400, устройство номер 2;

 DM  - загрузка с СМ-5408, устройство 0.

 2)   В ответ программа начальной загрузки  выдаст  на  кон-
      сольный терминал приглашение:

              @

      Поскольку в данном случае необходимо вызвать программу
      загрузки  ОС ДЕМОС (правила вызова программы начальной
      росписи памяти, тестов и  программы  "rollin"  описаны
      ниже), на консольном терминале набирается имя файла, в
      котором хранится эта программа:

              boot

      Конец любого  сообщения  должен  завершаться  нажатием
      клавишы "возврат каретки".

 3)   Если все набрано верно, на терминале появится  сообще-
      ние программы запуска ОС ДЕМОС:

              Boot (v. 1.0)
              :

      Теперь следует ввести: тип дискового устройства, номер
      накопителя, положение файловой системы, содержащей об-
      раз ОС ДЕМОС, имя вызываемого варианта ОС и, если  не-
      обходимо, параметры вызова. Для этого с терминала вво-
      дится следующая строка:






                              6






      DD(N,SHIFT)FILE [PAR1 ...]

      Вводимые поля имеют следующие значения:

      DD
         тип диска (rk - ИЗОТ 1370, СМ 5400; rp -  ЕС  5061;
         hk - СМ 5408);

      N
         номер накопителя на магнитных дисках;

      SHIFT
         номер начального блока логического диска (если дис-
         ковое пространство разделено на несколько частей);

      FILE
         имя файла с ядром операционной системы;

      PAR1 ...
         параметры, изменяющие  режим  работы  ОС;  возможно
         указание следующих параметров:

         r=DDN
            устройство с корневой  файловой  системой,  если
            оно отличается от заданного при генерации систе-
            мы, например: "r=rk2"; если область подкачки при
            генерации  была  размещена на одном устройстве с
            корневой системой, то она также перемещается  на
            указанное устройство;

         s=DDN
            устройство подкачки;

         slo=NUM
            начало области подкачки на устройстве  (указыва-
            ется номер блока);

         slen=LEN
            длина области подкачки (число блоков);

         su
            вызов системы в монопольном режиме (система сра-
            зу переходит в однопользовательский режим работы
            с консольного терминала, не  выполняя  стартовых
            файлов).

    Пусть, например, корневая файловая система находится  на
 дисковом  накопителе  с  номером  0,  размещается  с начала
 диска, используются устройства типа ИЗОТ 1370 и файл с  об-
 разом системы называется "demos".  Тогда для вызова ОС тре-
 буются следующие действия:








                              7






  Вызов программы начальной загрузки,
      с помощью аппаратного загрузчика
 система-> @
 оператор> boot
 система-> Boot ( v. 1.0)
           :
 оператор> rk(0,0)demos


    В результате этих действий начнется загрузка ОС в опера-
 тивную  память.  Затем  на консольный терминал выдается ряд
 сообщений информационного характера, и, в частности,  об'ем
 оперативной  памяти  и  об'ем оперативной памяти, доступной
 пользователю, в килословах. Например:

 MEM=64Kw AVMEM=33Kw



                 1.3. Режимы работы ОС ДЕМОС


    После загрузки ядро ОС  ДЕМОС  инициализирует  системные
 таблицы и вызывает программу "/etc/init" - этот процесс уп-
 равляет режимами работы системы.

    Программа "init" выполняет следующую работу:

 1)   Вход в однопользовательский режим работы с  консольным
      терминалом  и  выполнение командного файла "/.profile"
      (если не задан параметр "su"). В этом  файле  записана
      процедуры проверки корневой файловой системы и запроса
      имени пользователя для работы  в  однопользовательском
      режиме (LOGIN:). Набор выполняемых может быть расширен
      при настройке системы. (*1)

 2)   Вход в однопользовательский режим работы ОС происходит
      в  случае, если при вызове системы был указан параметр
      "su", либо  если  выполнение  файла  "/.profile"  было
      прервано,  кончилось ошибкой или на подсказку "LOGIN:"
      было введено имя пользователя. Этот режим предназначен
      для  выполнения  системных  работ,  которые невозможно
      проводить в многопользовательском режиме.

 3)   После ввода с консольного  терминала  признака  "конец
      файла"  (<УПР>D) выполняется командный файл "/etc/rc",
      который содержит:

__________________________

(*1) В следующих версиях системы  переход  в  многопользова-
     тельский режим работы будет осуществляться сразу.







                              8






       - запрос даты и времени;

       - опознание, проверку и  монтирование  дополнительных
         файловых систем;

       - очистку рабочих справочников и файлов системы.

 4)   Если выполнение командного файла  "/etc/rc"  кончилось
      успешно,  система  переходит  в  многопользовательский
      режим. При этом "init" просматривает файл "/etc/ttys",
      в  котором содержится список обслуживаемых терминалов,
      и для каждого обслуживаемого терминала запускает прог-
      рамму "getty". Каждый "getty" инициализирует свой тер-
      минал и запрашивает идентификатор пользователя,  выда-
      вая текущую версию ОС и подсказку "login:". После это-
      го пользователи могут начать работу  в  системе.   При
      окончании  работы  пользователя "getty"  автоматически
      перезапускается.

 5)   Для изменения режима работы "init" применяется команда
      "kill":

      kill -1  1
         подключить новые терминалы, вновь занесенные в файл
         "/etc/ttys";

      kill -15 1
         прекратить все процессы пользователей и  перейти  в
         однопользовательский режим работы;

      kill -18 1
         не начинать новые сеансы работы пользователей.



























                              9






            2. СОСТАВ ОПЕРАЦИОННОЙ СИСТЕМЫ ДЕМОС


    В состав системы входят следующие компоненты:

  - ядро ОС ДЕМОС (возможно, несколько вариантов ядра);

  - системные программы (init, getty, login, и т.д.);

  - стандартные интерпретаторы команд (sh, csh);

  - стандарный набор команд;

  - программы для сопровождения системы;

  - прикладные программы и библиотеки;

  - файлы с документацией и справочные системы.

    В систему также записаны некоторые тесты аппаратуры  ЭВМ
 и  программы  для  работы  без ОС. Все указанные компоненты
 располагаются в корневой и дополнительных  файловых  систе-
 мах.

                   2.1. Иерархия файлов ОС


    В стандартном комплекте ОС ДЕМОС компоненты распределены
 по  нескольким  справочникам. Часть справочников может быть
 размещена на дополнительных файловых системах, а  некоторые
 справочники  должны обязательно размещаться в корневой сис-
 теме. При постановке системы и в процессе ее  существования
 могут  добавляться  новые  справочники и файлы, но иерархия
 основных справочников остается неизменной.

    Иерархия основных справочников системы  представлена  на
 рисунке  1. Прямоугольники, ограниченные сплошными линиями,
 обозначают справочники; файлам соответствуют прямоугольники
 из  точек. Справочники и файлы, необходимые для нормального
 функционирования системы, отмечены символом "!". В  некото-
 рых  справочниках имеется файл "readme", в котором находит-
 ся краткое описание справочника.


    Для уменьшения об'ема корневой файловой системы при  ра-
 боте  на  малых  дисках  справочники  "/usr",  "/mnt/sys" и
 "/mnt/man" размещаются на монтируемых файловых системах.












                             10






       Справочники ОС ДЕМОС
  _____
  ! / !  Корневой справочник
  --I--  .........
    I----! boot  !.. Загрузчик ОС
    I    ... demos !   Ядро ОС
    I      .........
    I ________
    I-! mdec !__Тесты и служебные программы
    I --! etc  !__Программы сопровождения ОС
    I   --! bin  !__Основные команды
    I     --! tmp  !__Рабочие файлы
    I       --! lib  !  Библиотеки
    I         --------
    I       _______
    I-------I mnt I Монтируемые справочники
    I       -------
    I          I  _______
    I          I--I sys I__ Тексты ядра
    I        . . .--I man I   Оперативная
    I   _______     -------   документация
    I---! usr !  Дополнительные
    I   ---I---  файлы:
    I      I ________
    I      I-!  bin !__ Команды
    I      I --! lib  !  Библиотеки
    I      I   --I  games  I__ Игры
    I      I     --! include !  Файлы
    I      I       -----------  "вставок"
    I      I __________
    I      I-I  adm   I__ Статистика
    I      I --!  tmp   !  Рабочие файлы
    I      I   --!  spool ! Почта и т.п.
    I      I     __________
  . . .  . . .    Остальные справочники

                   Рис. 1.

              2.2. Тесты и служебные программы


    В справочнике "mdec" записаны программы  для  выполнения
 сервисных работ в отсутствие ОС ДЕМОС:

    clrmem - роспись памяти ЭВМ;

    fox    - тест процессора СМ-4;

    mm124k - тест оперативной памяти процессора СМ-4;

    rollin - программа копирования и форматирования дисков и
             лент.







                             11






    Вызов этих компонент производится аналогично запуску  ОС
 ДЕМОС и включает следующию последовательность действий:

  производится аппаратная загрузка с диска
 система-> @
 оператор>  mdec/имя_компоненты

 В качестве имени  компоненты  используется  имя  одного  из
 файлов справочника "mdec". Например, программа "rollin" вы-
 зывается следующим образом:

         mdec/rollin


    Тест памяти mm124k запускается  при  установленных  в  0
 клавишах  консольного  регистра.  Время  работы  зависит от
 об'ема памяти. Признаком успешного окончания первого прохо-
 да теста является сообщение:

 END OF PASS 1


    Тест команд процессора запускается при установленных в 1
 клавишах  7, 9, 11 консольного регистра. Время работы зави-
 сит от об'ема памяти.


    Состав тестов может быть расширен.

    Следует учитывать, что при работе с дисками СМ-5400  на-
 чальный загрузчик читает файлы с того же устройства,  с ко-
 торого он был вызван. На дисках остальных типов  он  всегда
 работает с устройством 0.

      2.3. Справочник /etc - программы обслуживания ОС


    В справочнике "/etc" собраны файлы, необходимые для нор-
 мального  функционирования  ОС  ДЕМОС и ее сопровождения. К
 ним относятся:

  - системные программы: "init", "getty", "update",  "cron",
    "reboot";

  - файл "passwd" с информацией  о  всех  зарегистрированных
    пользователях системы;

  - список групп пользователей - файл "group";

  - список инициализируемых терминалов и информация о  типах
    терминалов (файлы: "ttys" и "ttytype" соответственно);








                             12






  - список терминалов с которых разрешен вход в привилегиро-
    ванный  режим  (т.е. работа "супер-пользователя") - файл
    "securetty";

  - текст сообщения, выдаваемого всем пользователям при вхо-
    де в систему - файл "motd";

  - командный файл "rc", выполняющийся при переходе в много-
    пользовательский режим;

  - программы для восстановления  и  сопровождения  файловых
    систем: "fsck", "dump", "restor", "dumpdir" и др.;

  - база  данных  с  характеристиками  терминалов   -   файл
    "termcap";

  - статистическая информация об  активных  пользователях  -
    файл "utmp";

  - таблица смонтированных файловых систем - файл "mtab".

    Справочник "/etc" должен быть защищен от чтения и записи
 обычными  пользователями. Для этой цели данному файлу уста-
 навливается статус:

                         drwx--x--x

 Владельцем   справочника   должен   быть   "root"   (супер-
 пользователь).

           2.4. Прикладные программы и библиотеки


    Большинство программ, предназначенных для прямого  вызо-
 ва,  располагается  в справочниках "/bin" и "/usr/bin". Два
 справочника сделано для того, чтобы можно было при  исполь-
 зовании  дисков малого об'ема разместить эти справочники на
 разных дисковых накопителях.

    Программы,  вызываемые  другими  программами  (например,
 проходы компилятора Си: "cpp", "c0", "c1", "c2"), библитеки
 стандартных программ, пакеты макроопределений систем подго-
 товки документов ("/usr/lib/tmac/tmac.*") и т.п., находятся
 в справочниках "/lib" и "/usr/lib".















                             13






                2.5. Файлы вставок - include


    Файлы вставок предназначены для хранения часто использу-
 емых фрагментов программ, в частности описаний, которые оп-
 ределяют формат и типы системных данных. С помощью операто-
 ра  "#include" такие фрагменты могут быть вставлены в любую
 программу на Си или иной текстовый  об'ект,  обрабатываемый
 препроцессором  языка  Си.  В  системе  имеется стандартный
 набор   файлов    вставок,    записанный    в    справочник
 "/usr/include", причем файлы, содержащие описания структуры
 общесистемных данных, располагаются непосредственно в  этом
 справочнике,  а  файлы с описаниями структур данных ядра ОС
 записаны в справочник "/usr/include/sys".  Более  подробную
 информацию можно найти в руководстве программиста.

    2.6. Специальные файлы и устройства - справочник dev


    Доступ к устройствам в ОС ДЕМОС  реализуется  с  помощью
 "специальных  файлов", обращение к которым приводит к акти-
 визации того или иного драйвера устройства.  Каждый  специ-
 альный  файл  относится либо к блок-ориентированным устрой-
 ствам (т.е. физический обмен с ним ведется блоками), либо к
 символьным  (байт-ориентированным) устройствам (т.е. едини-
 цей обмена с ним является байт). Этот факт указывается сис-
 темой  при  выдаче  статуса файла: "b" - в качестве первого
 символа  статуса  указывает,  на  принадлежность  к   блок-
 ориентированым   устройствам;  "c"  -  соответствует  байт-
 ориентированным устройствам. Обмен  с  блок-ориентированным
 устройством  буферизуется системой, программа может обмени-
 ваться массивами произвольной длины. Ограничения на  обмены
 с  байт-ориентированным устройством определяются его типом.
 Некоторым внешним устройствам соответствует несколько  спе-
 циальных  файлов, обеспечивающих различные методы доступа к
 устройству.

    Связь имени специального файла с конкретным  устройством
 производится  с  помощью  двух  чисел: старшего ("major") и
 младшего ("minor") номеров устройств,  которые  указываются
 при  заведении  специального  файла. Хотя такая организация
 позволяет присваивать специальным файлам произвольные  име-
 на,  в  системе  принято  следующее  соглашение  об  именах
 устройств:

 console
    - консольный терминал;

 ttyN
    - терминал, подключенный напрямую (ИРПР или АДС);









                             14






 ttyjN ttyhN
    - терминалы подключенные через мультиплексоры;

 lpN
    - печатающее устройство (режим преобразования в  верхний
    регистр);

 rlpN
    - печатающее устройство (прозрачный режим, 8 битов);

 root
    - "корневая" файловая система;

 mem
    - "физическая" оперативная память ЭВМ;

 kmem
    - оперативная память ядра ОС ДЕМОС;

 null
    - "фиктивное устройство";

 tty
    - "управляющий" терминал программы;

 mtN nmtN rmtN nrmtN
    - накопители на магнитной ленте;

 rkN
    - накопители на дисках типа ИЗОТ 1370;

 hkN hkNa hkNb
    - накопители на дисках типа СМ 5408;

 rpN rpNa rpNb
    - накопители на дисках типа ЕС 5061;

 rxN
    - накопители на гибких дисках;

    Символом N обозначен номер устройства данного типа,  ко-
 торый  может принимать значения: 0, 1, ..., 9, a, b, ..., f
 (например: rk1, mt0, tty6, ttyj9, ttyja).

    Доступ к дисковым устройствам и к лентам  осуществляется
 двумя  способами  -  обмен  с  буферизацией  блоками по 512
 байтов, и обмен в прозрачном режиме. В последнем случае при
 каждом  обращении к функциям "read" или "write" осуществля-
 ется физический обмен информацией между  памятью  задачи  и
 устройством,  причем максимальный размер массива информации
 и требования по размещению информации на  носителе  зависят
 от  устройства.  К  именам  специальных файлов, реализующих
 доступ к устройствам  в  "прозрачном"  режиме,  добавляется






                             15






 символ  "r"  (например,  rk0 - обмен с буферизацией, rrk0 -
 без буферизации).

    В именах специальных файлов, отвечающих за работу с маг-
 нитными  лентами, указывается, производится ли перемотка на
 начало ленты при закрытии файла. Признаком отсутствия пере-
 мотки на начало является буква "n" перед именем устройства.
 Например:

    mt1   - работа с магнитофоном номер 1,  с  перемоткой  и
            буферизацией;

    rmt1  - работа с магнитофоном номер 1, с перемоткой,  но
            без буферизации;

    nmt1  - работа с магнитофоном номер 1, без перемотки,  с
            буферизацией;

    nrmt1 - работа с магнитофоном номер 1, без  перемотки  и
            без буферизации.

    При заведении специального файла, работающего с  накопи-
 телем  на  магнитной ленте без перемотки, к младшему номеру
 устройства ("minor") добавляется бит 0200.

    В системе существует возможность разбивать  пространство
 на магнитных дисках на несколько частей (т.е. рассматривать
 пакет как совокупность виртуальных дисков). В имя специаль-
 ного  файла,  обеспечивающего  работу с виртуальным диском,
 добавляется индекс используемой части диска (например, если
 диск типа rp содержит несколько виртуальных дисков с индек-
 сами "a", "b" и "c", предполагается, что будут созданы спе-
 циальные файлы: "rp1a", "rp1b" и rp1c). В этом случае млад-
 ший номер устройства ("minor") несет информацию как о номе-
 ре устройства, так и о номере виртуального диска на нем.

     2.7. Файлы со статистической информацией о системе


    В ОС ДЕМОС может собираться различная статистическая ин-
 формация  о  работе  системы, которая записывается в файлы,
 расположенные в справочнике "/usr/adm". Файлы данного спра-
 вочника содержат следующие данные:

    lastlog  - времена последних сеансов  пользователей  (за
               время  последнего  сеанса  принимается  время
               последней регистрации данного пользователя);

    messages - системные  диагностики   ошибок   (собираются
               программой "/etc/dmsg");









                             16






    wtmp     - статистика о сеансах пользователей (собирает-
               ся  программами "init" и "login", обрабатыва-
               ется программой "/bin/ac");

    lpacct   - статистика  по  выдачам  на  печать,   каждая
               запись содержит имя пользователя, дату печати
               и число выданных листов.

    Большинство программ сбора статистики устроено таким об-
 разом,  что они не заводят файлы для сбора информации. Если
 соответствующий файл отсутствует,  это  является  признаком
 того, что информацию данного типа собирать не нужно. Следу-
 ет отметить, что все файлы со статистикой имеют тенденцию к
 непрерывному  росту,  поэтому  они должны периодически очи-
 щаться (очевидно, после того как статистическая  информация
 будет принята к сведению и, возможно, переписана на ленту).

              2.8. Рабочие файлы и справочники


    Большинство программ ОС ДЕМОС  создают  и  используют  в
 процессе своей работы временные файлы. Для размещения таких
 файлов  в  системе  используются   справочники   "/tmp"   и
 "/usr/tmp".  Как  правило,  все процессы по окончании своей
 работы уничтожают свои временные файлы. При сбоях,  однако,
 некоторые  файлы  могут  остаться.  Поэтому, при перевызове
 системы   производится   чистка   справочников   "/tmp"   и
 "/usr/tmp". Обычно сохраняют только файлы "/tmp/re*", в ко-
 торые редактор "red" записывает последний  протокол  работы
 каждого пользователя. Эти файлы используются для восстанов-
 ления сеанса редактирования после сбоя.

    Еще одним типом временных файлов, являются файлы буфери-
 зации  печати  и  сообщений,  передаваемых  по почте или по
 сети. Они размещаются в следующих справочниках:

 /tmp/spool/lpd
    - файлы буферизации выдачи на АЦПУ;

 /usr/spool/mail
    - почтовые "ящики" пользователей;

 /tmp/spool/uucp
    - сетевые сообщения.

 Эти справочники необходимо периодически просматривать  и,
 если  после сбоев в них накопились ненужные файлы, прочи-
 щать их.











                             17






 2.9. Монтируемые файловые системы и пользовательские спра-
                           вочники


    В ОС ДЕМОС нет "жесткой" системы  монтирования  дополни-
 тельных фаловых систем. Для того, чтобы подключить к работе
 дополнительную файловую систему, достаточно смонтировать ее
 на  любой  свободный справочник. Под свободным справочником
 подразумевается справочник, на который в данный момент  нет
 ссылок  из  активных процессов (нет открытых файлов, "теку-
 щих" справочников и т.п.).

    В данном разделе приводится ряд рекомендаций по размеще-
 нию  монтируемых файловых систем и регистрационных справоч-
 ников пользователей.

 При работе на дисках СМ-5400 (2.5 М-байт):

  - справочник "/usr" размещается на отдельном диске;

  - дополнительные файловые системы монтируются на  справоч-
    ники с именами "/mnt/имя_диска", в том числе:

     /mnt/man - отдельный диск;
     /mnt/sys - отдельный диск.


 При работе на дисках СМ-5408 ("hk") или ЕС-5061 ("rp"):

  - корневая файловая система расположена  на  диске  "hk0a"
    или  "rp0a"  и занимает 8000 блоков, причем в нее входит
    справочник "/usr";

  - вторая часть системного диска ("hk0b" или "rp0b") монти-
    руется  под именем "/mnt", на ней, в частности, распола-
    гают справочники "/mnt/man" и "/mnt/sys";

  - остальные диски монтируются под  именами  "/usr/имя_дис-
    ка".

    Во всех случаях регистрационные справочники  пользовате-
 лей обычно располагают на справочнике "/usr" или "/mnt".

















                             18






             3. ЯДРО ОПЕРАЦИОННОЙ СИСТЕМЫ ДЕМОС


    В этом разделе описаны структура и принципы работы  ядра
 операционной  системы  ДЕМОС,  работа с процессами, система
 ввода/вывода и  реализация  файловой  системы.  При  первом
 прочтении раздел может быть пропущен.

                 3.1. Управление процессами


    В операционной системе ДЕМОС программы пользователей вы-
 полняются  в  контексте  "процессов  пользователя", которые
 могут обращаться к системе с помощью "системных вызовов". В
 момент системного вызова происходит переключение контекста,
 и процесс становится системным процессом. Процессы  пользо-
 вателя и системы представляют собой различные фазы одного и
 того же процесса, которые никогда не  выполняются  одновре-
 менно.  При  этом  системный  процесс  использует отдельный
 стек, что улучшает защиту системы.

    Каждый процесс пользователя состоит из сегмента  данных,
 сегмента  команд,  и связанного с сегментом данных сегмента
 системных данных ("user"), недоступного из процесса пользо-
 вателя.

    Когда процесс впервые начинает  выполнение  разделяемого
 сегмента команд, для него резервируется место в таблице за-
 щищенных сегментов, а команды загружаются из файла. При не-
 обходимости сегмент команд выгружается во вторичную память,
 в дальнейшем его копия во вторичной памяти сохраняется  не-
 изменной.  Если  другой  процесс начинает работу по этой же
 программе, счетчик ссылок на сегмент  команд  увеличивается
 на  единицу,  и команды используются совместно. Таким обра-
 зом, экономится память и обмены, поскольку нет необходимос-
 ти сохранять защищенные сегменты, так как исходная копия во
 вторичной памяти (то есть в области подкачки на дисках)  не
 изменяется.

    Все находящиеся в системе  разделяемые  сегменты  команд
 управляются  через  таблицу защищенных сегментов (структура
 "text"). Записи в ней содержат указатель на место  сегмента
 во вторичной памяти, счетчик процессов, использующих данный
 сегмент, и расположение сегмента в оперативной памяти (если
 он  загружен в память). Когда число процессов, использующих
 сегмент, уменьшается до нуля, элемент таблицы обнуляется  и
 память,  занимаемая сегментом, освобождается. Из этого пра-
 вила имеется одно исключение:  если  программа  помечена  в
 справочнике  признаком  "t",  то копия защищенного сегмента
 команд остается во вторичной памяти, даже если никто ее  не
 использует, что ускоряет повторный запуск программы. Размер
 таблицы сегментов определяется параметром "NTEXT".







                             19






    Сегмент пользовательских данных процесса состоит из двух
 частей:  статические  данные  и  стек.  Граница статических
 данных изменяется только в результате явных  запросов,  что
 происходит, например, при запросе динамической памяти. Стек
 расположен в конце математической памяти, и его граница из-
 меняется  системой  автоматически  при  расширении стека (в
 сторону младших адресов) в ответ на нарушение защиты  памя-
 ти. При выделении памяти ее содержимое обнуляется.

    Сегмент системных данных, связанный с процессом,  выгру-
 жается  вместе  с  пользовательскими данными и содержит все
 данные о процессе, необходимые во время активной  фазы  его
 работы.  Примером данных, хранящихся в этом сегменте, явля-
 ются: сохраненные регистры центрального процессора, учетная
 информация,  область временных данных и стек системных про-
 цессов.

    И, наконец, имеется таблица процессов ("proc"), где  для
 каждого  процесса отведена одна запись. Эта запись содержит
 все данные, необходимые системе в то время,  когда  процесс
 не активен. Примерами этих данных являются: номер процесса,
 расположение сегментов процесса, информация для  планирова-
 ния. Запись в таблице резервируется при создании процесса и
 освобождается при его завершении. Максимальное число  запи-
 сей в этой таблице определется параметром "NPROC". Взаимос-
 вязь между различными данными при управлении процессами по-
 казана на рисунке 2.

        3.2. Создание процесса и выполнение программы


    Процесс создается при помощи системного  вызова  "fork".
 Вновь  созданный процесс (потомок) представляет собой копию
 исходного процесса (родителя). Между  этими  процессами  не
 существует видимого разделения первичной памяти (хотя, если
 исходный процесс выполнял  защищенный  сегмент  команд,  то
 процесс-потомок будет его разделять). Для процесса создают-
 ся копии сегментов  данных.  Файлы,  которые  были  открыты
 перед выполнением "fork", после выполнения "fork" совместно
 используются обоими процессами.

    Процессы информируются об их месте в иерархии  процессов
 для  выбора  дальнейших  действий (как правило, не одинако-
 вых). Процесс-родитель может ожидать завершения  любого  из
 своих потомков с помощью "wait".

    Кроме того, процесс может запустить программу  из  файла
 при  помощи системного вызова "exec". Это реализуется заме-
 ной текущих командного сегмента и сегмента данных на новые,
 определенные  в  вызванном  файле. Старые сегменты при этом
 теряются. Выполнение вызова  "exec"  не  изменяет  процесс,
 просто  он начинает выполняться по другой программе. Файлы,
 которые  были  открыты  до  выполнения   "exec",   остаются






                             20







       Таблицы управления процессами.

   -------            -------
   I     I Таблица    I     I Таблица
   ....... процессов  ....... сегментов
   I-----* ---------+ I-----I команд
   I     I          I-I     I------------+
   I-----I -----+     I-----I            I
   .......      I     .......            I
   I     I      I     I     I            I
   -------      I     -------   ЯДРО ОС  I
    .  .  . . . I.  .  .  . .  .  .  .  .I .
   ОБЛАСТЬ  ____V_______       __________V_
   ПОДКАЧКИ I системныеI       I сегмент  I
   И ПАМЯТЬ I данные   I       I команд   I
            I----------I    +->I          I
            I данные   I<-+ I  I----------I
            I пользова-I  I I  .............
            I теля     I  I I  .Адреса: 0  .
        +-->I и стек   I  I +--.КОМАНДЫ    .
        I   ------------  I    . . . . . . .
        I                 +----.ДАННЫЕ     .
        I                      . . . . . . .
        I                      . . . . . . .
        +----------------------.СТЕК:      .
                               .  0177776  .
                               .............

                        Рис. 2

 открытыми. Если программа, например первый проход  компиля-
 тора,  хочет заменить себя другой программой, например вто-
 рым проходом компилятора, она просто выполняет "exec второй
 программы". Если программа желает получить назад управление
 после выполнения  этой  второй  программы,  то  она  должна
 создать  новый процесс с помощью "fork", в процессе-потомке
 вызвать вторую программу через "exec", а в процессе-  роди-
 теле  ждать  окончания  работы  потомка  с  помощью  вызова
 "wait". Таким образом, вызов разделяется на два этапа,  что
 позволяет вызывать программы в нужном контексте, настраивая
 его после "fork", но до "exec", в процессе-потомке  (напри-
 мер, переопределив стандартный ввод и вывод).
















                             21






                   3.3. Подкачка процессов


    Большая часть данных,  связанных  с  процессом  (сегмент
 данных  пользователя,  сегмент  данных  системы  и  сегмент
 команд), при необходимости переписывается из основной памя-
 ти  во  вторичную  (область  подкачки  на диске) и обратно.
 Сегмент данных пользователя и системный сегмент в целях ус-
 корения  выгрузки  записываются  в последовательной области
 первичной и вторичной памяти. При расширении процесса выде-
 ляется  новый участок памяти,  содержимое памяти копируется
 на новый участок, а старый участок освобождается. При этом,
 если нет достаточного количества первичной памяти, резерви-
 руется вторичная память достаточного размера и процесс выг-
 ружается в нее.

    Имеется специальный системный  процесс,  так  называемый
 "процесс  подкачки", который выгружает и загружает процессы
 в первичную память. Он находит процесс, который нужно  заг-
 рузить,  резервирует  для него первичную память и считывает
 его сегменты, после чего процесс оказывается готов к выпол-
 нению и начинает конкурировать за время процессора с други-
 ми загруженными процессами. При нехватке места в  первичной
 памяти производится поиск подходящих процессов и их выгруз-
 ка  с освобождением первичной памяти.

    То, какой из  множества  выгруженных  процессов  следует
 загрузить,  определяется по времени пребывания во вторичной
 памяти, по приоритету и по  размеру  процесса.  Выгружаются
 первыми  процессы, ожидающие "медленных" событий (не диско-
 вого ввода/вывода) в соответствии с временем  пребывания  в
 первичной  памяти и другими параметрами; остальные процессы
 выбираются по времени пребывания в первичной памяти и  при-
 оритетам.  При  этом принимаются меры по предотвращению из-
 лишней перекачки процессов  между первичной и вторичной па-
 мятью.

    При большой нагрузке на систему и малой оперативной  па-
 мяти  возникает  значительная  нагрузка на диск подкачки. В
 этом случае пред'являются повышенные требования к  его  на-
 дежности.

              3.4. Синхронизация и планирование


    Синхронизация процессов выполняется с  помощью  аппарата
 событий: процесс может ожидать событие, которое идентифици-
 руется целым числом. При этом в качестве внутренних номеров
 событий в системе используются адреса переменных или струк-
 тур, связанных с событием. Так, например, для ожидания  за-
 вершения  процесса  используется  событие,  номер  которого
 равен адресу элемента таблицы  процессов,  соответствующего
 ожидаемому  процессу.  Когда происходит какое либо событие,






                             22






 находятся и активизируются все ожидающие его процессы. Воз-
 никновение  события, которого никто не ждет, не оставляет в
 системе никаких следов. Событие существует только во  время
 его использования, т.е. информация о нем не хранится в сис-
 теме.

    С каждым процессом связан его приоритет. Приоритет  сис-
 темного процесса назначается в соответствии с ожидаемым со-
 бытем. События, связанные с дисками, имеют высокий  приори-
 тет,  события  терминалов  низкий, события по времени самый
 низкий приоритет. Приоритеты всех пользовательских  процес-
 сов всегда ниже, чем самый низкий системный приоритет. При-
 оритет пользовательского процесса выбирается таким образом,
 что  интерактивные  процессы получают автоматически высокий
 приоритет, а процессы,  которые  полностью  расходуют  свои
 кванты  времени, низкий. Так как интерактивные процессы ха-
 рактеризуются низким отношением времени вычислений к реаль-
 ному времени, они выполняются в первую очередь.

    Алгоритм планирования просто выбирает процесс с  наивыс-
 шим  приоритетом, выбирая таким образом сначала все систем-
 ные процессы, а затем процессы пользователя. Отношение вре-
 мени работы к реальному времени вычисляется каждую секунду.
 Следовательно, при прочих равных условиях процессы  пользо-
 вателей будут планироваться по круговому алгоритму с равны-
 ми квантами времени.

                3.5. Организация ввода/вывода


    Система ввода/вывода разбита на две логически  независи-
 мые блок- и байт-ориентированные системы.

    Устройство характеризуется старшим   ("major")  номером,
 младшим  ("minor")  номером  и  классом  (блок-  или  байт-
 ориентированное). В каждом классе имеется таблица драйверов
 устройств. Старший номер используется для индексации табли-
 цы при обращении к процедуре конкретного  драйвера  устрой-
 ства, адрес которой содержится в таблице. Младший номер пе-
 редается к драйверу устройства как аргумент.  Как  правило,
 драйвер  использует  младший номер для доступа к нескольким
 идентичным физическим устройствам.

    Использование  таблицы  конфигураций   (фактически   это
 массив  адресов  входа  в драйверы) в качестве единственной
 связи между программами системы и драйверами является очень
 важным моментом.

    Стандартное блок-ориентированное устройство ввода/вывода
 состоит  из  произвольно адресуемых блоков вторичной памяти
 длиной по 512 байтов каждый. Все  блоки  адресуются  единым
 образом  от  0 до максимального номера блока на устройстве.
 Драйвер блок-ориентированного устройства должен эмулировать






                             23






 эту модель на физическом устройстве.

    В системе имеется набор буферов (как правило, от  10  до
 70),  каждый   из которых связан с именем и адресом устрой-
 ства. Этот буферный  пул  образует  кэш  данных  для  блок-
 ориентированных  устройств. При получении запроса на чтение
 производится поиск в кэше требуемого блока. Если он найден,
 данные  становятся  доступными без физической операции вво-
 да/вывода. Если блока в кэше не оказывается, наименее часто
 используемый  блок  в кэше освобождается и используется для
 считывания в него новых данных. Запрос на запись  обрабаты-
 вается аналогичным образом: если записывается не весь блок,
 то его содержимое предварительно считывается с устройства в
 буфер. Запись задерживается до освобождения буфера.

    Преимущества, полученные за счет уменьшения об'ема физи-
 ческого ввода/вывода при такой организации обменов, являют-
 ся значительными,  особенно  учитывая  устройство  файловой
 системы.  Однако имеются и некоторые отрицательные стороны.
 Асинхронная природа алгоритма  делает  затруднительным  ре-
 гистрацию  ошибок пользователя. Вторая проблема заключается
 в задержке операций вывода. Если система  неожиданно  оста-
 навливается, то велика вероятность того, что остается много
 логически завершенных, но физически не выполненных операций
 вывода  в буферах ввода/вывода. В системе периодически (раз
 в 30 секунд) осуществляется сброс буферов на диски, но  это
 до  конца проблему не решает. И, наконец, система буфериза-
 ции может изменить физическую последовательность  ввода/вы-
 вода  по  сравнению с логической. Это означает, что имеется
 некоторое время, в течение  которого  структура  данных  на
 диске  не совсем корректна, даже если программное обеспече-
 ние выполняет ввод/вывод в  надлежащей  последовательности.
 Для  устройств  с последовательным доступом, например, маг-
 нитных лент, эту проблему приходится решать с помощью  спе-
 циальных  мер  (разрешение только одного запроса на устрой-
 ство), поскольку в этом случае изменение порядка записи не-
 допустимо.

    Система ввода/вывода байториентированных устройств  сос-
 тоит  из  всех  устройств, которые не отвечают модели блок-
 ориентированных устройств. Сюда входят такие "классические"
 устройства,  работающие  с байтами, как линии связи, перфо-
 ленты, печатающие устройства. К ним относятся также и  маг-
 нитная лента, и диски в тех случаях, когда они используются
 в обычном виде,  например,  при  необходимости  писать  80-
 байтные записи на ленту или переписывать диски по дорожкам.
 Запросы ввода/вывода  пользователей  передаются  в  драйвер
 устройства  практически без изменений. Реализация этих зап-
 росов является задачей драйвера.










                             24






              3.6. Драйверы дисковых устройств


    Драйверы дисков реализуются на основе очереди заявок  на
 обмены. Каждая заявка содержит команду чтения/записи, адрес
 первичной памяти, адрес на диске, счетчик байтов  передачи.
 Байториентированный  интерфейс к дисковым драйверам создает
 заявку, которая прямо указывает на данные, расположенные  в
 области пользователя. При этом процесс фиксируется в памяти
 так, чтобы пользователь не был выгружен из памяти во  время
 операции  ввода/вывода.  Таким  образом,  дисковые драйверы
 позволяют  использовать   диски   как   блокориентированные
 устройства,   как   байториентированные  устройства  и  как
 устройства выгрузки, в последнем случае заявки  формируются
 процессом  выгрузки. Единственная специфическая задача нор-
 мального дискового драйвера состоит в пересортировке заявок
 в  целях минимизации времени доступа и в действительном вы-
 полнении ввода/вывода.

                    3.7. Очередь символов


    Конкретное байториентированное устройство может быть ре-
 ализовано  с использованием общих подпрограмм для обработки
 списков байтов. Список представляет собой  очередь  байтов;
 одна  из подпрограмм передает байты в очередь, а другая по-
 лучает байты из очереди. Кроме того, можно узнать,  сколько
 байтов в настоящее время имеется в очереди. Память для всех
 очередей в системе выделяется из единственного общего пула,
 размер  его  определяет параметр "NCLIST". Запись символа в
 очередь приводит к выделению места из общего пула и  присо-
 единяет его к структуре данных, которая определяет эту оче-
 редь. Выборка символа из очереди  освобождает  соответству-
 ющее пространство в пуле.

    Типичное байториентированное устройство  выдачи  (напри-
 мер,  перфоратор)  обслуживается путем передачи символов из
 памяти пользователя в очередь байтов, пока не будет достиг-
 нут  некоторый  максимум числа байтов в очереди. Ввод/вывод
 инициируется сразу при появлении чего-либо в очереди и, бу-
 дучи раз запущенным, продолжается за счет прерываний от ап-
 паратуры. Всякий  раз,  когда  при  окончании  операции  на
 устройстве  происходит прерывание, драйвер выбирает из оче-
 реди следующий байт и передает его  в  аппаратный  регистр.
 При  этом  происходит  проверка числа символов в очереди и,
 как только счетчик уменьшается до некоторого промежуточного
 значения,  возбуждается  событие  (с адресом очереди). Про-
 цесс, который передает символы  из  памяти  пользователя  в
 очередь,  может  в  это время ожидать события и, дождавшись
 его, будет дополнять очередь до максимума.

    Типичное байториентированное устройство ввода (например,
 считыватель перфоленты) управляется аналогичным образом.






                             25






         3.8. Другие байториентированные устройства


    Имеются устройства, которые не попадают в общую  группу.
 Такие устройства причисляются к байториентированным. Приме-
 ром может служить драйвер, который читает и записывает дан-
 ные  из  оперативной памяти ЭВМ по системным или физическим
 адресам. Некоторые устройства могут быть слишком  быстрыми,
 чтобы с ними можно было работать побайтно, но в то же время
 не отвечать модели дискового ввода/вывода. Примерами  таких
 устройств  являются быстрые линии связи, быстрые печатающие
 устройства  и  т.д.  Такие   устройства   либо   организуют
 собственные буфера, либо "одалживают" буфера блокориентиро-
 ванных устройств с последующим возвратом. Бывает и обратная
 ситуация; например, драйвер гибких дисков работает с самими
 дисками побайтно, но при этом  реализует  модель  дискового
 устройства.

                    3.9. Файловая система


    В операционной  системе  ДЕМОС  файл  -  это  одномерный
 массив  байтов.  Система  (точнее, ее ядро) не поддерживает
 никакой другой файловой структуры. Файлы распределяются  по
 уровням  справочников.  Справочники  - это просто файлы,  в
 которые пользователь не имеет права записи. Подробное  опи-
 сание  структур  файлов и справочников приведено в описании
 применения ОС ДЕМОС.

    Файловая система ОС ДЕМОС  представляет  собой  дисковую
 структуру  данных,  доступ  к  которой осуществляется через
 блокориентированную систему  ввода/вывода.  Как  отмечалось
 раньше, "канонический" вид диска ОС ДЕМОС - это произвольно
 адресуемая область  512-байтных  блоков.  Файловая  система
 разбивает  диск  на  четыре  самостоятельные  области. Блок
 номер 0 не используется файловой системой. Он  осуществляет
 процедуру  загрузки, либо содержит информацию для опознания
 имени диска. Блок номер 1 содержит так  называемый  "супер-
 блок",  то есть описание всей файловой системы, в том числе
 размер диска и границы следующих  областей.  Далее  следует
 индексный   список  (i-list),  который  представляет  собой
 массив описателей файлов (индексных  дескрипторов).  Каждый
 индексный  дескриптор (inode) представляет собой 64-байтную
 структуру, а порядковый номер его  в  массиве  дескрипторов
 называется  его  индексом  (i-number).  Комбинация  номеров
 устройства "major" и "minor" и  индекса  делает  имя  файла
 уникальным. После списка индексов и до конца диска распола-
 гается область информационных блоков, в которых могут  раз-
 мещаться файлы.

    Область свободных блоков на диске описывается  связанным
 списком  номеров  свободных  блоков на диске. Каждый блок в
 этой цепочке содержит номер следующего блока цепочки, после






                             26






 которого  располагаются  номера очередных 50 свободных бло-
 ков. Таким образом, за одну операцию  ввода/вывода  система
 получает  номера  50 свободных блоков и указатель на следу-
 ющие. Алгоритм распределения диска очень простой. Поскольку
 все распределение происходит блоками фиксированной длины, и
 существует точный подсчет пространства, нет необходимости в
 экономии или сборе ненужной информации.

    Индексный дескриптор файла (i-node) содержит 13 дисковых
 адресов.  Первые  10  из  них указывают на первые 10 блоков
 файла. Если длина файла более 10 блоков, то 11-й адрес ука-
 зывает  на  блок,  в  котором записаны адреса следующих 128
 блоков файла. Если файл еще больше, то тогда 12 адрес  ука-
 зывает  на описание 128 блоков, каждый из которых указывает
 на 128 очередных блоков файла. Еще более длинные  файлы  (8
 459  264  байта)  используют 13 адрес для тройной косвенной
 адресации.

    Логическая иерархия файлов составляется  путем  простого
 добавления файлов типа справочник к общей физической струк-
 туре. Справочник содержит 16-ти байтные  записи,  состоящие
 из  имени длиной 14 байтов и индекса файла (i-number). Кор-
 невой справочник находится всегда в файле,  имеющем  индекс
 2.  Структура  файловой системы позволяет в принципе созда-
 вать любые связи между файлами, однако для упрощения систе-
 ма  поддерживает только древовидную структуру справочников,
 хотя между обычными файлами допускаются произвольные  связи
 (то есть несколько имен файлов - не справочников могут ссы-
 латься на один индекс, то есть на один файл).

              3.10. Реализация файловой системы


    Так как индексный дескриптор  файла  (inode)  однозначно
 идентифицирует файл, реализация файловой системы сосредота-
 чивается вокруг доступа к нему. Система строит таблицу всех
 активных индексных дескрипторов (ее максимальный размер за-
 дает параметр NINODE). Как только требуется доступ к новому
 файлу,   система   определяет   соответствующий   индексный
 дескриптор, определяет элемент таблицы индексных дескрипто-
 ров  и считывает данный inode в оперативную память. Измене-
 ния, касающиеся индексного дескриптора, производятся в эле-
 менте таблицы. Когда последнее обращение к inode закончено,
 индексный узел копируется обратно на диск, а элемент табли-
 цы освобождается. (*1)

__________________________

(*1)Существует параметр генерации ОС "LRUI", который вызыва-
   ет  использование  таблицы  дескрипторов  в  режиме  кэш-
   таблицы, то есть элементы освобождаются лишь по  исчерпа-
   нии места в таблице.







                             27






   Все операции ввода/вывода из файлов выполняются с помощью
соответствующего  элемента  таблицы  индексных дескрипторов.
Метод доступа к файлу при этом скрывает от пользователя  су-
ществование  индексных  дескрипторов.  Обращение  к файловой
системе происходит по имени файла, которое описывает маршрут
пути  к файлу в дереве справочников. Алгоритм преобразования
имени в элемент таблицы дескрипторов следующий:  начиная  от
какого-то  известного индексного дескриптора (корневой спра-
вочник или текущий  справочник),  очередной  шаг  доступа  к
файлу проводится путем чтения очередного справочника и поис-
ка в нем очередной компоненты имени. Номер устройства  зави-
сит  от справочника. В случае, если найдена последняя компо-
нента имени, полученный индекс  файла  является  искомым.  В
противном  случае это - индекс очередного справочника, и вы-
полняется очередной шаг поиска.

   Процесс пользователя обращается к  файловой  системе  при
помощи ряда примитивов. Наиболее важные из них - это "open",
"close", "creat", "read", "write", "lseek". В области данных
системы  имеется таблица открытых файлов, каждый элемент ко-
торой содержит указатель на индексный дескриптор файла,  те-
кущий указатель ввода/вывода в файле и дополнительную инфор-
мацию. Указатель ввода/вывода представляет собой смещение от
начала  файла  (в  байтах) точки в файле, с которой начнется
следующая операция ввода/вывода. Структура данных операцион-
ной системы показана на рисунке 3.

   Система  обрабатывает  каждый  запрос  чтения/записи  как
запрос  на  ввода/вывод  с прямым доступом по указателю вво-
да/вывода. Программист обычно представляет файл как последо-
вательное  пространство с указателем ввода/вывода, автомати-
чески смещающимся на число байтов, которое было прочитано из
файла  или записано в файл. Конечно, пользователь имеет воз-
можность выполнить ввод/вывод в произвольной точке путем ус-
тановки  указателя ввода/вывода перед операцией чтения/запи-
си.

   Для раздельного и независимого доступа к файлу нескольких
процессов  необходимо,  чтобы  они имели доступ к общему ин-
дексному дескриптору и, кроме того, имели различные указате-
ли  ввода/вывода.  Отдельная  таблица открытых файлов служит
как раз для того, чтобы обеспечить такой независимый доступ:
при  каждом  открытии  файла  заводится новый элемент в этой
таблице с нулевым указателем, причем разные элементы таблицы
могут ссылаться на один и тот же файл, то есть на один и тот
же индексный дескриптор. При этом родственные процессы, сов-
местно использующие один файл (в результате "fork"), исполь-
зуют один и тот же элемент таблицы файлов.

   Основные запросы файловой системы  реализуются  следующим
образом.  Запрос "open" преобразует имя файла в элемент таб-
лицы индексных дескрипторов. Указатель на элемент этой  таб-
лицы помещается в элемент таблицы открытых файлов. Указатель






                             28







             Структура данных ОС

    Таблица файлов процесса
      +-------+
      I.......*---+
      I.......I   I
      INOFILE.I   I   ВЫГРУЖАЕМАЯ
      +-------+   I   ОБЛАСТЬ
  .  .  .  .  .  .I .  .  .  .  .  .  .  .
                  I
  таблица открытыхI    таблица индексных
    файлов       /        дескрипторов
   +-------+    /             +-------+
   I.......I   /              I.......I
   I       I<-+      +------->I       I
   I       I---------+     +->I       I-+
   I.......I--+            I  I.......I I
   INFILE..I  I            I  ININODE.I I
   +-------+  I          +-+  +-------+ I
   ТАБЛИЦЫ ОС I          I              I
  .  .  .  .  I  .  .  . I.  .  .  .  . I
              I сдвиг    I              I
    Д И С К   +----------I-------+      I
    -------              I       I      I
   +--------------+      I       I      I
   I 0 блок.      I      I       I      I
   I супер-блок.  I      +       I      I
   I..............I     /        I      I
   I дескриптор   I<---+         V      I
   I..............I       алгоритм      I
   I  файл        I<------*********-----+
   I..............I    размещения файла
   +--------------+

                 Рис. 3.

на элемент таблицы открытых файлов  помещается  в  системный
сегмент  данных  процесса. Запрос "creat" организует сначала
новый элемент таблицы индексных дескрипторов, записывает ин-
декс  (i-number) в справочник и затем строит такую же струк-
туру, как и для запроса "open".  Запросы  "read"  и  "write"
просто   выбирают  элемент  таблицы  индексных  дескрипторов
("inode"), как описывалось выше. Запрос "lseek" просто мани-
пулирует  указателем ввода/вывода и никакого физического по-
иска не производит. Запрос  "close"  освобождает  структуру,
организованную запросами "open" или "creat". Счетчики ссылок
содержатся в элементах таблицы индексных  дескрипторов  и  в
элементах таблицы открытых файлов для освобождения элементов
этих таблиц после того, как они становятся ненужными. Запрос
"unlink"  просто уменьшает на 1 счетчик имен, указывающих на
заданный индексный дескриптор (inode). Когда последняя ссыл-
ка  на  элемент таблицы уничтожается, и не осталось открытых






                             29






файлов, указывающих на него, то файл удаляется и  дескриптор
освобождается.  Удаление  с задержкой предотвращает удаление
активных файлов, поскольку файл может быть удален, но еще не
закрыт. Неименованный файл исчезает после того, как он будет
закрыт.

   Имеются также неименованные  файлы  типа  "FIFO"  (первым
пришел-первым  обслужен), которые называются каналом "pipe".
Реализация  "pipe"  обеспечивается   внутренними   запросами
"lseek"  перед каждым запросом чтения или записи, и механиз-
мом синхронизации, который следит за переполнением и  исчер-
панием буфера.

            3.11. Монтированные файловые системы


    Начало файловой системы ОС ДЕМОС находится на  некотором
 (определенном  при  генерации)  блокориентированном устрой-
 стве, на котором находится так называемая "корневая  файло-
 вая система". Дополнительное блокориентированное устройство
 может быть смонтировано на любую ветвь этого иерархического
 дерева,  что  логически  расширяет текущую иерархию файлов.
 Реализация монтирования довольно проста. Таблица  смонтиро-
 ванных  устройств  составляется  по  двум  параметрам - ин-
 дексный дескриптор определенной ветви и номер  блокориенти-
 рованного устройства. Система помечает признаком монтирова-
 ния индексный дескриптор ветви иерархии,  на  которую  была
 смонтирована  дополнительная система. Если при поиске файла
 очередной дескриптор помечен как "смонтированный", то  сис-
 тема находит в таблице монтирования этот дескриптор и вмес-
 то него использует корневой дескриптор смонтированной  сис-
 темы.

    Пространство для распределения файла берется из  области
 свободных  блоков  устройства,  на котором существует файл.
 Таким образом,  файловая система, состояшая  из  нескольких
 смонтированных  устройств,  не  имеет общего пула свободной
 внешней памяти,  что обеспечивает  простоту  демонтирования
 устройств.

              3.12. Другие возможности ядра ОС


    Существует еще ряд полезных особенностей системы. В  ос-
 новном это возможности учета, обеспечение доступа, средства
 отладки и некоторые  специфические  возможности  ЭВМ.  Ядро
 системы  является  именно ядром, ряд функций выполняют сис-
 темные программы, работающие как  обычные  пользовательские
 процессы, в том числе регистрация пользователей при входе в
 систему, буферизация вывода и многое другое.  Вся  система,
 за  исключением небольшой машиннозависимой программы, напи-
 сана на языке "Си".







                             30






                 4. НАСТРОЙКА СИСТЕМЫ ДЕМОС


    В данном разделе описана процедура начальной  постановки
 ОС  ДЕМОС  и генерации системы под конкретную конфигурацию.
 Для первой постановки и "грубой" настройки  системы  доста-
 точно  информации,  приведенной в разделе "Начальная поста-
 новка ОС ДЕМОС". Для дальнейшей генерации системы необходи-
 мо  изучить  "описание применения", "руководство системного
 программиста" и "руководство программиста".

             4.1. Начальная постановка ОС ДЕМОС


 4.1.1. Дистрибутивная лента ОС ДЕМОС


    Операционная система ДЕМОС   поставляется  на  магнитных
 лентах,  которые  содержат  всю  необходимую информацию для
 постановки, настройки и эксплуатации системы.  Дистрибутив-
 ные ленты содержат следующие файлы:

                        Лента номер 1:


 Файл      Содержимое

    Размещение этих файлов не будет изменяться  в  следующих
    вариантах дистрибутива:

 0) загрузчик программ "boot" с программой загрузки с ленты;

 1) программа выдачи  информации  о  составе  дистрибутивной
    ленты.

    Размещение этих файлов в будущем может измениться:

 2) программа  "mkfs" для создания пустой файловой  системы,
    исполняемый код;

 3) программа "restor" для чтения файловой системы с  ленты,
    исполняемый код;

 4) программа "vcopy" для копирования носителей, исполняемый
    код;

 5) программа "ls"  для  распечатки  каталогов,  исполняемый
    код;

 6) копия системного диска, формат "restor";









                             31






 7) копия справочника "/usr" (вторая часть  системных  спра-
    вочников),  формат  "tar",  имена  файлов  начинаются  с
    "usr";

 8) копия справочника "/mnt/sys" (материалы для генерации ОС
    ДЕМОС), формат "tar", имена файлов начинаются с "sys";

 9) вторая часть  справочника  "/usr"  (контрольный  пример,
    второстепенные программы), формат "tar".

    Лента номер 2:

 0) копия справочника "/mnt/man" (руководство  программиста,
    оперативная  документация),  формат  "tar", имена файлов
    начинаются с "man";

 1) архив инструкций, отформатированные руководства по  сис-
    теме, формат "tar", имена файлов начинаются с "doc";

 2) система обучения "learn", формат "tar", имена файлов на-
    чинаются с "learn";

 3) архив инструкций,  исходные  тексты  документов,  формат
    "tar";

 4 ...)
    Далее следуют файлы с исходными текстами системы, формат
    "tar".

    Файл 0 на  первой  ленте  содержит  загрузчик  ОС  ДЕМОС
 "boot", который предназначен для загрузки операционной сис-
 темы и для вызова служебных программ.  Файлы  1-5  содержат
 служебные   программы,   которые   запускаются  загрузчиком
 "boot", работают без операционной системы и выполняют  раз-
 личные сервисные операции - создание пустой файловой систе-
 мы, считывание информации с ленты в файловую систему, копи-
 рование лент и дисков и т.п. В частности, в файл 1 записана
 программа, которая выдает информацию о составе  полученного
 комплекта  лент  и  краткую  справку по постановке системы.
 Далее на ленте записаны файлы ОС ДЕМОС, которые считываются
 на диски при постановке системы; формат "restor" предназна-
 чен для считывания с помощью программы "restor",  a  формат
 "tar" - для считывания файлов командой "tar".
















                             32






 4.1.2. Распределение дисковых ресурсов под ОС ДЕМОС


    Базовая версия  ОС  ДЕМОС  размещается  на  двух  дисках
 СМ-5400  (ИЗОТ  1370)  или  одном  диске  большей емкости .
 Память на дисках использована следующим образом:

  - Справочник "/" (корневой справочник) - около 2300 блоков
    занято  файлами  и около 600 оставлено под рабочие файлы
    "/tmp", не считая "/usr.

  - Область подкачки ("swap") - 1772 - 2000 блоков в зависи-
    мости от типа диска.

  - Справочник "/usr" - около 4700 блоков  (по  512  байт  в
    блоке);

    Эти области могут располагаться на таких дисках:

    СМ-5400  - имя в системе "rk", 4872 блока;

    СМ 5408  - имя в системе "hk", 27126 блоков; диск  можно
               использовать  по частям: блоки 0-9999 (доступ
               по имени /dev/hkNa) (*1) и блоки  10000-27126
               (доступ по имени /dev/hkNb);

    ЕС 5061  - имя в системе "rp",  40600  блоков;  возможен
               доступ   по   частям:   блоки   0-9999   (имя
               /dev/rpNa) и 10000-40599 (имя /dev/rpNb).

    При работе системы на каждого активно работающего  поль-
 зователя должно приходиться:

  - 100-200 блоков в рабочем справочнике "/tmp";

  - 100-300 блоков в области подкачки.

    Эти цифры существенно зависят от характера  одновременно
 выполняемых  работ  и, в конкретных приложениях, могут быть
 больше или меньше. Данные рекомендации соответствуют "тяже-
 лому  случаю".  Без  перенастройки  базовая версия ОС может
 обслуживать одновременно около 5  -  7  активно  работающих
 пользователей (37 процессов, 66 индексных дескрипторов).

    При работе большого  числа пользователей   целесообразно
 вынести справочник "/tmp" на отдельный физический или логи-
 ческий диск, и то же самое сдeлать со справочниками пользо-
 вателей.  Можно  также  повысить  эффективность  работы ОС,
__________________________

(*1)       В именах специальных файлов номер устройства N  -
           цифра от 0 до 7.







                             33






 разделив по разным дискам область подкачки и корневую  фай-
 ловую  систему.  Однако при первой постановке системы этого
 лучше не делать.

    В случае перекомпоновки ОС следует иметь в виду, что при
 работе  с  файловыми  системами  длиной больше 20000 блоков
 (примерно) программа проверки файловых систем fsck  требует
 рабочий  файл.  Если  корневая файловая система имеет длину
 более 2000 блоков, такой рабочий файл  должен  существовать
 заранее  и  быть достаточного размера. При разделении диска
 на части такой потребности не возникает.

    Корневая файловая система  базовой  версии  ОС  содержит
 несколько  вариантов ядра системы, каждый из которых расчи-
 тан на свой тип дисков. Имя файла, в котором записан  соот-
 ветствующий вариант ядра ОС, указывается при вызове системы
 в  команде  загрузчику  "boot".  Предполагается   следующее
 распределение памяти на дисках:

 1)   Система на дисках СМ-5400 (ИЗОТ-1370) - размещается на
      двух дисках. Имя системы - "rkdemos".

      root
         (справочник "/") - диск rk0, размер 3100 блоков;

      swap
         (область подкачки) - диск rk0, начало  3100,  длина
         1772;

      /tmp
         размещается вместе с корневой системой, на rk0.

      /usr
         отдельный диск СМ-5400, размер 4872 блоков;

      сменные диски
         монтируются   под   именами   "/mnt/имя_диска",   в
         частности,  справочники "/mnt/sys" и "/mnt/man" за-
         нимают по отдельному диску каждый.

 2)   Система на дисках СМ-5408 - занимает первые 10000 бло-
      ков диска. Имя системы - hkdemos.

      root
         (справочник "/") - диск /dev/hk0a,  8000 блоков;

      /usr
         вместе с root, на диске /dev/hk0a;

      swap
         (область подкачки) - диск /dev/hk0a,  начало  8000,
         длина 2000;







                             34






      /tmp
         размещается вместе с корневой системой;

      /mnt
         на второй части диска  (hk0b) размещается  дополни-
         тельная файловая система длиной 17120 блоков, кото-
         рая монтируется под именем "/mnt". На ней размещают
         справочники  "/mnt/sys" и "/mnt/man", а также файлы
         пользователей.

      сменные диски
         монтируются под именами "/usr/имя_диска".

 3)   Диски ЕС 5061. Имя системы "rpdemos".

      Память распределяется аналогично  дискам  СМ-5408,  за
      исключением   того,  что  длина  файловой  системы  на
      устройстве "rp0b" равна  30600  блокам.  Рекомендуется
      корневой  справочник,  область  подкачки  и справочник
      "/tmp"  размещать,  если  это  возможно,   на   дисках
      ИЗОТ-1370.

    В таблице 1 приведена краткая сводка  базовых  вариантов
 ядра ОС.

                                                   Таблица 1
           диск   вариант  root  swap  начало длина
          -----------------------------------------
           СМ-5400 rkdemos  rk0   rk0   3100   1772
           СМ-5408 hkdemos  hk0   hk0   8000   2000
           ЕС-5061 rpdemos  rp0   rp0   8000   2000
          -----------------------------------------


    Указанные варианты ядра расчитаны на стандартные  значе-
 ния  адреса  и  вектора  прерываний консольного терминала и
 дискового контроллера. При вызове системы  можно  указывать
 номер устройства для "root" и "swap", отличный от 0. (*1)









__________________________

(*1)При получении системы необходимо  уточнить  конфигурацию
   имеющихся  вариантов ядра, распечатав справочную информа-
   цию с ленты (командой загрузчика "boot": tm(0,1)).







                             35






 4.1.3. Считывание ОС ДЕМОС с дистрибутивной ленты


    В первую очередь необходимо создать диск с корневой фай-
 ловой  системой.  Подготовьте  сформатированный диск (или 2
 диска типа СМ-5400), причем в начале  диска  (первые  10000
 блоков)  не  должно  быть дефектных блоков. Если на ЭВМ ис-
 пользуется полупроводниковая память, которую нужно расписы-
 вать  после  включения  ЭВМ, проведите роспись памяти перед
 постановкой системы (поскольку в программах, работающих при
 постановке  ОС  ДЕМОС,  роспись памяти не предусмотрена). В
 примерах диалога сообщения, выдаваемые  системой,  помечены
 словом "система->", а строки, вводимые с терминала, отмече-
 на словом "оператор>".

 1)   Установите магнитную ленту на магнитофон с номером "T"
      в  точку  загрузки, а отформатированный магнитный диск
      без плохих блоков (в первых 10000)-  на  устройство  с
      номером  N  (ниже  в примерах буквой T будет обозначен
      номер магнитофона, а N - номер диска). В случае дисков
      СМ-5400  подготовьте и установите второй диск для счи-
      тывания справочника "/usr".

 2)   Выполните операцию загрузки с ленты,  используя  аппа-
      ратный загрузчик с ленты (команда "MT" на ЭВМ с диало-
      говым загрузчиком, или встроенная программа с  началь-
      ным  адресом 0173136 или 0173120 на СМ-4). Прочитается
      один блок, затем лента перемотется  на  начало,  после
      чего  будет прочитано несколько десятков блоков - заг-
      рузчик программ "boot". На терминал выдается приглаше-
      ние:

      система-> Boot (v. 1.0)
                :


 3)   Просмотрите справочную  информацию,  которая  позволит
      уточнить  состав дистрибутивной ленты (запишите номера
      файлов с программами "mkfs", "restor" и с копией  фай-
      ловой  системы,  если они отличны от стандартных). Для
      этого вызывается программа "pthelp":

      оператор> tm(T,1) (это означает
                        "вызвать программу
                         из файла 1 на
                         ленте номер T")
      система-> Справочная информация
              ....

      На терминал будет выдан список файлов и краткая инфор-
      мация о постановке системы. Затем управление возвраща-
      ется в "boot":







                             36






      система-> Boot (v. 1.0)
                :


 4)   Следующий этап - создание  на  диске  пустой  файловой
      системы. Для этого вызывается программа "mkfs":

      оператор> tm(T,2)
      система-> Make file system
                file sys size?
      оператор>  3100 - для СМ-5400
                 8000 - для СМ-5408 или
                        ЕС-5061
      система-> file system?
      оператор>    rk(N,0) - для СМ-5400
                   hk(N,0) - для СМ-5408
                   rp(N,0) - для ЕС-5061
      система-> check bad blocks?
      оператор> n - поскольку вы установили
                    диск, не содержащий
                    плохих блоков.
      система-> isize=xxx
                m/n=x/x
                exit called
                Boot (v. 1.0)
                :


 5)   Теперь нужно скопировать  с  ленты  корневую  файловую
      систему с помощью программы "restor":

      оператор> tm(T,3)
      система-> Restor file system
                tape?
      оператор> tm(T,6) - здесь 6 - номер
                          файла с копией
                          файловой системы
      система-> disk?
      оператор>      rk(N,0) - для СМ-5400
                     hk(N,0) - для СМ-5408
                     rp(N,0) - для ЕС-5061
      система-> last chance before scribbing
                on the disk?
      оператор> <возврат каретки>
                считывание с ленты и запись
                на диск идет примерно 10 -
                20 минут
      система-> exit called
                Boot (v. 1.0)
                :

      Теперь на диске (rkN, hkN или rpN) находится  корневая
      файловая система.






                             37






 6)   Вызываем ОС ДЕМОС, используя загрузчик "boot", считан-
      ный  с  ленты.  Если  корневая  система  находится  на
      устройстве 0, набирается одна из команд:

      оператор> rk(0,0)rkdemos - для СМ-5400
                hk(0,0)hkdemos - для СМ-5408
                rp(0,0)rpdemos - для ЕС-5061

      В случае, если номер дискового накопителя  отличен  от
      0, добавляется еще один параметр:

      оператор> rk(N,0)rkdemos r=rkN
                hk(N,0)hkdemos r=hkN
                rp(N,0)rpdemos r=rpN

      Должно выдаться сообщение:

      MEM=xxKW  AVAIL MEM=yyKW

      где xx - об'ем оперативной памяти, yy - об'ем  памяти,
      отведенной  под  процессы  прользователей. После этого
      запустится командный файл "startprof", который автома-
      тизирует дальнейшие действия по настройке системы. При
      работе этого файла установлены следующие режимы терми-
      нала:
       - отмена символа - <забой>;
       - отмена строки - <УПР>U;
       - прервать команду - <УПР>C.

      Такие режимы устанавливаются командой "stty dec".

    Настройка   системы   с   помощью    командного    файла
 "startprof",  (который  вызывается автоматически при первом
 входе в систему) возможна в случае, если используется стан-
 дартный  вариант размещения системы на дисках (в частности,
 при первой постановке системы). В  этом  случае  необходимо
 ответить с терминала на следующие вопросы системы:

 Do you want a help(y/n)?
    Стандартный ответ - "y". При ответе "n"  стартовый  файл
    "startprof" выполняться не будет

 Есть ли на терминале строчные буквы?
    Oтвет 'y' (буква 'y' и 'возврат каретки'), если консоль-
    ный  терминал  имеет и строчные и прописные буквы, иначе
    ответ 'n'.

 Введите дату и время:ггммддччмм
    В ответ надо ввести дату и время в формате:

     <год><месяц><день><часов><минут>

    (по две цифры на  каждое  значение,  подряд).  Например:






                             38






    8509192130.

 Есть ли на терминале русские буквы?
    Ответ 'y', если на  консольном  терминале  есть  русские
    буквы, и 'n' в противном случае.

 Введите тип терминала:
    Запрашивается сокращенное название, под которым термина-
    лы  такого  типа  известны  в  системе; список возможных
    типов выдается перед этим вопросом на терминал. Наиболее
    распространенными  ответами  являются  "vta2t3"  для ВТА
    2000.3,    "el15ie"    для    терминалов    "Электроника
    15-ИЭ-0013",  "vt52k"  для различных терминалов "Мера" и
    "Видеотон", совместимх с терминалами "VT-52" фирмы DEC и
    имеющих  русские буквы. Возможности терминалов различных
    типов описаны в системе в файле "/etc/termcap",  и  вве-
    денное название должно быть одним из названий, имеющихся
    в этом файле. Эта информация используется для  настройки
    системы  на тип терминала и, в частности, для правильной
    работы экранного редактора.

 Введите тип диска с корневой системой:
    Запрашивается тип системного диска, ответом должно быть:
    "rk"  для  дисков  СМ-5400,  "hk" для дисков СМ-5408 или
    "rp" для ЕС-5061. Тип дисков используется при записи в 0
    блок  системного  диска начального загрузчика и для пра-
    вильной настройки стартовых файлов.

 Отвечайте 'y', чтобы уничтожить файл:
    Если система поставлена на диски СМ-5400, то  для  осво-
    бождения  места  на системном диске предлагается уничто-
    жить файлы, не нужные для работы на этих  дисках.  Отве-
    чайте  'y'  на предлагаемые имена файлов, если только не
    предполагается вызывать систему с дисков другого типа.

 Введите имя варианта системы:
    В системе предполагается, что стандартно вызывается  ва-
    риант  системы  по имени "demos". Если в ответ на запрос
    вводится имя вызванного варианта ядра, этот вариант  пе-
    реименовывается в "demos". При первой постановке системы
    отвечайте "rkdemos", "hkdemos" или "rpdemos", в  зависи-
    мости от типа дисков.

    На следующем шаге производится считывание с ленты  спра-
 вочника   "/usr".   В   случае   работы   командного  файла
 "startprof" эта операция  также  проводится  автоматически;
 необходимо только ответить на следующие вопросы системы:

 Введите номер устройства, отведенного под usr:
    Этот вопрос задается только в случае дисков  "rk".  Диск
    должен быть сформатирован и установлен заранее. Ответ на
    вопрос - номер устройства (от 0 до  7).  При  выполнении
    этой  процедуры  задается  также  вопрос о том, нужна ли






                             39






    отбраковка плохих блоков (стандартный ответ -  'n').  На
    указанном  диске будет создана пустая файловая система и
    смонтирована под именем "/usr". В случае дисков "rp" или
    "hk"  справочник  "/usr" будет записан непосредственно в
    корневую файловую систему.

 Введите номер магнитофона и номер файла:
    Необходимо указать номер  магнитофона  с  дистрибутивной
    лентой, а затем номер файла (считая от 0), в котором за-
    писан на этой ленте справочник "/usr". В описываемом ва-
    рианте  дистрибутива в качестве номера файла указывается
    "7". В соответствие с этой информацией справочник "/usr"
    будет прочитан с ленты и записан на место.

    Если все прошло нормально,  по  окончании  работы  файла
 "startprof" ОС ДЕМОС будет настроена на консольный терминал
 и на тип системного диска. Система выдает приглашение  "#",
 и Вы можете работать, используя руководство программиста по
 ОС ДЕМОС. При этом система находится в однопользовательском
 режиме, в частности, не выполняется периодический сброс бу-
 феров, что вынуждает работать очень осторожно  и  использо-
 вать команду "sync".

    В случае, если автоматическая настройка  по  каким  либо
 причинам  не  удалась, выполните настройку вручную, как это
 описано в разделе "Ручная настройка системы", иначе перехо-
 дите  к считыванию остальных материалов и печати инструкций
 (если это необходимо).

 П_Р_Е_Д_У_П_Р_Е_Ж_Д_Е_Н_И_Е.
    При  работе  в  однопользовательском  режиме  необходимо
    перед  выключеним системы выполнять команду "sync", пос-
    кольку в таком режиме автоматической записи  буферов  на
    диск  не  происходит.  Еще лучше в этом режиме выполнять
    "sync" после каждой операции, в процессе которой изменя-
    лись  какие-либо  файлы.  В многопользовательском режиме
    желательно выполнять команду  "sync"  перед  выключением
    системы.

 4.1.4. Продолжение постановки ОС ДЕМОС


    После  предварительной  настройки  системы,  выполненной
 вручную либо при помощи командного файла "startprof" систе-
 ма готова к эксплуатации и может работать с минимальным на-
 бором  устройств,  предусмотренных  в базовой версии: диски
 одного  типа  (СМ-5400,  СМ-5408  или  ЕС-5061),  ленты  (4
 устройства),  одно печатающее устройство, консольный терми-
 нал. В базовой системе предусмотрено также обслуживание че-
 тырех терминалов, подключенных через параллельный интерфейс
 ИРПР или через АДС с адресами и векторами:

  tty1 - 0776500 300






                             40






  tty2 - 0776510 310
  tty3 - 0776520 320
  tty4 - 0776530 330

 Для того, чтобы система начала работать на   этих  термина-
 лах,  нужно  включить их в список терминалов, обслуживаемых
 системой "/etc/ttys", а  также  указать  их  типы  в  файле
 "/etc/ttytype".   Быстрее   всего  это  сделать  редактором
 текстов, но при первой  постановке  системы  целесообразнее
 воспользоваться  командой  "/etc/help" (пример приведен для
 tty1):

 оператор> cd /etc
 система-> #
 оператор> help
 система-> Введите вид работы?
 оператор> addtty
 система-> Введите имя терминала:
 оператор> tty1
 система-> Введите тип терминала
     - дается список типов
 оператор> <тип> - вводит условное
                название подключаемого
                терминала
 система-> Верно(y/n)?
 оператор>    y
    - система редактирует файлы
      ttys и ttytype
 система-> Введите вид работы?
 оператор> exit
 система-> #

 Остальную работу (печать  инструкций,  настройку  некоторых
 трансляторов  и программ, перегенерацию ядра системы) лучше
 проводить в нормальном - многопользовательском режиме рабо-
 ты системы. Для перехода в такой режим из однопользователь-
 ского вводится <УПР>D - признак конца файла. Система выпол-
 нит  командный  файл "/etc/rc", в котором содержится чистка
 рабочих файлов, инициализация  некоторых  таблиц,  опрос  и
 монтирование дисков (насколько это можно было предусмотреть
 в дистрибутивной системе), запуск команды сброса буферов  -
 "/etc/update", и, если все было нормально, на терминалы вы-
 дается приглашение начать работу:

 ОС ДЕМОС (Версия <номер>)
 Login:

 Теперь можно вводить  имя  пользователя  и,  после  запроса
 "Passwd:", пароль. Для входа в супер-пользователя использу-
 ется имя "root" и пароль "root", для  работ,  не  требующих
 бесконтрольного  доступа  к устройствам, лучше использовать
 имя "sys" (пароль "sys").







                             41






    Если у вас нет комплекта документации по системе,  целе-
 сообразно  сразу же начать распечатку самых необходимых до-
 кументов (см. следующий раздел). В противном  случае  лучше
 сначала проверить вызов системы с диска, для чего нужно:

  - ввести "sync" и затем остановить машину;

  - загрузить аппаратным загрузчиком 0 блок системного диска
    (в  случае  СМ-5408  и  ЕС-5061  диск  должен  стоять на
    устройстве 0);

     система-> @


  - если машина выключалась, росписать память командой:

     оператор> mdec/ozu
     система-> OK
               @


  - вызвать загрузчик "boot":

     оператор> boot
     система-> BOOT (V. 1.0)
               :

  - вызвать ОС ДЕМОС:

     оператор> rk(N,0)demos r=rkN
              - в случае
              дисков СМ-5400, N -
              номер системного диска
              (при N=0 r=.. можно не
              указывать)


  - Должно выдаться сообщение о  наличной  памяти,  а  затем
    будет  выполняться  командный файл "/.profile" (проверка
    корневой файловой системы и выдача приглашения  войти  в
    монопольный  режим).  Если  в  ответ  на  "login" ввести
    <УПР>D, выполнится командный файл  "/etc/rc"  и  система
    перейдет в многопользовательский режим работы.
















                             42






 4.1.5. Считывание с лент остальной информации


    После установки базовой версии ОС  ДЕМОС  предстоит  еще
 прочитать  с  ленты  остальную информацию по системе, в том
 числе:

  - материалы для генерации системы "/mnt/sys";

  - руководство пользователя "/mnt/man", которое  также  ис-
    пользуется в командах "man" и "help";

  - остальную   документацию    по    системе    (справочник
    "/mnt/doc).

    При работе на дисках  СМ-5400  каждый  из  перечисленных
 справочников  занимает  по отдельному диску. Для считывания
 материалов диск необходимо сформатировать, создать  на  нем
 пустую  файловую  систему, смонтировать под нужным именем и
 считать на него  соответствующий  архив  с  ленты  командой
 "tar":

  - Установите сформатированный диск  на  свободное  устрой-
    ство;

  - создайте пустую файловую систему  (в  примере  буквой  N
    обозначен номер устройства):

     система-> #
    оператор>  /etc/mkfs /dev/rrkN 4872
          либо, если на диске
          есть дефектные блоки:
              /etc/mkfs /dev/rrkN 4872 x
    система-> isize=xxx
              m/n=x/y
              #


  - промаркируйте  диск  для  автоматического   монтирования
    программой "automou":

    оператор-> /etc/mark /dev/rkN /mnt/имя
     где имя - sys, man, doc, или другое
     имя
    система-> #
    оператор>  sync


  - затем смонтируйте диск командой "automou:










                             43






    оператор> /etc/automou /dev/rkN
    система-> fsck -p /dev/rrkN
       сообщение о размере файловой системы
             mount /dev/rkN /mnt/имя
            #


  - Установите ленту на начало считываемого файла, используя
    команду "mt", которая имеет следующий вид:

     mt -t /dev/nrmtT оп Число
     где T - номер магнитофона;
         оп - операция.
      здесь могут понадобится следующие
      операции:
           rew - перемотать на начало,
           fsf - вперед на файл,
           bsf - назад на файл,
        Число - количество повторений
                операции.

    Например, установить ленту на магнитофоне  1  на  начало
    файла  8  (справочник  "sys"  на  дистрибутивной  ленте)
    можно, набрав команды:

     mt -t /dev/nrmt1 rew
     mt -t /dev/nrmt1 fsf 8


  - Прочитать файлы с ленты командой "tar". Для того,  чтобы
    файлы записались на нужный диск, необходимо, чтобы теку-
    щий справочник размещался на этом диске либо чтобы имена
    файлов  начинались с имени справочника, на который смон-
    тирован диск. Имена файлов на дистрибутивной ленте начи-
    наются  с  "usr",  "sys",  "man",  "doc" соответственно.
    Поэтому   для    считывания,    например,    справочника
    "/mnt/sys", необходимо:

     - смонтировать диск под именем /mnt/sys
       (см. выше)

     - перейти в справочник /mnt:
           cd /mnt

     - подвести ленту к началу файла (см. выше);

     - считать архив командой "tar":
           tar xfiv /dev/nrmtT
       (здесь Т - номер ленты)

    Будут выдаваться имена считываемых  файлов  в  форме  "x
    имя_файла".  Если  была допущена ошибка и считываются не
    те файлы, команду "tar" можно остановить, набрав "<СУ>C"






                             44






    (или  <Забой>,  если  не выдавалась команда "stty dec"),
    стереть ненужные файлы можно командой "rm список  имен".
    В  конце  работы  команды  "tar" лента остановится перед
    меткой конца считанного файла, и для перехода на  начало
    следующего файла достаточно выдать команду:

           mt -t /dev/nrmtT fsf


  - Если диск необходимо снять,  его  прежде  всего  следует
    размонтировать:

           /etc/umount /dev/rkN

    и если эта операция прошла успешно  (не  было  сообщений
    типа  "/dev/rkN buzy", и диск не выдается в списке смон-
    тированных, который можно получить по  команде  "mount",
    его можно снимать.

    На дисках большей емкости вся  оставшаяся  информация  с
 лент считывается во вторую часть системного диска. Для это-
 го необходимо:

  - создать на второй части диска файловую систему, если это
    еще не сделано:

     - для дисков СМ-5408:
     /etc/mkfs /dev/rhk0b 17120 [x]
     /etc/mark /dev/hk0b /mnt

     - для ЕС-5061:
     /etc/mkfs /dev/rrp0b 30600 [x]
     /etc/mark /dev/rp0b /mnt

    (параметр "x" указывается, если при форматировании диска
    были   обнаружены  плохие  блоки  с  номерами,  большими
    10000). Затем созданная файловая система монтируется под
    именем "/mnt":

     /etc/mount /dev/dd0b  /mnt
     -  здесь dd - "rp" или "hk"


  - Далее требуется подвести ленту на начало нужного файла и
    вызвать  команду  "tar",  так  же,  как  это делается на
    дисках СМ-5400.













                             45






 4.1.6. Печать документации по системе


    При первоначальной постановке системы прежде всего нужно
 напечатать  документацию  с  ленты  (если  у Вас нет типог-
 рафского экземпляра). Документация разделена на две части -
 справочник  "/mnt/man" содержит оперативную документацию по
 системе (она используется в командах "man" и "help" и явля-
 ется также первой частью руководства программиста), а спра-
 вочник "/mnt/doc" - остальную документацию, в том  числе  и
 данное руководство. Краткий список разделов оперативной до-
 кументации можно найти в файле "/usr/lib/whatis". Для печа-
 ти  в системе служит команда "print" (на самом деле это ко-
 мандный файл), которая в базовой версии настроена на прямую
 (без   буферизации)  печать  с  выделением  прописных  букв
 трехкратным наложением. Параметры этой команды совпадают  с
 параметрами команды "pr", изменить ее можно, отредактировав
 текстовым редактором файл "/usr/bin/print".

    Для печати соответствующего раздела оперативной докумен-
 тации необходимо:

  - считать с ленты справочник "/mnt/man" (в  случае  дисков
    СМ-5400 на отдельный диск);

  - войти в справочник и напечатать соответствующие описания
    командой "print". Получить список файлов можно с помощью
    команды "ls":

     cd /mnt/man
     ls cat*

    В справочниках "/mnt/man/cat[1-8]" размещаются сформати-
    рованные  описания, а в справочниках "/mnt/man/man[1-8]"
    - несформатированные. Для печати, например, всего разде-
    ла 8 (сопровождение системы) служит команда:
     print -2 -t cat8/*

     параметры означают следующее:
     -2 - печать в 2 колонки;
     -t - не печатать имена файлов;
     cat8/* - все файлы из cat8.

    Для выборочной печати явно указывается список  описаний,
    например:

     cd /mnt/man/cat1
     ls
     print -2 -t ls.1 mt.1 tar.1

    - печать описания команд "ls", "mt", "tar".

    Для печати  остальных  документов  необходимо  прочитать






                             46






 справочник  "/mnt/doc",  найти  в  нем  нужный  документ  и
 набрать команду "print":

  cd /mnt/doc
  ls
  - система выдаст список файлов;
  print -2 -t имя_файла

 Уточнить список документов, имена файлов и  команду  печати
 можно, просмотрев файл "/mnt/doc/readme":

  cat /mnt/doc/readme
  - или
  print /mnt/doc/readme


    Остальную работу по системе целесообразно проводить лишь
 после подробного изучения документации.

 4.1.7. Ручная настройка системы


    В этом разделе описано, как настроить систему, не  поль-
 зуясь  командным  файлом  "startprof". При первой установке
 системы, если файл "startprof" проработал без ошибок,  этот
 раздел можно пропустить.

 1)   В первую очередь нужно задать режим работы  терминала,
      наберите:

      stty [-lcase] [cyrill]  [erase
              <ке> kill <kk>]  [dec]

      (квадратные скобки отмечают необязательные параметры).
      Здесь:

      -lcase
         указывается,  если  на  терминале  есть  малые  ла-
         тинские буквы;

      cyrill
         указывается, если на терминале есть русские буквы;

      erase <символ> kill <символ>
         параметры задают, если нужно изменить умолчания для
         символов "отмена символа" ("erase") и "отмена стро-
         ки" ("kill");

      dec
         параметр устанавливает символы "kill" и  "erase"  в
         соответствии  с  принятыми в системах РАФОС и ОС РВ
         (отмена символа - "забой", отмена строки -  <УПР>U,
         прекращение программы - <УПР>C).






                             47






    В режиме "cyrill", если нет малых букв, малые буквы вво-
 дятся  на русском регистре, а большие - на латинском. Боль-
 шие буквы и специальные символы "черта", "фигурные  скобки"
 и  др.  отображаются парой символов, а для перехода в режим
 ввода русских или латинских букв используются  коды  <УПР>N
 (ввод русских букв) и <УПР>O (ввод латинских букв). Если на
 терминале нет ни русских, ни малых букв, для ввода  пропис-
 ных букв предварительно вводится символ <обратная черта>.

 2)   Далее необходимо ввести дату:

      система-> #
      оператор>  date ггммддччии

      где "гг" - год, "мм" - месяц, "чч" - час, "ии" - мину-
      ты (по 2 цифры). Работа с неверным временем может при-
      вести к тому, что вы не сможете сгенерировать систему.

 3)   Следующий этап - предварительная настройка системы.

       - переименуйте вашу версию ядра ОС в "/demos":

         mv /<имя> /demos

         где <имя> - rkdemos, rpdemos или hkdemos в  зависи-
         мости от типа используемых дисков.

       - Переименуйте заготовку стартового командного  файла
         /xxprofile в /.profile:

         mv /xxprofile /.profile

         где xx - тип вашего диска (rk, hk, rp). На  больших
         дисках,  если  размер  файловых систем больше 20000
         блоков, при проверке используется файл "/buffsck".

       - запишите в 0 блок диска начальный загрузчик  систе-
         мы:

         cd /mdec
         make xx
         sync
         # xx - код диска: rk, hk, rp


       - Проверьте получившуюся файловую систему:

         cd /etc
         sync
         fsck -t /buffsck /dev/root

         Если  fsck  что-либо  изменял  (диагностика   "file
         system  was  modified"),  перевызовите  систему, не






                             48






         набирая "sync".

       - При работе на дисках СМ-5400 уничтожьте файлы,  ко-
         торые  вам  не понадобятся; сюда относятся варианты
         ядра  для  других  типов  дисков  и   рабочий  файл
         "/buffsck":

         rm rpdemos hkdemos ??profile buffsck


 4)   Настройте систему на тип  консольного  терминала.  Для
      этого  посмотрите  начало файла "/etc/termcap" (напри-
      мер, используя команду "cat  /etc/termcap"  и  набирая
      символ  "пробел" для продолжения выдачи) и найдите там
      описание вашего типа терминала (см. комментарии в  на-
      чале этого файла). Затем введите этот <тип> в систему:

       ed /etc/ttytype
       /console/c
       <тип> console
       .
       w
       q


 5)   Следующий этап - восстановление второй части системно-
      го архива. Вызовите систему (если она еще не вызвана),
      войдите в супер-пользователя (имя  -  root,  пароль  -
      root).

         Если вы размещаете справочник "/usr"  на  отдельном
      диске  или куске диска, то установите этот диск и соз-
      дайте на нем пустую файловую систему, а затем  промар-
      кируйте его. Например, для диска rk2 это выглядит так:

      cd /etc
      mkfs /dev/rrk2 4872
      mark /dev/rk2 /usr
      sync

      Теперь на диске есть пустая файловая  система,  и  при
      переходе  системы в многопользовательский режим работы
      он будет монтироваться командой "automou" на  справоч-
      ник "/usr". Смонтируйте его  на "/usr":

              mount /dev/rk2 /usr


         Теперь у вас есть пустой справочник "/usr", и в нем
      достаточно  места  для второй части системы. Подведите
      ленту к файлу с копией диска "/usr" командой mt:








                             49






      mt -t /dev/nrmt0 rew
      mt -t /dev/nrmt0 fsf M

      где M - номер файла на ленте, а /dev/nrmt0 - имя  лен-
      точного  устройства. (в данном варианте дистрибутивной
      ленты M=7). Перейдите в справочник  "/"  и  прочитайте
      справочник "/usr" с ленты командой "tar"

      cd /
      tar -xvif /dev/nrmt0

      (x - читать, v - протокол, i - продолжать при ошибках,
      f - дальше следует имя ленты).

         Чтение займет 10-20 минут, причем на терминал будут
      выдаваться  имена  считываемых  файлов.  Чтение  можно
      прервать,  нажав  клавишу  "забой"  (del)  или  <УПР>C
      (если была выполнена команда "stty dec").

              4.2. Реконфигурация ядра ОС ДЕМОС


    Поставляемые вместе с базовой версией  системы  варианты
 ядра  ОС  обеспечивают работу вычислительной установки име-
 ющей: дисковый контроллер, АЦПУ, консоль, магнитные ленты и
 4  непосредственно  подключенных  терминала (ИРПР или АДС),
 причем адреса  и  вектора  устройств  предполагаются  стан-
 дартными. Если требуется настроить систему на работу с иным
 комплектом или иным продключненем внешних устройств,  необ-
 ходимо провести реконфигурацию ядра (генерацию системы).

    Для генерации ОС ДЕМОС  предназначен  справочник  "sys".
 Подробное  описание  справочника  будет  дано ниже, а здесь
 опишем простейшую процедуру генерации, которая  может  ока-
 заться достаточной на первое время.

    Войдите в систему либо под именем "sys" (пароль  "sys"),
 либо   как   супер-пользователь.   Смонтируйте   справочник
 /mnt/sys, если он находится на отдельном диске,  войдите  в
 справочник "sys/conf" и наберите "Help":

 cd /mnt/sys/conf
 Help

 Будет выдана  подсказка  о  том,  как  провести  генерацию.
 Полезно также просмотреть файлы "History" и "Readme", в ко-
 торых записана информация о последних изменениях в системе.

    Для генерации ядра ОС ДЕМОС  необходимо  сделать  следу-
 ющее:









                             50






 1)   Опишите конфигурацию установки (набор устройств  и  их
      расположение,  то  есть  адреса и вектора), размещение
      корневого справочника и области  подкачки  на  дисках.
      Описание  помещают  в  файл  под именем "confxxx", где
      "xxx" - произвольная последовательность символов. Спи-
      сок  возможных  параметров и устройств имеется в файле
      "conf_full", а в качестве образца можно взять один  из
      файлов  "rkconf",  "rpconf"  или  "hkconf". Для записи
      описания в файл используется  редактор  текстов  ("ed"
      или "red"), в крайнем случае можноиспользовать команду
      "cat":

       cat >confxx
       описание
       <УПР>D



        Пример описания конфигурации

   # Это - пример комментария
   # Комментарии можно и не вводить
   # Формат описания:
   # <устройство> [<кол. контроллеров>]
   # [<вектор> <адрес>]
   # если стандартные, то мoжно
   # не указывать
   # Указание устройства подкачки и root
   root rk 0 # корневой справочник
   swap rk 0 # устройство для подкачки
   # Положение области подкачки и ее размер
   swplo 3100     # смещение
   nswap 1772     # размер
    rk            # ИЗОТ 1370
    lp            # АЦПУ - до 8 штук : lp n
    pc            # перфоленточная станция
    kl 4          # терминалы ИРПР - до 16
   0300 0176500   # вектора и адреса по
   0310 0176510   # умолчанию
   0320 0175610   # АДС - СМ 4
   0330 0175620   #
   tm             # магнитные ленты
   dj             # мультиплексор МПА-1
   0340 0160010   #
   parity         # Контроль памяти

             Рис. 4



 2)   Выполните команду  "Setpar" и с ее помощью просмотрите
      и проверьте параметры ЭВМ и режимы работы системы. Эта
      команда используется для изменения параметров системы,






                             51






      и работает в режиме диалога. При первой генерации сис-
      темы лучше не изменять ничего, кроме типа  ЭВМ  (ответ
      "_SM_4, _SM_1600 или _SM_1420 на вопрос "Enter type of
      computer:".

 3)   Настройте команду "make" на файл  описания  конфигура-
      ции:

      myconf confxxx
      # confxxx - файл с
      #           описанием конфигурации.


 4)   Проверьте конфигурацию:

      make check


 5)   Убедитесь в том, что в справочниках  /tmp  и  /mnt/sys
      достаточно места для генерации системы (нужно примерно
      300 блоков в /tmp и 500 на диске /mnt/sys:

      df /dev/root
      df


 6)   Запустите сборку системы командой "make":

      make demos

      или, если вы хотите получить протокол сборки в  файле,
      то

      dodo demos

      (команда "dodo" - это командный файл, который вызывает
      "make"   в фоновом режиме и записывает протокол работы
      в файл "a").

 7)   Проверьте размер полученной версии системы (он выдает-
      ся  в  конце работы "make"). Размер памяти, занимаемой
      ядром, не должен  превышать  0140000b  (восьмеричных).
      Затем нужно набрать "sync" и, перезагрузившись, прове-
      рить работу новой версии ОС, вызвав ее непосредственно
      с  диска "sys" из справочника "conf". Если у вас спра-
      вочник "sys", например, располагается на диске  "rk3",
      то вызов новой системы на СМ-4 будет выглядеть так:












                             52






      <останов>
      <пуск>
      @boot
      Boot
      :
      rk(3,0)conf/demos


 8)   Старую  версию  системы  лучше  переименовать,  (сразу
      уничтожать  ее  нежелательно), а новая записывается на
      место:

      su
      passwd: root
      # нужно войти в
      # привелегированный режим
      mv /demos /olddemos
      cp /mnt/sys/conf/demos /demos


    В случае затруднений можно запросить подсказку  командой
 "Help", в сложных случаях придется изучить подробное описа-
 ние генерации.

 4.2.1. Язык описания конфигурации


    Описание конфигурации записывается редактором текстов  в
 файл "confxxx" (здесь "xxx" - произвольный текст). Описание
 состоит из ряда разделов, каждый из  которых  начинается  с
 новой  строки.  В  качестве образца можно использовать файл
 "conf_full".

    Описание разделов.

 Обязательные разделы:

 root <устройство> <номер>
 swap <устройство> <номер>


  - Определяется расположение корневой  файловой  системы  и
    области  подкачки.  <устройство> обозначает тип дисков и
    может быть одним из следующих: rk, hk, rp, rm,  rl,  для
    дисков  СМ-5400  (ИЗОТ-1370),  СМ-5408, ЕС-5061 и дисков
    фирмы DEC соответственно.

    swplo <номер блока>
    nswap <число блоков>










                             53






  - задает начало и размер области подкачки (числа  десятич-
    ные).

 Необязательные разделы:

         parity


  - задает реакцию на прерывание по  ошибке  памяти  (вектор
    0114);

            tty


  - включить псевдоустройство "/dev/tty" для доступа  к  уп-
    равляющему терминалу.

            Описания устройств.


    Описание устройства имеет следующий формат:

    <имя устройства> [<число контроллеров>]
    [<вектор> <адрес>]
    [<вектор> <адрес>]

    (*1)

 <имя устройства>
    условное обозначение устройства;

 <число контроллеров>
    число контроллеров, причем в случае терминалов,  подклю-
    ченных  напрямую, или АЦПУ каждый терминал или АЦПУ счи-
    тается контроллером, так как  имеет  отдельный  адрес  и
    вектор прерывания. По умолчанию число контроллеров равно
    1.

 <вектор> <адрес>
    вектор прерывания и адрес на общей шине. Задаются,  если
    размещение устройства нестандартно, или если использова-
    ны плавающие адреса или вектора.

    Далее приводится список устройств, обслуживаемых  систе-
 мой, и их обозначения. Адреса и вектора устройств, принятые
 по умолчанию, можно узнать, напечатав файл "conf_full"; там
 же указано максимальное число контроллеров.
__________________________

(*1)Здесь, как и во всем описании, в квадратные скобки взяты
   необязательные  разделы,  а  в угловые заключены основные
   понятия, раскрываемые ниже.







                             54






 kl - терминалы с интерфейсом ИРПР  или  подключенные  через
    АДС  (адаптер  дистанционной связи). Консольный терминал
    описывать не надо. В случае АДС необходимо явно  указать
    адреса и вектора устройств.

 lp - печатающее устройство.

 pc - перфоленточная станция СМ-6202.

 dj - мультиплексор МПА-1.

 dh - асинхронный мультиплексор СМ-8514.

 dm - управление модемами, работает вместе с "dh".

 rk - диски ИЗОТ-1370 (СМ 5400).

 hk - диски СМ-5408, 14 мбайт.

 rp - диски ЕС 5061, 29 мбайт.

 rm - диски фирмы DEC.

 rl - диски фирмы DEC.

 rx - гибкие диски СМ-5603 (два привода на контроллер).

 4.2.2. Специальные файлы ОС ДЕМОС


    После генерации и проверки ядра ОС  заводят  специальные
 файлы  в  справочнике "/dev", которые обеспечивают доступ к
 внешним устройствам. Для создания  специальных  файлов  ис-
 пользуется команда "/etc/mknod":

 /etc/mknod <тип> <major> <minor>

 где:

 <тип>   - буква "c" для байт-ориентированного устройства  и
           "b"   для   блок-ориентированного.  Заметим,  что
           "прозрачный" доступ к дискам и лентам осуществля-
           ется через "байт-ориентированные" устройства.

 <major> - номер драйвера. Его можно узнать из выдачи коман-
           ды "make check".

 <minor> - код устройства, передаваемый  драйверу.  Содержит
           номер  устройства,  может  содержать  также номер
           куска диска и разные признаки (например,  признак
           "не  перематывать ленту на начало" для ленточного
           драйвера). Подробно см. "Руководство  программис-
           та",  часть  5.  Например,  для  дисков СМ-5408 и






                             55






           ЕС-5061 значение "minor" определяется так:

            minor=N*8+K

            где N - номер устройства,
                K - номер куска на диске.


    Имена устройств в принципе произвольны, однако  в  прог-
 раммах ОС ДЕМОС принят ряд соглашений о именах, и необходи-
 мо их придерживаться. Для создания специальных файлов реко-
 мендуется использовать команду "make":

 cd /dev
 make <имя устройства>

 В  команде  "make"  допускаются  следующие  значения  имени
 устройства:

 basic
    создание базового набора устройств (console,  tty,  mem,
    kmem, root). В дистрибутивной версии системы эти устрой-
    ства уже созданы.

 tty?
    создание непосредственно подключенных терминалов, опиан-
    ных  при  генерации  как устройства "kl". "?" обозначает
    здесь номер терминала, например:

     make tty1 tty2


 lp печатающее устройство. Если таких  устройств  несколько,
    то  вместо  "lp"  нужно использовать имена "lp0", "lp1",
    ...

 dh dj
    создание устройств для доступа к терминалам,  подключен-
    ным через соответствующий мультиплексор;

 rk rp hk rx
    создание специальных файлов для доступа к  дискам  соот-
    ветствующего типа. В случае дисков "rp" и "hk" создаются
    также устройства для доступа к первой  ии  второй  части
    диска  ("hkNa", "hkNb", например). Во всех случаях будут
    созданы специальные файлы как для буферизованного  обме-
    на,  так  и  для "прозрачного" доступа к дискам (имена с
    префиксом "r");

 mt доступ к магнитным лентам. Для каждого устройства с  но-
    мером N (от 0 до 4) создаются специальные файлы с имена-
    ми "mtN" (буферизованный обмен), "rmtN"  (небуферизован-
    ный обмен), "nmtN" и "nrmtN" (доступ без перемотки ленты






                             56






    на начало при закрытии устройства);

    Команда make создает  соответствущие  специальные  файлы
 для доступа к указанным  в ней устройствам.

    Устройства желательно проверить. Для проверки терминалов
 на  них  выдают  какой либо текст с помощью команды "echo",
 для проверки дисков  можно  распечатать  содержимое  первых
 блоков командой "od".

 4.2.3. Настройка командных файлов ОС ДЕМОС


    После генерации ядра и создания устройств остается окон-
 чательно настроить на конфигурацию системы командные файлы,
 работающие при запуске, и отредактировать некоторые систем-
 ные описания. Примерный список действий по настройке:

  - отредактировать файл /etc/rc, изменив набор опрашиваемых
    дисков в параметрах команды "automou", при необходимости
    добавить запуск команды "/etc/cron";

  - отредактировать файлы /etc/rc и /.profile в соответствии
    с  типом консольного терминала (убрать параметр "lcase",
    если на терминале есть малые латинские буквы);

  - если справочник "/tmp" размещается на  отдельном  диске,
    то  целесообразно создавать его заново каждый раз, когда
    в нем обнаружатся ошибки. Это может выглядеть так:

    if /etc/fsck -p /dev/rrk3
    then
    #
    else
    /etc/mkfs /dev/rrk3 3000
    fi
    mount /dev/rk3 /tmp


  - отредактировать списки терминалов, обслуживаемых  систе-
    мой,  и  их  типы  (файлы /etc/ttys и /etc/ttytype), см.
    раздел "подключение терминалов";

  - отредактировать файл  "/etc/securetty"  -  список  адми-
    нистраторских  терминалов,  с  которых  возможен  непос-
    редственный вход в супер-пользователя;

  - отредактировать  список  пользоватеолей,  ввести   новых
    пользователей и завести для них каталоги;

  - отредактировать команду "/usr/bin/print", если для выда-
    чи  на  печать предполагается использовать команду "lpr"
    (выдача на печать с буферизацией).






                             57






  - создать пустые файлы статистики, если предполагается со-
    бирать статистику.

  - настроить на тип ЭВМ Фортран-4 (справочник "/usr/fort"),
    Фортран-77   (справочник   "/usr/f77lib").  Действия  по
    настройке описаны в файлах "readme" в указанных справоч-
    никах.

 4.3. Более подробная информация о генерации  и настройке ОС


    Выше была описана  генерация  системы  методом  "черного
 ящика",  то есть описание действий без их расшифровки. Ниже
 процесс генерации описан более подробно, вместе с описанием
 более тонкой настройки ОС ДЕМОС на условия эксплуатации.

 4.3.1. Структура справочника /mnt/sys


    На диске "/mnt/sys" размещены исходные тексты ОС, библи-
 отеки,  программы для генерации ОС, а также некоторые мате-
 риалы, не относящиеся непосредственно к  ядру  операционной
 системы.  Файлы,  необходимые  для генерации ОС, занимают 4
 справочника:

 h    - файлы вставок для операторов "#include";

 sys  - тексты ядра и библиотека об'ектных модулей LIB1;

 dev  - тексты драйверов и библиотека модулей LIB2;

 conf - материалы для сборки ядра, описания  конфигурации  и
        локальные   параметры.  Кроме  того,  в  справочнике
        conf/archiv имеется файл  m.h.el79,  который  должен
        быть записан вместо "conf/m.h" при генерации системы
        на Электронике-79.

    Справочник "stand" содержит тексты  и  библиотеки  прог-
 рамм,  используемых при считывании ОС  с транспортной ленты
 и  работающие  без  операционной  системы  (так  называемые
 "stand-alone" программы).

    Справочник "h79" содержит файлы вставок со  стандартными
 параметрами системы для ЭВМ Электроника-79.

    Справочник "mdec" содержит программы начальной  загрузки
 ОС, которые записываются в 0 блок системного диска.

    Справочник "cmd" содержит  тексты нескольких команд  ОС,
 на  которые есть ссылки из справочника "stand" либо которые
 существенно используют информацию  о  внутренней  структуре
 операционной системы.







                             58






 4.3.2. Сборка ядра ОС ДЕМОС


    Ядро ОС ДЕМОС является единственной компонентой системы,
 работающей  в  привилегированном режиме. Оно собирается ре-
 дактором связей ld из следующих объектных модулей:

  - модуль l.o загружается с адреса 0 и содержит  переключа-
    тель прерываний;

  - модуль smch.o (или mch.o в случае  Электроники-79),  со-
    держит подпрограммы на языке ассемблера;

  - модуль c.o, в котором определяются таблицы  устройств  и
    расположение корневой файловой системы и области подкач-
    ки;

  - системные подпрограммы;  они  находятся  в  библиотечном
    файле ../sys/LIB1; (*1)

  - драйверы устройств; записаны в библиотеке ../dev/LIB2.

    Файлы l.o и c.o транслируются из файлов l.s и c.c, кото-
 рые  в  свою очередь генерируются командой mkconfig в соот-
 ветствии с файлом описания конфигурации системы.

    Конфигурация ядра системы задается в  текстовом  виде  в
 файле  конфигурации,  который затем обрабатывается командой
 "mkconfig", а редко изменяемые параметры системы описывают-
 ся   с  помощью  оператора "#define" в файлах вставок: m.h,
 ../h/param.h, Для изменения  таких  параметров  без  перет-
 рансляции всей системы служит команда "Setpar".

    Команда "mkconfig" читает описание конфигурации и созда-
 ет  файлы  c.c  и l.s, а также для всех драйверов устройств
 просматривает файлы ../dev/<имя>.h, (где <имя> - имя  драй-
 вера),  в  которых  содержатся таблицы адресов устройств, и
 при необходимости эти файлы  приводятся  в  соответствие  с
 описанием конфигурации.

    Файл l.s содержит переключатель прерываний. Для  каждого
 вектора прерываний записывается 2 слова:

 <подпр.обработки>;<приоритет>+<номер>

 Подпрограмма обработки сохраняет регистры  и  переходит  на
 соответствующую Си-подпрограмму.

__________________________

(*1)В этом разделе имена  справочников  даются  для  случая,
   когда текущим является справочник "/sys/conf".







                             59






    Файл c.c содержит две таблицы устройств:  таблицу  блок-
 ориентированных  устройств  и  таблицу байт-ориентированных
 устройств. Номер строки в таблице определяется главным  но-
 мером  устройства  (major) в системе. Каждая строка таблицы
 блокориентированных устройств содержит 4 элемента,  которые
 задают подпрограммы открытия, закрытия, стратегии и таблицу
 устройств. Если подпрограмм открытия или  закрытия  не  су-
 ществует,    указывается   имя   nulldev.   Таблица   байт-
 ориентированных устройств содержит в каждой  строке  ссылки
 на  подпрограммы  открытия,  закрытия,  чтения, записи и на
 подпрограмму изменения режима работы "ioctl". Если какой то
 программы  нет,  указывается "nulldev", а если нет какой-то
 функции у устройства - то  "nodev".  Точное  описание  этих
 таблиц имеется в файле ../h/conf.h.

    Команда mkconfig имеет следующий синтаксис:

 mkconfig [-d]  [-i] [<файл-конфигурации>]

 Флаг "-d" блокирует запись в файлы c.c, l.s и ../dev/*.h, а
 вместо этого команда распечатывает таблицу устройств с ука-
 занием адресов и векторов прерываний. Флаг  -i  указывается
 при  генерации  системы  на  ЭВМ  с  раздельными  адресными
 пространствами команд и данных (Электроника-79, например).

    Для сборки системы вручную необходимо изменить, если не-
 обходимо, файлы вставок, выполнить "mkconfig", оттранслиро-
 вать и записать в библиотеки те  системные  подпрограммы  и
 драйверы,  в которые входят измененные файлы вставок, и мо-
 дули l.s, c.c, smch.c (файл smch.c  обрабатывается  препро-
 цессором "Си" и затем транслируется ассемблером), и собрать
 систему командой "ld":

 ld -X l.o smch.o c.o ../sys/LIB1 ../dev/LIB2


    Сборка системы вручную - достаточно нетривиальное и  от-
 ветственное  занятие. Этого можно избежать, использовав ко-
 манду make. Достаточно ввести файл конфигураций  под  каким
 либо  именем, изменить, если необходимо, параметры системы,
 вызвав команду "Setpar" и введя (в ответ на вопросы) список
 изменяемых параметров, задать имя вашей конфигурации:

         myconf <имя-файла-конфигурации>

 ввести команду:

         make demos

 и, если все сделано правильно и машина работает без  сбоев,
 система сама все сделает: перетранслирует нужные файлы, за-
 пишет библиотеки и соберет систему; в противном  случае  вы
 получите   достаточно   понятное   сообщение   об   ошибке.






                             60






 Перетранслировать все тексты системы в  случае  каких  либо
 сомнений можно по команде "make all".

    Размер полученной системы не должен превышать  0140000b.
 Этот  размер  можно  получить  по команде "size demos", где
 "demos" -имя системы. Размеры  системы  зависят  от  набора
 драйверов и параметров системы. Параметры в исходной систе-
 ме подобраны так, чтобы можно было собрать систему  средней
 конфигурации (rk, rp, dh, kl, lp, pc, tm) и при этом систе-
 ма имела бы приемлемые количественные характеристики.  Если
 при  сборке  системы  не  удается  уместить  ее в требуемую
 память, необходимо либо изменить конфигурацию,  либо  изме-
 нить параметры системы и собрать ее еще раз.

 4.3.3. Драйверы ОС ДЕМОС


    В справочнике "/mnt/sys/dev" собраны драйверы  устройств
 ОС ДЕМОС. Тексты драйверов на языке "Си" записаны в файлы

 <имя>.c

 где <имя>  -  обозначение  устройства  в   системе.  Адреса
 устройств, обслуживаемых драйвером "имя", записаны в файл

 <имя>.h

 который генерируется автоматически командой "mkconfig".

    В файл "bio.c"  собраны  подпрограммы,  общие  для  всех
 блок-ориентированных устройств и осуществляющие буферизацию
 обменов. Программы, общие для всех  терминалов,  собраны  в
 файл  "tty.c". Большинство драйверов содержит настраиваемые
 параметры, которые вводятся через операторы "#define" в на-
 чале  текстов драйвера. К таким параметрам относятся следу-
 ющие:

  - таблица размещения частей  диска  на  целом  диске  (для
    драйверов больших дисков);

  - режим контрольного чтения с МД после операции  записи  и
    контроль  зависаний  на  обмене  (параметры  "TIMEOUT" и
    "WCHECK" для дисковых драйверов).

  - Тип дисков (драйверы rk, rp, hk, rm, rl), число контрол-
    леров   (в   комментариях  отмечено  максимальное  число
    контроллеров).

  - алгоритм работы с терминалом (файл "tty.c") и другая ин-
    формация.

    Команда "make demos" обеспечивает автоматическую  перет-
 рансляцию ранее измененных модулей и запись их в библиотеку






                             61






 "../dev/LIB2". Для перетрансляции всех драйверов служит ко-
 манда:

 cd ../dev
 rm *.o
 make all


 4.3.4. Параметры настройки ОС ДЕМОС


    В ядре операционной системы ДЕМОС  существует  несколько
 настраиваемых  параметров, которые можно изменять с помощью
 команды "Setpar"  или  непосредственно  редактором  текста.
 Настройка  системы  производится с помощью операторов языка
 "СИ" "#define", расположенных в файлах  вставок;  например,
 указание числа буферов в кэш-области дисков выглядит так:

 #define NBUF 25


    Параметры настройки делятся на следующие группы:

 1)   Настройка на аппаратуру конкретной ЭВМ. Файл "m.h".

 2)   Выбор алгоритмов работы (больше памяти -  больше  ско-
      рость). Файл "m.h". (*1)

 2)   Размеры системных таблиц. Файлы  в  справочнике  ../h:
      NBUFMOU.h, NINODFIL.h, NPROCTXT.h, param.h.

 3)   Тонкая настройка драйверов (тексты  драйверов  устрой-
      ств).

    Основным способом изменения параметров является диалого-
 вая  команда  "Setpar".  Их можно также изменять редактором
 текстов (red или ed), вставляя или  убирая  признак  начала
 комментария  "/*" перед оператором "#define", однако в этом
 случае придется транслировать все  тексты  системы.  Список
 параметров  ОС приведен ниже. Основные правила выбора пара-
 метров и настройки системы:

 1)   Размер ядра ОС не должен превышать 0140000b, а память,
      отводимая  под  процессы  математика,  должна  быть не
      меньше 33 к-слов.

 2)   Увеличение размеров системных таблиц  и  использование
      оптимальных  алгоритмов  работы улучшает работу ОС, но
      увеличивает    размеры    ядра    и,    следовательно,
__________________________

(*1) Все имена даются от справочника "/mnt/sys/conf".







                             62






      ограничивает максимальный набор устройств,  обслужива-
      емых системой.

 3)   Максимальное число пользователей, которое может обслу-
      жить ОС, прямо связано с размерами системных таблиц.

 4)   Для оценки памяти, занимаемой таблицами, можно вызвать
      в диалоге программу "Calcul".

    Параметры настройки:

 1)   Файл m.h, характеристики ЭВМ.

      _SM_4
         ЭВМ СМ-4;

      _SM_1420
         ЭВМ СМ-1420;

      _SM_1600
         ЭВМ СМ-1600;

      _EL_79
         Электроника-79 (генерация системы для  Электроники-
         79 со стандартной дистрибутивной ленты производится
         особым образом, как описано ниже);

      _11xx
         Эвм фирмы DEC - PDP 11/xx.

 2)   Дополнительная аппаратура  (определения  типа  _SM_xxx
      могут переопределять эти параметры).

      SEPID
         раздельные адресные  пространства  команд  и  даных
         (только на Электронике-79);

      PARITY
         обработка ошибок памяти на Электронике-79;

      UNIBMAP
         расширение общей шины в случае, если на машине  ус-
         тановлено  больше  128К-слов  памяти (нет на СМ-4 и
         СМ-1600);

 3)   Дополнительные возможности ОС.

 SYSACCT
      статистика по командам (системный вызов "acct");

 SYSPHYS
      системный вызов "sysphys";







                             63






 SYSLOCK
      системный вызов "syslock";

 DISKMON
      оптимизация работы с буферами путем накопления статис-
      тики;

 INSTRM
      статистика по обменам с внешними устройствами;

 PROC_MAX
      оптимизация работы с таблицей процессов;

 EXIT
      оптимизация обработки системного вызова "exit";

 LRUI
      использование таблицы  индексных  дескрипторов  в  ка-
      честве  кэш-буфера  дескрипторов,  экономятся обмены с
      МД;

 SHORTDADDR
      экономится 26*NINODE байтов ценой ограничения  размера
      файловых систем, понимаемых системой, до 32 м-байтов.

 LCASECO
      признак того, что на консольном терминале нет строчных
      (малых) букв.

 XBUF
      вынос  дисковых  буферов  и  супер-блоков  монтируемых
      систем из адресного пространства ядра. Без этого пара-
      метра на ЭВМ СМ-4, СМ-1420 или СМ-1600  система  может
      работать   только   в   сильно   урезанном   виде,  на
      Электронике-79 параметр необходимо отменить.

4)   Параметры, определяемые автоматически и касающиеся осо-
     бенностей конкретных ЭВМ, типа "BUP_FPP".

5)   Размеры системных таблиц, файл ../h/NBUFMOU.h

     NBUF
        параметр устанавливает размер дискового  кэш-буфера;
        каждый  буфер равен 512 байтам. В режиме XBUF буфера
        располагаются вне  адресного  пространства  ядра,  и
        каждый  буфер обходится в 32 байта в ядре и 512 байт
        остальной памяти.

     NMOUNT
        максимальное число файловых  систем,  которые  могут
        быть  одновременно смонтированы; в режиме XBUF обхо-
        дится в 38*NMOUNT байтов.







                             64






6)   Размеры системных таблиц, файл h/NINODFIL.h

     NINODE
        параметр  устанавливает  размер  таблицы   индексных
        дескрипторов  (inode). Это один из критических пара-
        метров, определяющих максимальную нагрузку на систе-
        му. Элемент таблицы требуется на:

        - каждый открытый файл;

        - каждую смонтированная файловая система;

        - каждый выполняемый в данный момент файл,  если  он
          был собран с флагом "-n" или "-i";

        - каждый "регистрационный"  справочник.  Можно  дать
          следующую грубую оценку:

           NINODE>=NPROC+NMOUNT+<ч_терминалов>*2


     NFILE
        параметр   устанавливает   максимальное   количество
        открытых  файлов.  Запись  в таблице открытых файлов
        появляется каждый раз,  когда  выполняется  открытие
        файла  ("open"  или "creat"). Процессы совместно ис-
        пользуют открытые файлы через команду "fork" (разде-
        лить  процесс  на  два).  NFILE должен быть примерно
        равен "NINODE" или чуть меньше.

7)   Размеры системных таблиц, файл ../h/NPROCTXT.h

     NPROC
        Параметр устанавливает максимальное  количество  ак-
        тивных процессов в системе. Требуемое количество за-
        висит от поведения пользователей, примерно его можно
        оценить так:

         NPROC=4+<ч_терминалов>+<ч_пользователей>*4


     NTEXT
        это  максимальное  число  одновременно   выполняемых
        программ с разделяемым кодовым сегментом. Примерно

        NTEXT >= <ч_терм.> * 2 + <ч_прогр_с_-t>

        (число программ, у которых проставлен признак "t"  в
        характеристике). (*1)
__________________________

(*1)Признак "t" в режимах доступа к выполняемому файлу озна-
   чает  "сохранять  программу в области подкачки, даже если






                             65






   Все перечисленные выше параметры можно изменить  командой
"Setpar".

8)   Размеры системных таблиц, файл h/param.h

     MAPSIZ
        число фрагментов, на которые можно  разбить  память.
        Теоретически  это - удвоенное число процессов, прак-
        тически достаточно

         MAPSIZ = NPROC .


     MAXUPRC
        максимальное число процессов, которое  может  запус-
        тить один пользователь.

     NOFILE
        максимальное  количество   файлов,   которое   может
        открыть один пользователь.

   Остальные параметры достаточно откомментированы в  тексте
файла ../h/param.h, а их изменение маловероятно.

   Наиболее критичными являются NINODE, NPROC, NFILE, NTEXT,
NMOUNT.

   В базовой версии установлены следующие параметры и флаги:

 XBUF LCASECO SHORTDADDR
 LRUI EXIT PROC_MAX
 NBUF=20 NMOUNT=7
 NPROC=39 NTEXT=21
 NINODE=68 NFILE=50

Такие параметры позволяют работать примерно 5 - 8  пользова-
телям  с  не  очень  большими  запросами. Если набор внешних
устройств не слишком велик, и в ядре остается  место,  имеет
смысл добавить флаг DISKMON и установить параметры:

 NBUF=50 NINODE=80
 NPROC=45







__________________________
   она не используется". Предназначен для  ускорения  вызова
   часто используемых программ.







                             66






 4.3.5. Использование команд 'make', 'Setpar' и 'myconf' для
 сборки системы


    Для трансляции файлов, записи их в библиотеку  и  сборки
 системы рекомендуется использовать команду "make". Описание
 зависимостей файлов для "make" (файлы  "makefile")  имеются
 во  всех  трех справочниках "sys", "dev", "conf". С помощью
 "make" можно делать следующее:

  - полная перетрансляция всех текстов:

    make all

    (*1)

  - перетрансляция     библиотеки      системных      файлов
    "../sys/LIB1":

    cd ../sys
    make all


  - перетрансляция библиотеки драйверов "../dev/LIB2":

    cd ../dev
    make all


  - распечатка конфигурации системы:

    make check


  - сборка ядра ОС ДЕМОС:

    make demos


    В справочник /mnt/sys/conf  записана  команде  "Setpar".
 Эта  команда  анализирует  текущее состояние файлов "m.h" и
 "../h/*.h" и определяет записанный в них  набор  параметров
 системы. Затем в диалоговом режиме запрашивается список из-
 менений (новый тип ЭВМ, списки включаемых и выключаемых па-
 раметров, новые размеры основных таблиц), после чего прово-
 дятся редакции соответствующих файлов вставок и заполняются
 списки    файлов,   которые   требуется   перетранслировать
 ("../sys/spisok0" и "../dev/spisok0"). При очередной сборке
 ядра системы командой "make" происходит трансляция и запись
__________________________

(*1)в предположении, что текущий справочник "/mnt/sys/conf".







                             67






 в библиотеку всех файлов, которые затронуты изменением  па-
 раметров.

    Для запуска "make" как фонового процесса записана проце-
 дура "dodo":

 (make $* >a 2>&1; echo FINISH>>a; cat a)&

 которая записывает протокол работы "make" в файл "a" и  со-
 общает об окончании работы "make".

 4.3.6. Возможные ошибки и их исправление


    В процессе генерации ОС могут возникнуть различные слож-
 ности,  связанные как со сбоями ЭВМ, так и с ошибками прог-
 раммиста. Ниже приведен список наиболее вероятных ошибок  и
 способов их устранения.

 1)   При работе команды "Setpar" выдаются сообщения  о  не-
      возможности  открыть какой либо файл. Наиболее вероят-
      ная  причина  -  вы  работаете  не  под  имени  супер-
      пользователя,  а  перед  этим работали со справочником
      "/mnt/sys" в режиме супер-пользователя,  в  результате
      чего некоторые файлы стали недоступны для пользователя
      "sys". Исправление ошибки - сделать пользователя "sys"
      владельцем этих файлов с помощью команды "/etc/chown".

 2)   При генерации ядра ОС после команды "make demos" выда-
      ется  сообщение  об  ошибках  трансляции ассемблерного
      файла "l.s". Возможные причины:

       - ошибка в параметрах генерации, приводящая к  перек-
         рытию  векторов  прерываний.  Например, если задать
         устройство "dj" с  вектором  (нестандартным)  0110,
         вместе  с  "parity", то при трансляции будет выдана
         ошибка.

       - файл "l.o" существует и недоступен для записи (нап-
         ример,  он был создан супер-пользователем, а вы ра-
         ботаете под именем "sys". Диагностика выглядит так:
         "l.o?".  Уничтожьте "l.o" и повторите команду "make
         demos".

 3)   Не проходит команда "mkconfig"  (сообщение  об  ошибке
      после  "make demos"). Возможной причиной является либо
      ошибка в описании конфигурации, либо запрет  записи  в
      файлы, генерируемые "mkconfig" (см. пункт 1).

 4)   Ошибки трансляции программ из "../sys"  или  "../dev",
      либо  неопределенные  переменные  при работе редактора
      связей "ld". Могут быть вызваны недопустимыми комбина-
      циями параметров в "m.h" или в конфигурации (например,






                             68






      больше одного контроллера у драйверов, на это не  рас-
      читанных;  параметр  "XBUF"  при генерации системы для
      Электроники-79).

 5)   Сбой машины или  программы.  Если  сбой  произошел  на
      трансляции  с  ассемблера,  (в частности, и при работе
      Си-компилятора), то мог остаться незаконченным очеред-
      ной  об'ектный файл; при работе команды "ld"  возможна
      аналогичная  ситуация  с  файлом  "demos".  Необходимо
      уничтожить   такие  "незаконченные"  файлы   (<имя>.o,
      "demos"), а затем повторить команду "make demos".

 6)   Если  при  работе  команды  "ld"  выдается   сообщение
      "__SYMDEF  out  of date in <имя>", то необходимо обно-
      вить каталог соответствующей библиотеки:

      ranlib <имя>

      Несоответствие каталога может повлечь за  собой  наве-
      денные ошибки.

 7)   Сгенерированная система не выходит даже в  однопользо-
      вательский режим работы. Необходимо проверить:

       - размер  ядра  системы  ("size  demos",   не   более
         0137777b);

       - расположение и длину "swap" и "root";

       - параметры ЭВМ в файле "m.h".

         Если все верно,  попробуйте  перетранслировать  все
      программы:

      rm *.o ../sys/*.o ../dev/*.o
      make all
      make demos


   7)   Новая система при переходе  в  многопользовательский
        режим встает с диагностикой "Trap type 0". Проверьте
        адреса и вектора устройств, заданные при  генерации;
        возможно, что в файле "/etc/ttys" описаны терминалы,
        которые не подключены к ЭВМ.















                             69






    4.4. Особенности генерации системы для Электроники-79


    Электроника-79 имеет ряд отличий от других совместимых с
 СМ-4 ЭВМ, на которые рассчитана операционная система ДЕМОС.
 Основным является возможность размещения команд и данных  в
 независимых адресных пространствах, что уменьшает ограниче-
 ния на размер прямо адресуемой программы: 32 К-слова команд
 и  32  К-слова  данных (вместе со стеком), тогда как на ос-
 тальных ЭВМ общий об'ем команд и данных не должен превышать
 32 К-слова. В результате на Электронике-79 расширяются воз-
 можности системы; в частности, могут быть значительно  уве-
 личены   размеры  системных  таблиц.  Раздельная  адресация
 команд и данных в программах ОС ДЕМОС происходит,  если при
 сборке программы редактором связей "ld" (или командой "cc")
 указать флаг "-i".

    Система, поставляемая на дистрибутивной ленте, будет ра-
 ботать  на Электронике-79 в режиме совместимости с младшими
 моделями ЭВМ. Для того, чтобы использовать возможности этой
 машины, систему необходимо перегенерировать, а также перет-
 ранслировать ряд команд. При сборке ядра необходимо сделать
 следующее:

 1)   переписать в справочник "h" файлы  с  параметрами  для
      Электроники-79:

      cp ../h79/*.h ../h


 2)   переписать файл локальных параметров из архива в спра-
      вочнике "conf":

      cp archiv/m.h.el79 m.h

      подготовить   вариант    описания    "makefile"    для
      Электроники-79:

      cp make79.main makefile.main


    После этого генерация продолжается  обычным  путем;  при
 запуске команды "make" (после того, как будет задана конфи-
 гурация командой "myconf"),  произойдет  полная  трансляция
 всех текстов ядра.

    После генерации ядра желательно перетранслировать с фла-
 гом "-i" ряд программ для того, чтобы увеличить об'ем дина-
 мической памяти, доступный этим программам. Для этого необ-
 ходимо  в  соответствующих make-файлах добавить флаг "-i" в
 список  флагов,  устанавливаемых  при  сборке   выполняемых
 файлов.  Желательно перетранслировать хотя бы следующие ко-
 манды:






                             70






  fsck  awk
  c2    bc
  c1    dc
  c0
  csh
  pif
  red

 Кроме  того,   используется   другая   версия   компилятора
 Фортран-77.

    При  сборке  следует  учитывать,  что  в   системе   для
 Электроники-79  буфера  ввода/вывода  располагаются  непос-
 редственно в адресном пространстве ядра. Это ускоряет обме-
 ны,  но  ограничивает максимальное количество буферов (пос-
 кольку требуется около 01050 байтов на каждый буфер).











































                             71






                  5. Сопровождение ОС ДЕМОС


    Здесь приведена минимальная информация, необходимая сис-
 темному  программисту. Подробно сопровождение описано в ру-
 ководстве оператора и в оперативной документации (часть 8).

              5.1. Подключение новых терминалов


    Поставляемая версия ОС ДЕМОС обслуживает только консоль-
 ный терминал. Для введения в систему новых терминалов (вхо-
 дящих в конфигурацию ядра ОС) используется работающая в ди-
 алоговом  режиме команда "/etc/help" (точнее, это командный
 файл), или редактор текстов. В последнем случае для подклю-
 чения нового терминала необходимо сделать следующее:

 1)   Проверить наличие терминала в конфигурации,  выдав  на
      него какой-либо текст, например:

      echo hello >/dev/ttyj0


 2)   Занести терминал в  список  терминалов,  обслуживаемых
      ОС.  Терминалы,  обслуживаемые системой, указываются в
      файле /etc/ttys, информация о каждом терминале занима-
      ет ровно одну строку и имеет вид:

         1xимя

         где:

      1  - признак того, что терминал  обслуживается  систе-
         мой;

      x  - символ, обозначающий тип линии, один из:

         0  - непрограммируемая линия с терминалом известно-
            го типа;

         1  - программируемая линия (dh)  с  терминалом  из-
            вестного  типа;  перебор  скоростей  9600, 2400,
            1200 бод;

         2  - то же, но скорости 2400, 4800, 1200 бод;

         3  - то же, но скорости 300, 150, 600,110 бод;

         a  - программируемая линия, скорость 9600 бод;

         b  - программируемая линия, скорость 1200 бод;








                             72






         v  -   непрограммируемая   линия,   ВТА-2000    или
            Видеотон-340;

         -  - непрограммируемая  линия  с  терминалом  неиз-
            вестного типа;

         +  - программируемая линия, скорости 150, 300, 600,
            110 бод;

      имя  - название устройства без префикса "/dev".

 3)   Занести   терминал   в   таблицу   типов    терминалов
      "/etc/ttytype",   записи  в  которой  имеют  следующий
      формат:

         тип имя

         где

      тип - один из типов, описанных в файле "/etc/termcap",
         в  котором собраны описания характеристик различных
         терминалов     (см.     также     комментарий     в
         "/etc/termcap"):

         el15ie  - терминал Электроника 15-ИЭ-0013;

         el15iem - терминал Электроника 15-ИЭ-0013, в  кото-
                 ром клавиатура переключена в тестовый режим
                 работы, при этом лучше  отрабатывается  пе-
                 реключение русского и латинского регистров;

         vta2t2  - терминал ВТА 2000.2;

         vta2t3  - терминал ВТА 2000.3, 2000.30, 2000.32;

         vta2t1  - терминал ВТА 2000.1, 2000.15;

         vdt52100- терминал  videoton  52106,  с  чисто  ла-
                 тинским набором символов;

         vdt52100k-  терминал  videoton  52106,  с   русско-
                 латинским набором символов;

         vt340   - терминал videoton 340;

         vdtsk   - терминал "Videoton  station",  с  русско-
                 латинским набором символов, с ним совмести-
                 мы терминалы "vdt 52129";

         mera7953- терминал MERA-7953;









                             73






         meras   - терминал MERA, простейшая модель  (только
                 прописные латинские символы);

         vt52    - терминал dec vt-52, с ним совместимы мно-
                 гие терминалы, не попавшие в наш список;

         vt52k   - то же самое, но с русско-латинским  набо-
                 ром  символов   (прописные  русские  и  ла-
                 тинские буквы);

         tty     - телетайп.

      имя - имя устройства без "/dev".

 4)   Для того, чтобы система немедленно начала  обслуживать
      терминалы,  добавленные  в  файл "/etc/ttys", наберите
      команду:

      kill -1 1


    Если на терминале не работает  экранный  редактор  "red"
 или игра "clock", это является признаком неверного описания
 типа терминала либо неверного режима его работы.  Например,
 экранный  редактор будет работать неверно, если у терминала
 "Электроника 7401"  установлен  8-разрядный  режим  работы,
 либо если неверно установлен режим фиксации курсора на краю
 экрана (признак "am" в описании терминала  говорит  о  том,
 что  курсор  не  должен фиксироваться при достижении правой
 границы экрана). В подобных случаях нужно  либо  установить
 правильные  режимы,  либо  изменить описание терминала (см.
 "termcap(5)").

         5.2. Введение в систему новых пользователей


    Для введения в ОС ДЕМОС нового пользователя необходимо:

 1)   С помощью редактора текстов занести информацию о нем в
      файл  "/etc/passwd".  Запись  о  каждом пользователе в
      этом файле занимает одну строку и состоит из  несколь-
      ких полей, разделенных двоеточием.

       - идентификационное  имя  пользователя,  которое   он
         должен набирать при входе в систему;

       - пароль пользователя в зашифрованном виде, при заве-
         дении  нового  пользователя  это  поле  должно быть
         пустым;

       - уникальный номер пользователя в системе (uid);








                             74






       - номер группы пользователя (gid);

       - дополнительная информация о пользователе: имя,  фа-
         милия, телефон;

       - начальный справочник пользователя;

       - название  интерпретатора   команд,   по   умолчанию
         "/bin/sh".

    Например,

 alex::51:5:Руднев А.П. :/usr/alex:/bin/csh


 2)   Создать  регистрационный  справочник  пользователя   и
      стартовый файл:

      mkdir <справочник>
      echo 'stty dec length 24
      msgs' > <справочник>/.profile

      Как правило, регистрационные справочники размещают  на
      справочнике "/usr" либо на сменных дисках.

 3)   Проверить результат, войдя в систему под именем нового
      пользователя.

 5.3. Создание, подключение и сопровождение файловых систем


    Для создания файловой системы на отдельном диске или  на
 части диска нужно:

 1)   Установить диск и создать на нем пустую файловую  сис-
      тему:

      /etc/mkfs /dev/<имя диска> <длина> [x]

      Ключ x - признак поиска плохих блоков и их отбраковки.

 2)   Выделить справочник для  монтирования  новой  файловой
      системы, если она будет всегда монтироваться на одно и
      то же место. Если предполагается автоматическое монти-
      рование  командой  "automou", нужно занести это имя на
      диск.

      mkdir <справочник>
      /etc/mark /dev/<диск> <справочник>
      sync

      В команде "mark" должно указываться имя буферизованно-
      го доступа на диск, (например, rk2, а не rrk2).






                             75






    Если необходимо изменить размер файловой системы,  стан-
 дартным  способом сделать это является использование команд
 "restor" и "dump":

 1)   поставьте ленту и скопируйте на нее  файловую  систему
      командой "dump";

 2)   создайте пустую файловую систему нужной длины;

 3)   восстановите с ленты содержимое файловой системы.

    Например, для ленты на /dev/rmt0 и диска rk3  это  может
 выглядеть так:

 # Предварительно размонтируйте /dev/rk5
 sync
 /etc/dump f /dev/rmt0 /dev/rrk3
 /etc/mkfs /dev/rrk3 3100
 /etc/restor rf /dev/rmt0 /dev/rrk5


    При уменьшении файловых систем нужно иметь в  виду,  что
 номера индексных дескрипторов при такой переписи не изменя-
 ются, и в результате при сильном уменьшении диска может  не
 хватить  размера  таблицы  индексных узлов на диске. В этом
 случае нужно создать файловую систему с нестандартным  раз-
 мером таблицы индексов.

    Для копирования используют либо команду "dump", либо ко-
 манду  "tar". Нужно только учитывать, что "tar" не копирует
 специальные файлы и пустые справочники.

               5.4. Сбор статистики в ОС ДЕМОС


    Операционная система ДЕМОС собирает  разнообразную  ста-
 тистику  по  своей  работе. Большинство программ, создающих
 статистику, устроено так, что они не  создают  файлы  сбора
 статистики  заново. Для того, чтобы начать собирать статис-
 тику, эти файлы необходимо предварительно создать.  Подроб-
 ное  описание  программ для работы со статистикой имеется в
 руководстве программиста, здесь будет приведен только  спи-
 сок этих программ:

 ac     - статистика  по  работе  пользователей;  собирается
          программой "login" в файле /usr/adm/wtmp.

 lpr    - программа буферизации выдач на печать  накапливает
          статистику  в  файле "/usr/adm/lpacct" в текстовом
          виде;









                             76






 accton - накапливает статистику по использованию программ и
          по загрузке процессора ОС ДЕМОС; для ее работы не-
          обходим параметр "SYSACCT" при генерации  системы.
          Для  обработки  этой  статистики  служит программа
          "sa".

                5.5. Сообщения об изменениях


    В системе имеются средства для передачи сообщений  между
 пользователями  и для оповещения об изменениях в системе. В
 первом случае используется команда "mail", а  для  широкого
 оповещения пользователей системы используется "msgs". Реко-
 мендуется использовать "msgs" для сообщений об изменениях в
 системе  или  ее компонентах, для уведомления об замеченных
 ошибках и т.п. Подробное  описание  имеется  в  руководстве
 программиста   и  в  оперативной  документации  ("mail(1)",
 "msgs(8)").

    Следует иметь в виду, что в  базовой  версии  системы  в
 справочник  "/usr/msgs"  записаны  сообщения об изменениях,
 произошедших в системе, в том числе и об изменениях в доку-
 ментации.  Имеется  также  специальный пользователь "bugs",
 которому с помощью "mail" посылаются сообщения об  замечен-
 ных, но не исправленных ошибках.

         5.6. Сопровождение оперативной документации


    Документация по ОС ДЕМОС разбита  на  две  части:  общая
 часть, которая состоит из ряда отдельных документов, и опе-
 ративная документация, которая входит в  руководство  прог-
 раммиста и одновременно используется командой "man" для вы-
 дачи описаний команд, подпрограмм или файлов.

    Оперативная документация по системе делится на следующие
 разделы:

 1 - Описание команд пользователя системы;

 2 - Системные вызовы;

 3 - Библиотечные программы;

 4 - Специальные файлы;

 5 - Форматы файлов;

 6 - Игры;

 7 - Пакеты макроопределений и соглашения;








                             77






 8 - Команды для сопровождения системы.

    Оперативная  документация  записывается   в   справочник
 "/mnt/man", причем в справочниках /mnt/man/cat[1-8] записа-
 ны   по   разделам   отформатированные   описания,   а    в
 /mnt/man/man[1-9]  находятся  исходные  тексты  документов.
 Команда "man" использует отформатированные  тексты.  Напри-
 мер, команда:

  man 1 cc

 выдаст из файла "/mnt/man/cat1/cc.1" на  терминал  описание
 команды  "cc". Краткий справочник по оперативной документа-
 ции хранится в файле "/usr/lib/whatis" и  используется  ко-
 мандой  "whatis"  для  выдачи  кратких  описаний.  Исходные
 тексты документов ("/mnt/man/man[1-9]")  нужны  только  для
 внесения  изменений  и  могут  быть убраны, если не хватает
 места на дисках.

    Предполагается, что включение в состав системы любой ко-
 манды сопровождается введением соответствующего документа в
 руководство. В этом случае необходимо  подготовить  краткое
 описание  новой команды для его форматирования макропакетом
 "man" системы подготовки документов "pif"; это описание ко-
 торое  включается  в  справочник  "/mnt/man/manN",  где N -
 номер соответствующей части. Заготовка описания  имеется  в
 файле  "/mnt/man/man0/proto",  пакет  форматирования  "man"
 описан в руководстве  программиста  (man(7)).  После  этого
 нужно  выполнить  команду  "/mnt/man/tools/catman", которая
 создаст отформатированный вариант документа  в  справочнике
 "/mnt/man/catN"  и  внесет  краткую  справку о компоненте в
 файл "/usr/lib/whatis".

    Получить информацию по любой компоненте, описанной в ру-
 ководстве, можно с помощью команды:

  man [номер_части] название_команды


           6. ПРОВЕРКА ОПЕРАЦИОННОЙ СИСТЕМЫ ДЕМОС


    После генерации ядра операционной системы ДЕМОС  необхо-
 димо ее проверить. Выполняются следующие проверки системы:

 1)   Проверяют все устройства,  введенные  в  новую  версию
      системы.   Для   проверки  терминала  или  печатающего
      устройства достаточно выдать на них какое-либо сообще-
      ние;  лучшей  проверкой  правильности работы дискового
      драйвера станет создание пустой файловой системы и ко-
      пирование в нее какого либо материала с лент.








                             78






      Пример.

      echo HELLO >/dev/ttyj1
      echo ТЕСТ АЦПУ >/dev/lp
      /etc/mkfs /dev/rrp00 10000  x
      /etc/mark /dev/rp00 /mnt/rpuser
      sync
      mkdir /mnt/rpuser
      /etc/automou /dev/rp0
      cd /dev/rrp0
      tar -xvif /dev/nrmt0


 2)   Проверяют правильность описания терминалов, обслужива-
      емых  системой. На каждом терминале необходимо войти в
      редактор "red" и убедиться в его правильной  работе  с
      этим терминалом.

 3)   Для проверки правильности функционирования ядра  ОС  и
      сохранности системного диска можно повторить генерацию
      системы на новой версии ОС,  поскольку  при  генерации
      используются  практически все возможности операционной
      системы ДЕМОС.

 4)   Для комплексной проверки  системы  служит  контрольный
      пример, который записан в справочник "/usr/test" (вто-
      рая часть "usr" на  дистрибутивной  ленте.  Необходимо
      прочитать  из файла на дистрибутивной ленте справочник
      "usr/test", и провести проверку в соответствии с руко-
      водством  "Контрольный  пример". Следует иметь в виду,
      что для проверки состава системы необходимо обеспечить
      на  время  проверки  разрешение  всем пользователям на
      чтение справочника "/etc"; для этого  можно  использо-
      вать следующую команду:

       chmod a+r /etc


  7. ДОПОЛНИТЕЛЬНЫЕ ВОЗМОЖНОСТИ ОПЕРАЦИОННОЙ СИСТЕМЫ ДЕМОС


    В данном руководстве остался не отраженным ряд  дополни-
 тельных возможностей системы, не входящих в базовый вариант
 ОС и описанных в отдельных руководствах:

  - об'единение  ЭВМ  в  сети  с  помощью  систем  "uucp"  и
    "СЕМОС";

  - подключение нестандартных устройств  и  написание  новых
    драйверов;









                             79






  - добавление новых типов терминалов в "/etc/termcap".


























































                             80






            8. СООБЩЕНИЯ СИСТЕМНОМУ ПРОГРАММИСТУ


    При работе ОС ДЕМОС на консольный терминал  могут  выда-
 ваться различные сообщения. Сообщения бывают трех видов:

  - сообщения об ошибках обмена с внешними устройствами;

  - предупредительные  сообщения  о  переполнении  системных
    таблиц;

  - сообщения о фатальных ошибках системы.

 1)   Сообщения об  ошибках  обмена  формируются  драйверами
      внешних устройств. Они печатаются в следующем виде:

                 err on dev x/y
                 bn=n err=e,s

         где

      x/y - номер устройства (номер драйвера и  код  устрой-
         ства);

      n   - номер блока (для дисков);

      e,s - распечатка регистров ошибки и статуса контролле-
         ра, их значение зависит от типа устройства.

         Код ошибки "0" обычно означает, что  истекло  время
      ожидания обмена.

         Следует учитывать, что  система  повторяет  попытку
      обмена несколько (7-10) раз, а сообщение об ошибке вы-
      дается при каждой неудачной попытке.

   2)   Предупредительные сообщения о ошибках ОС.

        no space on x/y
           нет места на файловой системе,  расположенной  на
           устройстве  x/y. Нужно предупредить пользователей
           и освободить место на диске. Если  это  произошло
           на  системном диске, проверьте справочники "/tmp"
           и "/tmp/spool/lpd"; возможно,  кто  то  образовал
           слишком большой рабочий файл.

        out of text
           переполнена таблица кодовых сегментов "text".

        no inodes
           переполнена таблица индексных  дескрипторов.  Это
           приводит  к разнообразным ошибкам в пользователь-
           ских программах.






                             81






        out of inodes on x/y
           нет места в  таблице  индексных  дескрипторов  на
           устройстве x/y, нельзя образовать новый файл.

        swap error
           ошибка ввода/вывода на операциях подкачки. Иногда
           может быть фатальной.

        parity
           ошибка памяти в процессе пользователя.

        Big block number
           диагностика выдается при попытке работать с  фай-
           ловыми системами размером больше 32 м-байт в сис-
           теме,  сгенерированной  в  режиме   "SHORTDADDR".
           Может  также  вызываться  порчей файловой системы
           или попыткой смонтировать чужой диск.

   3)   Сообщения о фатальных ошибках в  системе  начинаются
        словом  "panic",  за  которым  идет текст сообщения.
        Подробное описание имеется в руководстве программис-
        та и в оперативной документации("crash(8)").

        Тrap
           произошло недопустимое прерывание при работе  ОС.
           Выдаются следующие величины:

           ka6  - значание регистра приписки  сегмента,  со-
                  держащего системный стек.

           type - код прерывания. Коды описаны в руководстве
                  программиста. "Trap type 0" может появить-
                  ся при  обращении  к  устройству  с  несу-
                  ществующим  адресом.  Часто это происходит
                  при переходе в многопользовательский режим
                  после генерации новой версии системы, если
                  какой либо из сгенерированных и включенных
                  в"/etc/ttys" терминалов не существует.

           ps   - адрес системного стека;

           pc   - адрес команды, на которой произошло преры-
                  вание.

        out of swap space
           переполнена область подкачки.

        остальные диагностики
           свидетельствуют об ошибках системы или ЭВМ.










                             82






                         Содержание






АННОТАЦИЯ...............................................   2

ВВЕДЕНИЕ................................................   3

1. ОБЩИЕ СВЕДЕНИЯ О СИСТЕМЕ.............................   4

1.1. Размещение ОС ДЕМОС................................   4

1.2. Вызов ОС ДЕМОС.....................................   5

1.3. Режимы работы ОС ДЕМОС.............................   7

2. СОСТАВ ОПЕРАЦИОННОЙ СИСТЕМЫ ДЕМОС....................   9

2.1. Иерархия файлов ОС.................................   9

2.2. Тесты и служебные программы........................  10

2.3. Справочник /etc - программы обслуживания ОС........  11

2.4. Прикладные программы и библиотеки..................  12

2.5. Файлы вставок - include............................  13

2.6. Специальные файлы и устройства - справочник dev....  13

2.7. Файлы со статистической информацией о системе......  15

2.8. Рабочие файлы и справочники........................  16

2.9. Монтируемые файловые  системы  и  пользовательские
     справочники........................................  17

3. ЯДРО ОПЕРАЦИОННОЙ СИСТЕМЫ ДЕМОС......................  18

3.1. Управление процессами..............................  18

3.2. Создание процесса и выполнение программы...........  19

3.3. Подкачка процессов.................................  21

3.4. Синхронизация и планирование.......................  21

3.5. Организация ввода/вывода...........................  22

3.6. Драйверы дисковых устройств........................  24






                             83






3.7. Очередь символов...................................  24

3.8. Другие байториентированные устройства..............  25

3.9. Файловая система...................................  25

3.10. Реализация файловой системы.......................  26

3.11. Монтированные файловые системы....................  29

3.12. Другие возможности ядра ОС........................  29

4. НАСТРОЙКА СИСТЕМЫ ДЕМОС..............................  30

4.1. Начальная постановка ОС ДЕМОС......................  30

4.1.1. Дистрибутивная лента ОС ДЕМОС....................  30

4.1.2. Распределение дисковых ресурсов под ОС ДЕМОС.....  32

4.1.3. Считывание ОС ДЕМОС с дистрибутивной ленты.......  35

4.1.4. Продолжение постановки ОС ДЕМОС..................  39

4.1.5. Считывание с лент остальной информации...........  42

4.1.6. Печать документации по системе...................  45

4.1.7. Ручная настройка системы.........................  46

4.2. Реконфигурация ядра ОС ДЕМОС.......................  49

4.2.1. Язык описания конфигурации.......................  52

4.2.2. Специальные файлы ОС ДЕМОС.......................  54

4.2.3. Настройка командных файлов ОС ДЕМОС..............  56

4.3. Более подробная информация о генерации  и настрой-
     ке ОС..............................................  57

4.3.1. Структура справочника /mnt/sys...................  57

4.3.2. Сборка ядра ОС ДЕМОС.............................  58

4.3.3. Драйверы ОС ДЕМОС................................  60

4.3.4. Параметры настройки ОС ДЕМОС.....................  61

4.3.5. Использование команд 'make', 'Setpar' и 'myconf'
       для сборки системы...............................  66

4.3.6. Возможные ошибки и их исправление................  67






                             84






4.4. Особенности генерации системы для Электроники-79...  69

5. Сопровождение ОС ДЕМОС...............................  71

5.1. Подключение новых терминалов.......................  71

5.2. Введение в систему новых пользователей.............  73

5.3. Создание,  подключение  и  сопровождение  файловых
     систем.............................................  74

5.4. Сбор статистики в ОС ДЕМОС.........................  75

5.5. Сообщения об изменениях............................  76

5.6. Сопровождение оперативной документации.............  76

6. ПРОВЕРКА ОПЕРАЦИОННОЙ СИСТЕМЫ ДЕМОС..................  77

7. ДОПОЛНИТЕЛЬНЫЕ  ВОЗМОЖНОСТИ   ОПЕРАЦИОННОЙ   СИСТЕМЫ
   ДЕМОС................................................  78

8. СООБЩЕНИЯ СИСТЕМНОМУ ПРОГРАММИСТУ....................  80




































