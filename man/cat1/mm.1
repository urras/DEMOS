
MM(1)                  ДЕМОС. Команды                  MM(1)


ИИММЯЯ
       mmmm - простейший макропроцессор.

ФФООРРММААТТ
       mmmm _и_м_я__м_а_к_р_о_п_р_о_г_р_а_м_м_ы [_к_л_ю_ч_и__о_т_л_а_д_к_и]

ООППИИССААННИИЕЕ
       Команда mmmm представляет собой интерпретатор  простей-
       шего языка макрообработки строк. Он считывает указан-
       ную макропрограмму и,  интерпретируя  ее,  производит
       преобразование  файла,  считываемого  со стандартного
       ввода, в файл, выдаваемый на стандартный вывод.  Нес-
       мотря  на  простоту макроязыка и миниатюрность самого
       макропроцессора (меньше 7 Кбайт), mmmm позволяет реали-
       зовывать достаточно сложные препроцессоры, конверторы
       с одного языка в другой, а также трансляторы простей-
       ших  языков  (с  выдачей результата трансляции в виде
       ассемблерного файла).

ООППИИССААННИИЕЕ ММААККРРООЯЯЗЗЫЫККАА
       ООббщщееее ооппииссааннииее ппррооццеессссаа ппррееооббррааззоовваанниияя ввххооддннооггоо ффааййллаа


       Макропрограмма состоит из  последовательности  образ-
       цов,  с каждым из которых связана группа шаблонов для
       генерации новых строк. Образец  может  содержать  как
       обычные  символы, так и спецсимволы, сопоставляющиеся
       по особым правилам.   Макропроцессор  последовательно
       считывает  строки  исходного  файла. К каждой входной
       строке слева приписывается  пробел,  после  чего  она
       последовательно  сопоставляется со всеми образцами до
       тех пор, пока сопоставление не окончится успешно. При
       этом   подстроки,  сопоставившиеся  со  спецсимволами
       образца, присваиваются в качестве значения макропере-
       менным.  После этого макропроцессор заменяет сопоста-
       вившуюся строку на группу новых строк,  сгенерирован-
       ных по шаблонам, связанным с этим образцом. При гене-
       рации новых строк могут использоваться значения  мак-
       ропеременных.  Если  сгенерированная  строка содержит
       точку в первой позиции, то она без  дальнейшей  обра-
       ботки выводится в выходной файл (но без точки). Иначе
       процесс  обработки  повторяется,  причем  в  качестве
       входной строки используется первая из сгенерированных
       строк, затем 2-ая, и только  когда  они  исчерпаются,
       макропроцессор  берет  следующую  строку  из входного
       файла.

       ФФооррммаатт ммааккррооппррооггррааммммыы

       Строки макропрограммы, начинающиеся с одного из  сим-
       волов '*', '#', '%' и пустые строки являются строками
       коментария.

       Если в первой позиции строки  стоит  символ  '/',  то
       строка после этого символа является образцом. Шаблоны
       генерируемых строк  начинаются  с  пробела  в  первой
       позиции  (пробел  в  сам  шаблон не входит). Шаблоны,
       относящиеся к данному образцу,  идут  от  образца  до


                            -1-                     ДЕМОС/PV


MM(1)                  ДЕМОС. Команды                  MM(1)


       следующего образца (или до конца файла).

       Первый символ образца (т.е. следующий за '/'  символ)
       называется  маркером  образца  и  выполняет несколько
       особую роль. Образцы  с  одинаковым  маркером  должны
       располагаться друг за другом.

       Символы  табуляции  при  считывании  входного  потока
       сразу же заменяются на пробелы. На выходе свертывание
       пробелов в табуляции не производится.

       ССррааввннееннииее ссттррооккии сс ооббррааззццоомм

       Сравниваются первые символы строки  и  образца.  Если
       они  различаются, то сравнение неуспешно. Если совпа-
       дают - сравниваются вторые символы и  т.д.  Если  все
       символы  совпали  (и  совпали  длины),  то  сравнение
       успешно.

       Кроме обычных символов, в образце  могут  встречаться
       т.н.  спецсимволы: '!', '?', '$', '_', '[', '<', '\'.
       Сравнение с ними происходит следующим образом:

       !      Сравнивается с произвольным  символом  строки,
              т.е.   сравнение  образца  "ab!d"  со  строкой
              "abcd" закончится успешно.

       ?      Сравнивается с произвольным  (возможно,  нуле-
              вым)   числом   произвольных   символов,  т.е.
              успешно сравнится  образец  "a?d"  со  строкой
              "abcd".  Самые  левые знаки '?' сравниваются с
              наиболее короткой  частью  строки,  т.е.   при
              сравнении  образца  "?+?"  со  строкой "a+b+c"
              первый '?' сравнится с "a",  а  второй  '?'  с
              "b+c".

       $      Работает так же, как и символ '?', но  сравни-
              вается  только с подстрокой, имеющей сбаланси-
              рованную скобочную структуру (или  не  имеющей
              скобок  вообще).   Учитывается  баланс  скобок
              (...), [...], {...} и текстовых скобок "..." и
              '...'  (внутри текстовых скобок сами символы '
              или " могут быть изображены удвоением  их  или
              как  \'  и  \").  Пример: при сравнении строки
              "(a+b)+c" с образцом "?+?"  первый  '?'  срав-
              нится  с подстрокой "(a", а второй - с "b)+c".
              При сравнении той же строки с образцом  "$+?",
              '$'  сравнится  с  подстрокой "(a+b)", а '?' с
              "c". '$' может сопоставиться и с пустым  набо-
              ром символов.

       _      Сравнивается с максимальным  (возможно,  нуле-
              вым)  числом  пробелов. Внимание: этот образец
              не рассматривает альтернативные варианты, поэ-
              тому  сравнение строки "a b" с образцом "a_ b"
              будет неуспешным, т.к. '_' "вберет" в себя все
              пробелы.



                            -2-                     ДЕМОС/PV


MM(1)                  ДЕМОС. Команды                  MM(1)


       [abc]  Сравнивается с одним из перечисленых в скобках
              символов.   Внутри  скобок  можно использовать
              тире "[a-zA-Z]". Если внутри скобок надо  пос-
              тавить сам символ "-", то его надо поместить в
              позицию, в которой  его  нельзя  опознать  как
              тире  (например,  "[-ab]"  "[a-z-]"). В первой
              позиции внутри  скобок  можно  использовать  и
              сами символы '[' и ']'.

       <abc>  Сравнивается с  любым  количеством  (возможно,
              нулевым)  символов  из перечисленных в скобках
              (работают те же соглашения, что  и  для  [...]
              скобок). Образец пытается сопоставиться с мак-
              симальным количеством таких  символов.  Напри-
              мер, образец, сопоставляющийся с идентификато-
              рами, будет: "[a-z_]<a-z0-9_>".

       \      Является escape-символом, т.е. сам он  игнори-
              руется,  а стоящий после него символ считается
              обычным.  Можно  использовать  также  символы:
              '\n',  '\t',  '\f', '\b', '\r', '\v', '\012' и
              т.д. (как в Си).

       Сопоставление  происходит  слева  направо.  Подстрока
       исходной  строки, сопоставившаяся с первым спецсимво-
       лом образца, присваивается макропеременной ~1, сопос-
       тавившаяся  со  вторым  -  макропеременной  ~2 и т.д.
       Всего в образце может быть до 9 спецсимволов.

       Значения макропеременных можно  использовать  даже  в
       самом образце. Так, например, образец "?=~1+?" сопос-
       тавится со строкой "a=a+2" и не сопоставится со стро-
       кой "a=b+2".

       ГГееннеерраацциияя ннооввыыхх ссттрроокк

       При успешном сопоставлении с образцом исходная строка
       исчезает, но вместо нее формируется 0 или более новых
       строк по шаблонам, связанным с этим образцом. В  шаб-
       лоне  могут  быть как обычные символы, так и спецсим-
       волы: '~', '\', '/'  и '.'.   Каждый  обычный  символ
       просто переносится в генерируемую строку.

       Особые символы:

       ~_ц_и_ф_р_а
           Заменяется на значение соответствующей макропере-
           менной.

       ~z  Заменяется на число (4 десятичные цифры  с  веду-
           щими нулями). После каждого успешного сопоставле-
           ния значение этого числа увеличивается на 1, т.е.
           его  можно  использовать для генерации уникальных
           меток, имен и т.п.

       ~s  Заменяется на значение  верхнего  элемента  стека
           макропроцессора  (см. ниже). Сам элемент при этом
           удаляется из  стека.  Каждое  использование  этой


                            -3-                     ДЕМОС/PV


MM(1)                  ДЕМОС. Команды                  MM(1)


           переменной  приводит к извлечению очередного эле-
           мента стека.

       ~n  Заменяется на  номер  последней  строки  входного
           файла.

       \t \n \r \f \b \v \0 \_т_р_и__в_о_с_ь_м_е_р_и_ч_н_ы_е__ц_и_ф_р_ы
           Заменяются на один символ (так же, как и в Си).

       \_л_ю_б_о_й__с_и_м_в_о_л
           Заменяется на этот символ.

       /_о_б_р_а_з_е_ц/
           В стеке макропроцессора (см. ниже) ищется образец
           вида  /?/_о_б_р_а_з_е_ц,  после  чего  вместо  указанной
           конструкции в генерируемую  строку  подставляется
           значение  макропеременной  ~1  (для  поиска)  или
           пусто, если образец  в  стеке  не  найден.  Затем
           восстанавливаются значения макропеременных, сфор-
           мированных при основном сравнении. Эта  конструк-
           ция  используется,  в  основном,  для организации
           таблиц (т.е. массивов, индексируемых не числом, а
           строкой).

       ММааррккееррыы ссттрроокк

       Первый символ как образца, так и генерируемой  строки
       используется  специальным  образом (маркер строки или
       образца).  Для ускорения работы макропроцессор  срав-
       нивает  очередную  строку только с той группой макро-
       сов, которая имеет тот же маркер, что  и  строка.  Ко
       всем строкам, считанным из файла, спереди добавляется
       маркер ' '. В генерируемых строках несколько маркеров
       обрабатываются особо.

       Особые маркеры строк:

       .   Строка  без  дальнейшей  обработки  выводится  на
           стандартный вывод (но без маркера).

       ,   То же, но строка выводится без '\n'.

       >   Строка (без маркера) помещается в стек  макропро-
           цессора.  Извлечь строку из стека можно использую
           переменную ~s в шаблоне.

       "   Строка без маркера выводится на стандартный вывод
           ошибок.

       !   Строка с номером строки исходного файла выводится
           на  стандартный  вывод  ошибок  и  макропроцессор
           завершает работу. Используется для  сообщений  об
           ошибках при обработке входного файла.

ННААЧЧААЛЛОО ИИ ККООННЕЕЦЦ РРААББООТТЫЫ ММААККРРООППРРООЦЦЕЕССССООРРАА
       Для того, чтобы в макропрограмме можно было  произво-
       дить инициализирующие и завершающие действия, предус-
       мотрены  2  специальных  маркера.  В  начале   работы


                            -4-                     ДЕМОС/PV


MM(1)                  ДЕМОС. Команды                  MM(1)


       макропрограммы,  до  считывания  1-ой строки входного
       файла, на вход сопоставителей  макропроцессора  пода-
       ется  строка  ".".  В  конце работы, после считывания
       символа  "_к_о_н_е_ц _ф_а_й_л_а"  на   сопоставление   подается
       строка  ">".  В  отличие от обычных строк, неуспешное
       сопоставление этих спецстрок не приводит к  прекраще-
       нию работы макропроцессора.

ВВВВООДД СС ЭЭККРРААННАА ИИ ООТТЛЛААДДККАА
       При вводе с экрана макропроцессор выдает  приглашение
       вида  "_н_о_м_е_р _с_т_р_о_к_и > ".  Буферизация вывода при этом
       отключена.

       Для отладки макропроцессору можно задать второй пара-
       метр  -  список  маркеров.  Генерируя строки с такими
       маркерами, макропроцессор  будет  показывать  это  на
       экране в виде "=>_с_т_р_о_к_а".

ДДООППООЛЛННИИТТЕЕЛЛЬЬННЫЫЕЕ ВВООЗЗММООЖЖННООССТТИИ
       Если макропроцессору не  задана  макропрограмма,  или
       вместо имени макропрограммы стоит символ "-", то мак-
       ропроцессор берет и макропрограмму, и  обрабатываемый
       файл  из  входного  потока.  При  этом макропрограмма
       может быть "вклинена" во входной поток  в  нескольких
       местах. Каждая часть макропрограммы должна начинаться
       и кончаться строкой "%%".  Таким  образом,  указанный
       макропроцессору  файл  может содержать перемежающиеся
       куски (разделенные строками  "%%")  макропрограммы  и
       обрабатываемого текста.

ППРРИИММЕЕРРЫЫ
       * === Программа, печатающая входной
       * === текст через строчку и с номерами строк

       / ?
        .~n\t~1
        .


       * === Программа, преобразующая выражение
       * === в польскую запись. Обрабатываются
       * === символы бинарных операций: + - * / **
       * === и скобки (...)

       /.
        .\t\t>>> НАЧАЛО РАБОТЫ <<<\n

       />
        .\n\t\t<<< КОНЕЦ РАБОТЫ >>>

        / $**$
        ~1^~2

        / $[+-]$
        ~1
        ~3
        .~2



                            -5-                     ДЕМОС/PV


MM(1)                  ДЕМОС. Команды                  MM(1)


        / $[*/]$
        ~1
        ~3
        .~2

        / $^$
        ~1
        ~2
        .**

        / ($)
        ~1

        / ?
        .~1











































                            -6-                     ДЕМОС/PV



