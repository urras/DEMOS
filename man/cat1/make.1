
MAKE(1)                ДЕМОС. Команды                MAKE(1)


ИИММЯЯ
       mmaakkee - программа сборки компонент.

ФФООРРММААТТ
       mmaakkee   [--ff _к_о_м_а_н_д_н_ы_й__ф_а_й_л...]   [_м_а_к_р_о_о_п_р_е_д_е_л_е_н_и_е...]
       [_к_л_ю_ч...] [_ц_е_л_ь...]

ООППИИССААННИИЕЕ
       Команда mmaakkee выполняет сборку  компонент  (_ц_е_л_е_й)  из
       набора  исходных  файлов.   Результатом  работы  mmaakkee
       может являться готовая программа, получаемая из  мно-
       жества   файлов,  отчет  или  статья,  создаваемая  с
       помощью системы подготовки  документации,  библиотека
       функций и т.п.

       Для использования  mmaakkee  разрабатывается  специальная
       программа сборки, под управлением которой выполняются
       все необходимые  действия  для  получения  требуемого
       результата.   Программа  сборки (командный файл mmaakkee)
       содержит информацию о  порождаемых  объектах,  дерево
       зависимостей, описывающее, из каких файлов получается
       объект, и команды языка sshh для создания объектов.

       Имя командного файла указывается после ключа --ff; если
       вместо параметра _к_о_м_а_н_д_н_ы_й__ф_а_й_л указан "--", использу-
       ется стандартный файл ввода.  При задании в  вызываю-
       щей  строке нескольких файлов с ключами --ff в качестве
       описания используется конкатенация записей в  указан-
       ных файлах.

       Компонента создается, если  она  не  существует,  или
       если хотя бы один из файлов (от которых она прямо или
       косвенно зависит) изменялся после последней сборки.

       Командный файл  содержит  набор  операторов,  которые
       определяют  условия  и  правила порождения компонент.
       Оператор начинается со списка имен  требуемых  объек-
       тов, после которого стоит один или два символа "двое-
       точие" и, возможно, следует список  исходных  файлов.
       Текст  после точки с запятой, а также все последующие
       строки, начинающиеся символом табуляции, представляют
       собой  команды  языка  sshh, которые должны выполняться
       для создания компоненты.

       При записи  имен  порождаемых  и  требующихся  файлов
       допустимо использование регулярных выражений (исполь-
       зуются метасимволы  "**",  "[[--]]",  "??",  интерпретация
       которых совпадает с принятой в языке sshh; см.  _s_h(1)).

       Остаток строки, начинающийся символом "##",  считается
       комментарием и не рассматривается программой mmaakkee.

       Следующий командный файл  содержит  правила  создания
       программы  _p_g_m, получаемой в результате сборки файлов
       _a._o и _b._o, которые, в  свою  очередь,  получаются  из
       файлов _a._c, _b._c и _i_n_c_l._h.

              _p_g_m: _a._o _b._o


                            -1-                     ДЕМОС/PV


MAKE(1)                ДЕМОС. Команды                MAKE(1)


                      cccc _a._o _b._o --oo _p_g_m
              _a._o: _i_n_c_l._h _a._c
                      cccc --cc _a._c
              _b._o: _i_n_c_l._h _b._c
                      cccc --cc _b._c

       В данном примере каждый из порождаемых объектов зави-
       сит от существования двух компонент, и при отсутствии
       или в результате модификации любой из них, для  полу-
       чения   объекта   выполняются   одинаковые  действия.
       Существует  возможность  задания  нескольких   правил
       порождения для одного и того же объекта.  В этом слу-
       чае, в качестве разделителя  можно  использовать  два
       символа "двоеточие":

              _a_a :: _x._c _y._c
                      eecchhoo Обновлен файл на языке Си
              _a_a :: _x._y
                      eecchhoo Обновлен файл на языке YACC

       Командный файл может содержать  вызовы  макроперемен-
       ных, для задания значений которых используются строки
       вида:

              _и_м_я = _з_н_а_ч_е_н_и_е

       При выполнении командного файла все конструкции:

              $${{_и_м_я}}

       или

              $$((_и_м_я))

       замещаются _з_н_а_ч_е_н_и_е_м соответствующей переменной  _и_м_я.
       Если  _и_м_я состоит из одного символа, то в макровызове
       скобки можно и не использовать.

       Значения  макропеременных  можно   устанавливать   не
       только  в самом командном файле, но и при вызове mmaakkee
       в командной строке.

       Переменные стандартного окружения также  рассматрива-
       ются как  макроопределения и помечаются как _п_е_р_е_д_а_в_а_-
       _е_м_ы_е во все вызываемые из mmaakkee программы.

       Если одна и та же макропеременная одновременно  опре-
       деляется и в командном файле и в вызове, используется
       значение, заданное при вызове.  Так,  если  командный
       файл содержит строки:

              _T_E_X_T = _З_А_Д_А_Н_И_Е_2

              _p_r_o_g_r:
                      eecchhoo $${{_T_E_X_T}}

       запуск команды make без параметров приведет к  выдаче
       текста  "_З_А_Д_А_Н_И_Е_2".   Если  этот  же  командный  файл


                            -2-                     ДЕМОС/PV


MAKE(1)                ДЕМОС. Команды                MAKE(1)


       запускается командой:

              mmaakkee _T_E_X_T='_П_Р_И_М_Е_Р_1'

       в результате ее работы будет получено сообщение "_П_Р_И_-
       _М_Е_Р_1".

       Существует  несколько  специальных   макропеременных,
       значения  которых  устанавливаются  самой  программой
       mmaakkee.

       $$$$   Символ $$.

       В правиле без суффиксов _с_т_р_о_к_а__д_е_й_с_т_в_и_я  может  вклю-
       чать следующие предопределенные макропеременные:

       $@@   Имя цели.

       $(@@DD)
            Часть макроса $@@, относящаяся к имени  каталога,
            в котором содержится цель.

       $(@@FF)
            Часть макроса $@@, определяющая  имя  файла  цели
            без компонент пути.

       $??   Имена файлов из списка подцелей, которые  МОЛОЖЕ
            _ф_а_й_л_а__ц_е_л_и.  Эти файлы участвуют в реконструкции
            цели.

       $!!   Список  целей,  которые  зависят  от  выполнения
            текущего правила.

       $%%   Имя библиотечного модуля в скобках при обработке
            библиотеки.

       В правиле с суффиксами _с_т_р_о_к_а__д_е_й_с_т_в_и_я в дополнение к
       предыдущим  может включать следующие предопределенные
       макропеременные:

       $**   _о_с_н_о_в_а__и_м_е_н_и__ц_е_л_и

       $(**DD)
            Часть макроса $**, относящаяся к имени каталога.

       $(**FF)
            Часть макроса $**, определяющая  имя  файла  цели
            без компонент пути.

       $@@   _о_с_н_о_в_а__и_м_е_н_и__ц_е_л_и.._в_т_о_р_о_й__с_у_ф_ф_и_к_с

       $(@@DD)
            Часть макроса $@@, относящаяся к имени каталога.

       $(@@FF)
            Часть макроса $@@, определяющая  имя  файла  цели
            без компонент пути.



                            -3-                     ДЕМОС/PV


MAKE(1)                ДЕМОС. Команды                MAKE(1)


       $<<   _о_с_н_о_в_а__и_м_е_н_и__ц_е_л_и.._п_е_р_в_ы_й__с_у_ф_ф_и_к_с

       $(<<DD)
            Часть макроса $<<, относящаяся к имени  каталога.
            Часть  макроса  $<<,  определяющая имя файла цели
            без компонентов пути.

       В правиле без суффиксов _с_п_и_с_о_к__п_о_д_ц_е_л_е_й  может  вклю-
       чать следующие предопределенные макропеременные:

       $$$@@  Текущее _и_м_я__ц_е_л_и (слева от двоеточия).

       $$$(@@FF)
            Само имя файла из $$$@@ без компонент пути.

       Необходимый  объект  можно  получить  из  какого-либо
       исходного файла одним из четырех способов:
       -  непосредственно задать имена и правила порождения;
       -  ввести общее правило для имен с указанными суффик-
          сами;
       -  задать правило ..DDEEFFAAUULLTT;
       -  использовать стандартные соглашения о преобразова-
          ниях.

       В операторе, непосредственно указывающем метод  полу-
       чения  одного  файла из другого, явно задаются полные
       имена порождаемого  и  исходного  файлов.   Например,
       получение файла _a._K из _a._M :

              _a._K : _a._M
                      mmvv _a._M _a._K

       В  общем  правиле  указываются  суффиксы  и  задаются
       команды,  преобразующие  файлы  с  одним  суффиксом в
       файлы с тем же именем, но другим  суффиксом.   Напри-
       мер,  правило получения файлов с суффиксом ._o из фай-
       лов, оканчивающихся на ._c, может иметь вид:

              ._c._o :
                      cccc --cc $$<<

       Кроме того, в командном файле необходимо указать, что
       ._o и ._c являются суффиксами и задать порядок примене-
       ния общих правил преобразования (для  случаев,  когда
       несколько  общих  правил  описывают переход от разных
       исходных файлов к одному порожденному).  Это делается
       с помощью оператора:

              ..SSUUFFFFIIXXEESS: ._o ._c

       Если в списке порождаемых объектов при  правиле  ука-
       зана конструкция ..DDEEFFAAUULLTT, то это правило выполняется
       всякий раз, когда программа mmaakkee не имеет  информации
       о  методе получения требуемого файла.  Например, если
       в командном файле задано правило:

              ..DDEEFFAAUULLTT:
                      ccpp _d_u_m_m_y $$@@


                            -4-                     ДЕМОС/PV


MAKE(1)                ДЕМОС. Команды                MAKE(1)


       будут создаваться все недостающие  файлы  (каждый  из
       которых   получается   с  помощью  копирования  файла
       _d_u_m_m_y).

       Во время работы командного файла  можно  использовать
       набор  стандартных  правил получения компонент, имею-
       щийся в системе.  Так, первый из приведенных примеров
       можно было записать значительно короче:

              _p_g_m: _a._o _b._o
                      cccc _a._o _b._o --oo _p_g_m
              _a._o _b._o: _i_n_c_l._h

       При использовании стандартных правил существует  воз-
       можность изменения имен некоторых компиляторов и клю-
       чей, с которыми они вызываются.   Имена  компиляторов
       задаются макропеременными:

       AASS    Ассемблер (aass).

       GGEETT   Программа извлечения (ccoo - RCS, ggeett - SCCS).

       CCCC    Си-компилятор (cccc).

       FFCC    Фортран-77 (ff7777).

       LLEEXX   Генератор лексических анализаторов (lleexx).

       YYAACCCC  Компилятор компиляторов (yyaacccc).

       Ключи стандартных  компиляторов  являются  значениями
       следующих макропеременных:

       CCFFLLAAGGSS    Ключи Си-компилятора (cccc).

       GGFFLLAAGGSS    Ключи программы извлечения (ccoo - RCS, ggeett -
                 SCCS).

       FFFFLLAAGGSS    Ключи компилятора Фортран-77 (ff7777).

       LLFFLLAAGGSS    Ключи генератора программ лексического ана-
                 лиза lleexx.

       YYFFLLAAGGSS    Ключи компилятора компиляторов yyaacccc.

       LLOOAADDLLIIBBSS  Список используемых библиотек.

       При  использовании  стандартных  правил  используется
       следующее соглашение о трактовке суффиксов:
       ._o  Объектный файл.
       ._c  Исходный файл на языке Си.
       ._f  Исходный файл на Фортране.
       ._e  Исходный файл на языке Efl.
       ._r  Исходный файл на Ратфоре.
       ._y  Исходный файл на Yacc.
       ._l  Исходный файл на Lex.
       ._s  Исходный файл на Ассемблере.
       ._p  Исходный файл на Паскале.


                            -5-                     ДЕМОС/PV


MAKE(1)                ДЕМОС. Команды                MAKE(1)


       Если в конце суффикса добавлен знак  тильды  (~~),  то
       данный  файл  рассматривается, как архивный файл сис-
       темы управления версиями RCS (SCCS).

       Для выполнения каждой командной строки sshh запускается
       отдельный  процесс.  Поэтому при использовании макро-
       переменных требуется принимать специальные меры, нап-
       ример,  оформлять  группы  команд, использующие общие
       макро, в виде составной команды sshh.

       Если в командном файле не был задан специальный  вход
       ..SSIILLEENNTT,  или  первым  символом команды не был символ
       "@@", строка при  выполнении  распечатывается.   Кроме
       того, при вызове mmaakkee для установки режима подавления
       выдачи исполняемых команд можно использовать ключ --ss.

       Создание файла с помощью программы  mmaakkee  может  быть
       случайно  или преднамеренно прервано. Если недоделан-
       ный файл не является каталогом, то  по  умолчанию  он
       уничтожается.   Если  имя  этого  файла указано после
       специального имя ..PPRREECCIIOOUUSS, файл не уничтожается.

       Существует возможность работы с файлами,  записанными
       в  архив.  При этом оценивается время последней моди-
       фикации файла (а не время создания архива  или  время
       записи  файла  в  архив).   Имя находящегося в архиве
       файла может указываться,  как  в  списке  порождаемых
       объектов, так и среди имен, от которых зависит созда-
       ние объектов. Кроме имени файла, при работе с библио-
       теками объектных модулей, можно указывать имена функ-
       ций.  Для того, чтобы отличать имена компонент, запи-
       санных в архив, используется специальная форма записи
       имен:

       _a((_b))     означает, что файл с  именем  _b  хранится  в
                архиве _a;

       _a((((__b))))  означает внешнее имя функции __b в архиве _a.

       Если код завершения какой-либо команды не равен нулю,
       выполнение программы mmaakkee обычно прекращается. Ошибка
       такого рода может быть проигнорирована. С этой  целью
       в  список  порождаемых  объектов вводится специальное
       имя ..IIGGNNOORREE, либо перед выполняемой командой указыва-
       ется дефис "--".

ММААККРРООППЕЕРРЕЕММЕЕННННЫЫЕЕ ССОО ССППЕЕЦЦИИААЛЛЬЬННЫЫММ ЗЗННААЧЧЕЕННИИЕЕММ
       Из набора макропеременных можно особо выделить следу-
       щие:

       SSHHEELLLL    - интерпретатор команд,  который  вызывается
                  для  выполнения  каждой  комндной  строки.
                  Если в переменной SSHHEELLLL стандартного окру-
                  жения   указан  интерпретор,  отличный  от
                  /_b_i_n/_s_h, то он  все  равно  заменяется  на
                  /_b_i_n/_s_h  (за  исключением  явного указания
                  при вызове ключа --ee), т.  к.   подавляющее
                  большинство  командных файлов написано для


                            -6-                     ДЕМОС/PV


MAKE(1)                ДЕМОС. Команды                MAKE(1)


                  sshh.  Переустановить переменную SSHHEELLLL можно
                  в командном файле.

       PPAATTHH     - переменная представляет собой список ката-
                  логов,  разделенных  символом ":".  В этих
                  каталогах последовательно ищутся запускае-
                  мые  программы в том случае, если не вызы-
                  вается интерпретатор команд $(SSHHEELLLL).

       VVPPAATTHH    - переменная представляет собой список ката-
                  логов,  разделенных  символом  ":".  В них
                  производится последовательный поиск файлов
                  при построении целей.

       GGEETT      - переменная,  задающая  программу,  которая
                  выполняет  извлечение файла системы управ-
                  ления версиями  RCS  (SCCS).   При  вызове
                  mmaakkee ей автоматически присваивается значе-
                  ние ccoo для RCS (если указан  ключ  --RR,  то
                  ggeett  для  SCCS).  Это назначение можно при
                  необходимости изменить.

       RREELLEEAASSEE  - номер версии _i_n_c_l_u_d_e-файлов, или командных
                  файлов,  или  (если указан при вызове ключ
                  --gg) файлов,  для  которых  не  нашлось  ни
                  одного   правила,  извлекаемых  программой
                  $(GGEETT).

ККЛЛЮЮЧЧИИ ВВЫЫЗЗООВВАА
       Команда mmaakkee может быть вызвана  со  следующими  клю-
       чами:

       --bb   Применять правило  ..DDEEFFAAUULLTT  и  попытку  извлечь
            файл  цели из архива системы управления версиями
            RCS (SCCS) при указанном ключе --gg только  в  том
            случае,  если для данной цели нет ни одного пра-
            вила.  Этот режим включен по умолчанию.

       --BB   Правило ..DDEEFFAAUULLTT и попытка извлечь файл цели  из
            архива  системы  управления  версиями RCS (SCCS)
            при указанном ключе --gg применяются еще и  в  том
            случае,  если  для  данной  цели  нет  ни  одной
            командной строки  (хотя  могут  быть  правила  с
            одним "::").

       --dd   Отладочный режим. В этом режиме выдается  допол-
            нительная  информация  о  выполнении  командного
            файла.

       --ee   В этом режиме назначения стандартного  окружения
            отменяют  назначения  командного  файла  (но  не
            командной строки).

       --ff   Следующий параметр является  именем  Make-файла.
            Если  в качестве такого параметра указан "--", то
            информация читается со стандартного ввода.  Если
            ключ   --ff   не  указан  (по  умолчанию),  ищется
            _M_a_k_e_f_i_l_e или _m_a_k_e_f_i_l_e, в том числе и версии этих


                            -7-                     ДЕМОС/PV


MAKE(1)                ДЕМОС. Команды                MAKE(1)


            файлов под управлением RCS (SCCS).  Если имеются
            оба, то выполняется _M_a_k_e_f_i_l_e. В командной строке
            можно указать несколько ключей --ff и параметров.

       --gg   Если файл цели не найден и нет ни одного правила
            для его построения (в т. ч. и ..DDEEFFAAUULLTT), исполь-
            зуется программа $(GGEETT) для  извлечения  его  из
            архива  RCS (SCCS). По умолчанию, выдается сооб-
            щение об ошибке.

       --ii   Режим игнорирования ошибочных  кодов  завершения
            команд. Эквивалентно специальному макро ..IIGGNNOORREE.

       --kk   Если код возврата команды не равен нулю, прекра-
            тить  обработку  текущей ветви и перейти к обра-
            ботке следующих ветвей дерева, не  зависящих  от
            текущей ветви.

       --nn   Распечатать, но не выполнять команды, предназна-
            ченные для сборки программы.

       --pp   Распечатка версии исходного дерева.

       --qq   Осуществляет проверку указанного объекта и возв-
            ращает код завершения 0, если он требует модифи-
            кации, или -1 в противном случае.

       --rr   Отменяет чтение встроенных предопределенных пра-
            вил, назначений переменных, суффиксов.

       --RR   В качестве  системы  управления  версиями  будет
            использоваться SCCS (по умолчанию - RCS).

       --ss   Эквивалентно специальному макро ..SSIILLEENNTT - отмена
            распечатки командных строк.

       --SS   Прервать  выполнение  программы  при   ошибочном
            завершении какой-либо команды.

       --tt   Обновить даты  модификации  целей,  не  выполняя
            каких-либо команд.

ДДООППООЛЛННИИТТЕЕЛЛЬЬННЫЫЕЕ ССССЫЫЛЛККИИ
       _s_h(_1), _t_o_u_c_h(1)

       Имеется отдельное описание mmaakkee.

ЗЗААММЕЕЧЧААННИИЯЯ
       Команды, которые выполняются интерпретатором  команд-
       ного  языка  sshh  (например,  ccdd),  оказывают действие
       только на одну строку в командном файле.









                            -8-                     ДЕМОС/PV

