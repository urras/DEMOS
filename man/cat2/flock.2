
FLOCK(2)          ДЕМОС. Системные вызовы           FLOCK(2)


ИИММЯЯ
       fflloocckk - нестрогая блокировка файла.

ФФООРРММААТТ
       #iinncclluuddee <_s_y_s/_f_i_l_e._h>

       #ddeeffiinnee LLOOCCKK__SSHH 1  /* разделяемое блокирование */
       #ddeeffiinnee LLOOCCKK__EEXX 2  /* монопольное блокирование */
       #ddeeffiinnee LLOOCCKK__NNBB 4  /* опрос блокирования */
       #ddeeffiinnee LLOOCCKK__UUNN 8  /* разблокирование */

       fflloocckk(_f_d, _o_p_e_r_a_t_i_o_n)
       iinntt _f_d, _o_p_e_r_a_t_i_o_n;

ООППИИССААННИИЕЕ
       Нестрогая блокировка позволяет  нескольким  процессам
       выполнять  совместные  операции  над  файлами,  но не
       гарантирует полной согласованности  (т.е.  какой-либо
       процесс  может  обратиться  к файлу без использования
       этого механизма).

       Механизм блокировки позволяет выполнять два типа бло-
       кирования:

       _s_h_a_r_e_d    - разделяемое блокирование  файла  несколь-
                   кими процессами (блокирование на чтение),

       _e_x_c_l_u_s_i_v_e - монопольное блокирование файла  (блокиро-
                   вание на запись).

       Нельзя одновременно установить несколько  монопольных
       блокирований на один файл или монопольное и разделяе-
       мое вместе.

       Системный вызов fflloocckk производит  блокирование  файла
       по его дескриптору _f_d. Дескриптор должен ссылаться на
       файл, открытый на запись.   Блокирование  осуществля-
       ется  при  вызове  с  параметром  LLOOCCKK__EEXX или LLOOCCKK__SSHH
       подставленным вместо аргумента _o_p_e_r_a_t_i_o_n. Для разбло-
       кирования  ранее  заблокированного файла надо вызвать
       fflloocckk с аргументом LLOOCCKK__UUNN.

       Если блокирование файла в данный момент невозможно (в
       случае, если файл уже заблокирован другим процессом и
       альтернативным  типом),  то  запрос  на  блокирование
       вызовет  приостанов выполнения процесса до освобожде-
       ния файла. В этом случае, если надо узнать,  заблоки-
       рован  ли уже файл, то используется аргумент LLOOCCKK__NNBB.
       LLOOCCKK__NNBB можно объединять в битовую комбинацию с аргу-
       ментами   LLOOCCKK__EEXX  и  LLOOCCKK__SSHH,  тогда  осуществляется
       попытка блокирования без  ожидания.   Если  файл  был
       заблокирован, то будет зафиксирована ошибка и в пере-
       менной eerrrrnnoo возвратится значение EEWWOOUULLDDBBLLOOCCKK.

       Тип блокирования файла может быть изменен на  альтер-
       нативный без разблокирования файла. Но если был уста-
       новлен режим разделяемого  блокирования  и  файл  был
       заблокирован  несколькими  процессами,  то  запрос на


                            -1-                     ДЕМОС/PV


FLOCK(2)          ДЕМОС. Системные вызовы           FLOCK(2)


       монопольное блокирование будет ожидать  разблокирова-
       ния файла остальными процессами.

       При закрытии файла он автоматически разблокируется.

ЗЗННААЧЧЕЕННИИЕЕ
       В случае успешного завершения fflloocckk возвращает значе-
       ние 0, иначе -1 и код ошибки в eerrrrnnoo.

ККООДДЫЫ ООШШИИББООКК
       При неудачном завершении переменная eerrrrnnoo может  при-
       нимать следующие значения:

       [[EEWWOOUULLDDBBLLOOCCKK]]   файл  уже  заблокирован  (только  при
                       вызове LLOOCCKK__NNBB);

       [[EEBBAADDFF]]         аргумент _f_d не является  дескриптором
                       открытого файла;

       [[EEIINNVVAALL]]        аргумент _f_d не дескриптор файла, отк-
                       рытого на запись.

ДДООППООЛЛННИИТТЕЕЛЛЬЬННЫЫЕЕ ССССЫЫЛЛККИИ
       _o_p_e_n(_2), _c_l_o_s_e(2), _d_u_p(2), _e_x_e_c_v_e(2), _f_o_r_k(2)

ЗЗААММЕЕЧЧААННИИЯЯ
       Блокированием файла надо  пользоваться  аккуратно.  В
       случае дублирования дескриптора файла каким-либо спо-
       собом (см.  _d_u_p(2), _f_o_r_k(2)) режим блокирования будет
       разделен  между  двумя  дескрипторами, даже если было
       монопольное блокирование. Но в случае разблокирования
       с  какого-либо дублированного дескриптора (кроме слу-
       чая закрытия файла) файл окажется разблокированным  и
       с другого.

       Процесс, ожидающий блокированного файла,  может  быть
       разбужен пришедшим ему сигналом.























                            -2-                     ДЕМОС/PV

