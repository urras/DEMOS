
SIGNAL(2)         ДЕМОС. Системные вызовы          SIGNAL(2)


ИИММЯЯ
       ssiiggnnaall, ssiiggssyyss - управление обработкой сигналов.

ФФООРРММААТТ
       #iinncclluuddee <_s_i_g_n_a_l._h>

       (*ssiiggnnaall (_s_i_g, _h_a_n_d_l_e_r)) ()
       vvooiidd (*_h_a_n_d_l_e_r) ();

       (*ssiiggssyyss (_s_i_g, _h_a_n_d_l_e_r)) ()
       vvooiidd (*_h_a_n_d_l_e_r) ();

ООППИИССААННИИЕЕ
       Во время работы процесса в  системе  могут  возникать
       различные  события, способные повлиять на работу про-
       цесса. К числу таких событий можно отнести  программ-
       ные  ошибки,  ошибки процессора, обрыв связи с другим
       процессом и т.д.  Информация  о  событиях  передается
       процессу  в  виде _с_и_г_н_а_л_о_в.  Сигнал во многом напоми-
       нает аппаратное прерывание,  его  можно  игнорировать
       или прехватить и обработать.  После обработки сигнала
       процесс продолжается с того  места,  на  котором  был
       прерван.  Сигнал, для которого не заказана обработка,
       вызывает завершение процесса.

       Системный вызов  ssiiggnnaall  в  зависимости  от  значения
       параметра  _h_a_n_d_l_e_r устанавливает режим обработки сиг-
       нала с номером _s_i_g.  Если значение параметра  _h_a_n_d_l_e_r
       равно:

       SSIIGG__IIGGNN
              указанный сигнал будет игнорироваться;

       SSIIGG__DDFFLL
              восстанавливается стандартная реакция на  сиг-
              нал.

              Все остальные значения аргумента _h_a_n_d_l_e_r расс-
              матриваются  как  адрес подпрограммы обработки
              сигнала.

       При поступлении сигнала  перед  вызовом  подпрограммы
       обработки  восстанавливается  стандартная  реакция на
       сигнал (SSIIGG__DDFFLL).  В этом случае  следует  учитывать,
       что процесс может быть уничтожен поступлением очеред-
       ного сигнала в момент, когда программа обработки сиг-
       нала  уже  начала выполняться, но еще не успела зака-
       зать повторный перехват.  Тем не менее, такая страте-
       гия обработки сигналов является стандартной для боль-
       шинства систем семейства Unix, и вызов ssiiggnnaall  остав-
       лен исключительно для совместимости.

       В  данной  версии  ДЕМОС  реализован  новый  механизм
       управления  сигналами.  Системный вызов ssiiggssyyss позво-
       ляет откладывать обработку сигнала и  изменять  режим
       вызова программы обработки и режим возврата из нее.




                            -1-                      ДЕМОС/P


SIGNAL(2)         ДЕМОС. Системные вызовы          SIGNAL(2)


       Если значение параметра _h_a_n_d_l_e_r  равно  SSIIGG__HHOOLLDD,  то
       при  поступлении  указанного сигнала он не передается
       процессу, а запоминается. Процесс может получить  его
       позже,  изменив реакцию на сигнал. Если процесс зака-
       зывает игнорирование  сигнала,  то  уничтожаются  все
       сооветствующие  отложенные сигналы.  Специальное зна-
       чение  DDEEFFEERRSSIIGG(_h_a_n_d_l_e_r)  устанавливает  режим  обра-
       ботки,  в  котором перед вызовом подпрограммы _h_a_n_d_l_e_r
       устанавливается реакция не SSIIGG__DDFFLL, а SSIIGG__HHOOLLDD.

       Для смены режима возврата из  подпрограммы  обработки
       сигнала  используются значения SSIIGGDDOOPPAAUUSSEE и SSIIGGDDOORRTTII,
       которые комбинируются с номером  сигнала.   Например,
       вызов

              ssiiggssyyss ((SSIIGGDDOOPPAAUUSSEE | _s_i_g), _h_a_n_d_l_e_r);

       устанавливает режим, в котором после  обработки  сиг-
       нала  процесс не продолжается, а переходит к ожиданию
       следующего сигнала. Это позволяет корректно обрабаты-
       вать отложенные сигналы.  Вызов

              ssiiggssyyss ((SSIIGGDDOORRTTII | _s_i_g), _h_a_n_d_l_e_r);

       устанавливает режим возврата из программы обработки с
       учетом  отложенных  сигналов,  так  как стек сигналов
       организуется на стеке процесса.

       Для поддержки нового механизма управления сигналами в
       стандартной C-библиотеке содержится набор подпрограмм
       _s_i_g_s_e_t(3j), упрощающий интерфейс вызова ssiiggssyyss.  Нап-
       рямую этот вызов обычно не используется.

       При поступлении сигнала в момент  выполнения  систем-
       ного вызова, вызов прерывается и после обработки сиг-
       нала возвращает  состояние  ошибки.   Такая  ситуация
       может возникнуть при ожидании завершения порожденного
       процесса (_w_a_i_t(2)) или при обмене с медленным внешним
       устройством  (_r_e_a_d(2),  _w_r_i_t_e(2))  (например,  ввод с
       терминала).  После  продолжения  процесса  прерванные
       системные  вызовы  возвращают  признак ошибки EEIINNTTRR и
       могут быть перезапущены.

       После выполнения вызовов _f_o_r_k(2) и _v_f_o_r_k(2) порожден-
       ный  процесс наследует весь контекст обработки сигна-
       лов.

       После смены программы (см.  _e_x_e_c_v_e(2)) восстанавлива-
       ется  стандартная  реакция на сигналы, которые прежде
       перехватывались.

       ССППИИССООКК ДДООССТТУУППННЫЫХХ ССИИГГННААЛЛООВВ

       Сигнал  появляется  после  наступления  определенного
       события.  Что  именно  произошло, можно определить по
       номеру сигнала. Ниже приводиться список номеров  сиг-
       налов  и  их  трактовка.  Для каждого сигнала указано
       имя, номер и диагностическое сообщение, которое может


                            -2-                      ДЕМОС/P


SIGNAL(2)         ДЕМОС. Системные вызовы          SIGNAL(2)


       быть получено с помощью функции _p_s_i_g_n_a_l(3).

       SSIIGGHHUUPP  1   Hangup. Конец связи.

       SSIIGGIINNTT  2   Interrupt. Прерывание.

       SSIIGGQQUUIITT 3*  Quit. Выход.

       SSIIGGIILLLL  4*  Illegal instruction. Запрещенная команда.

       SSIIGGTTRRAAPP 5*  Trace trap. Прерывание по команде BPT.

       SSIIGGIIOOTT  6*  IOT instruction.  Использование  в  прог-
                   рамме команды IOT.

       SSIIGGEEMMTT  7*  EMT instruction.  Использование  в  прог-
                   рамме команды EMT.

       SSIIGGFFPPEE  8*  Floating  point  exception.   Ошибка  при
                   выполнении команды действительной арифме-
                   тики.

       SSIIGGKKIILLLL 9   Kill. Уничтожить процесс (не  может  быть
                   перехвачен или игнорирован).

       SSIIGGBBUUSS  10* Bus error. Ошибка шины.

       SSIIGGSSEEGGVV 11* Segmentation violation.   Ошибка  адреса-
                   ции. Прерывание по защите памяти.

       SSIIGGSSYYSS  12* Bad argument to system call.   Недопусти-
                   мый параметр системного вызова.

       SSIIGGPPIIPPEE 13  Write on a pipe with no one to  read  it.
                   Запись  по межпроцессному каналу, который
                   никто не читает.

       SSIIGGAALLRRMM 14  Alarm clock. Прерывание по таймеру реаль-
                   ного времени.

       SSIIGGTTEERRMM 15  Software termination signal.  Программный
                   сигнал завершения процесса.

       SSIIGGUURRGG  16  Не используется.

       SSIIGGSSTTOOPP 17+ Stop.  Остановить процесс (не может  быть
                   перехвачен или игнорирован).

       SSIIGGTTSSTTPP 18+ Stop signal generated from tty  keyboard.
                   Сигнал  _о_с_т_а_н_о_в_и_т_ь _п_р_о_ц_е_с_с, поступивший с
                   клавиатуры управляющего терминала (обычно
                   возникает  при нажатии CCTTRRLL//ZZ или CCTTRRLL//YY,
                   см.  _t_t_y(4)).

       SSIIGGCCOONNTT 19@ Continue after stop.  Продолжить  процесс
                   (не может быть игнорирован).

       SSIIGGCCHHLLDD 20@ Child  status  has  changed.   Изменилось


                            -3-                      ДЕМОС/P


SIGNAL(2)         ДЕМОС. Системные вызовы          SIGNAL(2)


                   состояние порожденного процесса.

       SSIIGGTTTTIINN 21+ Background read  attempted  from  control
                   terminal.   Попытка чтения с управляющего
                   терминала из фонового процесса.

       SSIIGGTTTTOOUU 22+ Background  write  attempted  to  control
                   terminal.   Попытка вывода на управляющий
                   терминал из фонового процесса.

       SSIIGGTTIINNTT 23@ Input record is available at control ter-
                   minal.   Поступили  данные с управляющего
                   терминала.

       Стандартной реакцией на поступление сигнала  является
       завершение  процесса.  Исключение составляют сигналы,
       помеченные символом @@ (по умолчанию, игнорируются)  и
       символом  ++  (приостанавливают  процесс). Кроме того,
       сигналы, помеченные символом  **,  приводят  к  записи
       образа памяти процесса в файл _c_o_r_e в текущем каталоге
       процесса.

ЗЗННААЧЧЕЕННИИЕЕ
       В случае успешного завершения  возвращается  значение
       прежней  реакции на сигнал, иначе - значение BBAADDSSIIGG и
       код ошибки в переменной eerrrrnnoo.

ККООДДЫЫ ООШШИИББООКК
       [EEIINNVVAALL]    Недопустимый   номер   сигнала   (включая
                   SSIIGGKKIILLLL и SSIIGGCCOONNTT).

ЗЗААММЕЕЧЧААННИИЯЯ
       За одно обращение можно изменить  реакцию  только  на
       один  сигнал.   Невозможно  заказать режим SSIIGGDDOOPPAAUUSSEE
       более чем для одного сигнала.

ДДООППООЛЛННИИТТЕЕЛЛЬЬННЫЫЕЕ ССССЫЫЛЛККИИ
       _k_i_l_l(1), _p_t_r_a_c_e(2), _k_i_l_l(2), _s_e_t_j_m_p(3), _t_t_y(4)






















                            -4-                      ДЕМОС/P

