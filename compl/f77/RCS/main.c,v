head     1.2;
access   ;
symbols  ;
locks    ;
comment  @ * @;


1.2
date     87.03.09.22.27.40;  author alex;  state Exp;
branches ;
next     1.1;

1.1
date     87.02.27.22.44.04;  author alex;  state Exp;
branches ;
next     ;


desc
@Фортран-77, версия 2.6.
@



1.2
log
@Версия_2.6
@
text
@
#include "defs"
#ifndef P0F
struct extsym *nextext;
struct extsym *lastext;
struct extsym *extsymtab;
struct equivblock *eqvclass;
extern flag overlay;
#endif
#ifndef P1F
/*NOXXSTR*/
char *xxxvers[] = "\nФортран 77 прох.0/1, версия 2.7 ,  4.03.1987, KIAE DEMOS\n";
/*YESXSTR*/
#ifndef P0F
static struct extsym etabt[MAXEXT];
static struct equivblock eqvtbl[MAXEQUIV] ;
#endif
#else  +P1F
int Xfd; long Xs0; /* Для выдачи сообщений */
#endif
main(argc, argv)
int argc;
char **argv;
{
char *s;
int k, retcode;
FILEP opf();
#ifdef P1F
struct extsym etabt[MAXEXT];
struct equivblock eqvtbl[MAXEQUIV] ;
#endif
#ifndef P0F
extsymtab = &etabt[0];
nextext  = extsymtab;
lastext  = extsymtab+MAXEXT;
eqvclass=eqvtbl;
#endif
#define DONE(c)	{ retcode = c; goto finis; }
#ifdef P1F
 if ((k=open(argv[1],0))<0) fatal1("can not open message file %s",argv[0]);
 Xfd = k; Xs0 = 0l;
 --argc; ++argv;
#endif
--argc;
++argv;

while(argc>0 && argv[0][0]=='-')
	{
	for(s = argv[0]+1 ; *s ; ++s) switch(*s)
		{
#ifndef P1F
		case 'v':
			 fprintf(diagfile,"%s",*xxxvers);break;
#endif
		case 'w':
			if(s[1]=='6' && s[2]=='6')
				{
				ftn66flag = YES;
				s += 2;
				}
#ifndef P1F
			else
			 if(s[1]=='k' && s[2]=='i')
				{
				nowarkirill= YES;
				s += 2;
				}
#endif
			else    nowarnflag = YES;
			break;

		case 'U':
			shiftcase = NO;
			break;
		case 'X':
			debugflag = YES;
			break;
#ifndef P0F
/* Флаги первого прохода */
		case 'V':
			overlay = YES;
			SAVESPACE = OSAVESPACE; /* Для Overlay */
			break;
		case 'd':
			cdebflag = YES; /* Для cdebug */
			break;
		case 'u':
			undeftype = YES;
			break;
		case 'O':
			optimflag = YES;
			if( isdigit(s[1]) )
				{
				k = *++s - '0';
				if(k > MAXREGVAR)
					{
					warn1("-O%d: too many register variables", k);
					maxregvar = MAXREGVAR;
					}
				else
					maxregvar = k;
				}
			break;
		case 'p':
			profileflag = YES;
			break;
		case 'C':
			checksubs = YES;
			break;

		case '1':
			onetripflag = YES;
			break;

		case 'I':
			if(*++s == '2')
				tyint = TYSHORT;
			else if(*s == '4')
				{
				shortsubs = NO;
				tyint = TYLONG;
				}
			else if(*s == 's')
				shortsubs = YES;
			else
				fatal1("invalid flag -I%c\n", *s);
			tylogical = tyint;
			break;
#endif
		default:
			break;
		}
	--argc;
	++argv;
	}
#ifndef P0F
if(argc != 4)
	fatal1("arg count %d", argc);
asmfile  = opf(argv[1]);
initfile = opf(argv[2]);
textfile = opf(argv[3]);
/*-d*/ fprintf(asmfile, "/begin\n"); /*-d*/
       fflush(asmfile);
#else
if(argc != 2)
	fatal1("arg count %d", argc);
outfile = opf(argv[1]);
#endif
#ifndef P1F
initkey();
if(inilex( copys(argv[0]) ))
	DONE(1);
fprintf(diagfile, "%s:\n", argv[0]);
#else
 if (!freopen(argv[0],"r",stdin))
	fatal1("cannot open intermediate file %s", argv[0]);
#endif
#ifndef P0F
fileinit();
procinit();
#endif
if(k = yyparse())
	{
	err1("Bad parse, return code %d\n", k);
	}
if(nerr > 0)
	DONE(1);
#ifndef P0F
if(parstate != OUTSIDE)
	{
	warn("missing END statement");
	endproc();
	}
doext();
preven(ALIDOUBLE);
prtail();
#if FAMILY==SCJ
	puteof();
#endif
#endif
DONE(0);


finis:
	done(retcode);
	return(retcode);
}



done(k)
int k;
{
static int recurs	= NO;

if(recurs == NO)
	{
	recurs = YES;
	clfiles();
	}
exit(k);
}


LOCAL FILEP opf(fn)
char *fn;
{
FILEP fp;
if( fp = fopen(fn, "w") )
	return(fp);

fatal1("cannot open intermediate file %s", fn);
/* NOTREACHED */
}



LOCAL clfiles()
{
#ifndef P0F
clf(&textfile);
clf(&asmfile);
clf(&initfile);
#else
clf(&outfile);
#endif
}


clf(p)
FILEP *p;
{
if(p!=NULL && *p!=NULL && *p!=stdout)
	{
	if(ferror(*p))
		fatal("writing error");
	fclose(*p);
	}
*p = NULL;
}

@


1.1
log
@Initial revision
@
text
@d8 1
d12 1
a12 1
char *xxxvers[] = "\nФортран 77 прох.0/1, версия 2.6 ,  10.02.1986, KIAE DEMOS\n";
d78 2
d81 1
a83 2
#ifndef P0F
/* Флаги первого прохода */
@
