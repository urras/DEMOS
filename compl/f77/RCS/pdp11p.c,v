head     1.3;
access   ;
symbols  ;
locks    ;
comment  @ * @;


1.3
date     87.03.30.14.48.39;  author alex;  state Exp;
branches ;
next     1.2;

1.2
date     87.03.09.22.28.30;  author alex;  state Exp;
branches ;
next     1.1;

1.1
date     87.02.27.22.58.05;  author alex;  state Exp;
branches ;
next     ;


desc
@Фортран-77, версия 2.6.
@


1.3
log
@Сделана правка под оверлей.
@
text
@#include "defs"
#if FAMILY == DMR
#	include "dmrdefs"
#endif
#if FAMILY==SCJ && OUTPUT==BINARY
#	include "scjdefs"
static char textline[50];
#endif
#include "cdebdefs"
extern flag overlay;

goret(type)
int type;
{
#if  FAMILY == DMR
	p2op(P2RETURN);
#endif
#if FAMILY==SCJ
/*NOXXSTR*/        p2pass(sprintf(textline, "\tjmp\tcret"));    /*YESXSTR*/
#endif
}



/*
 * move argument slot arg1 (relative to ap)
 * to slot arg2 (relative to ARGREG)
 */

mvarg(type, arg1, arg2)
int type, arg1, arg2;
{
mvarg1(arg1+4, arg2);
if(type == TYLONG)
	mvarg1(arg1+6, arg2+2);
}




mvarg1(m, n)
int m, n;
{
#if FAMILY == DMR
	p2reg(ARGREG, P2SHORT|P2PTR);
	p2op2(P2ICON, P2SHORT);
	p2i(n);
	p2op2(P2PLUS, P2SHORT|P2PTR);
	p2op2(P2INDIRECT, P2SHORT);
	p2reg(AUTOREG, P2SHORT|P2PTR);
	p2op2(P2ICON, P2SHORT);
	p2i(m);
	p2op2(P2PLUS, P2SHORT|P2PTR);
	p2op2(P2INDIRECT, P2SHORT);
	p2op2(P2ASSIGN, P2SHORT);
	putstmt();
#endif
#if FAMILY == SCJ
/*NOXXSTR*/ p2pass(sprintf(textline, "\tmov\t%d.(r5),%d.(r4)", m, n));  /*YESXSTR*/
#endif
}

/*NOXXSTR*/
prlocvar(s, len)
char *s;
ftnint len;
{
fprintf(asmfile, "%s:", s);
prskip(asmfile, len);
}



prext(name, leng, init)
char *name;
ftnint leng;
int init;
{
if(leng==0 || init)
	fprintf(asmfile, "\t.globl\t_%s\n", name);
else
	fprintf(asmfile, "\t.comm\t_%s,%ld.\n", name, leng);
}



prendproc()
{
}



prolog(ep, argvec)
struct entrypoint *ep;
struct addrblock *argvec;
{
    int i, argslot, proflab,line0;
    register chainp p;
    register struct nameblock *q;
    register struct dimblock *dp;
    struct constblock *mkaddcon();
#if TARGET == PDP11 && FAMILY == DMR
    if(overlay == NO ) {
        /* Головное имя для правильной работы отладчика без оптимизатора
           расположено в голове подпрограммы (заносится через puthead - putdmr
           Это - main, если это программа
             имя первого входа - в остальных случаях
	     печать этого имени здесь блокируется
	     При работе в режиме overlay имя входа должно быть
	     прямо перед jsr csv, поэтому имена вводятся здесь
	*/
        if(procclass == CLMAIN)
            hndone=NO;
        if(hndone == NO && ep->entryname)
            prentry( varstr(XL, ep->entryname->extname) );
        hndone = NO;
    } 
    else
#endif
    {
        if(procclass == CLMAIN)
            prentry("MAIN__");
        if(ep->entryname)
            prentry( varstr(XL, ep->entryname->extname) );
    }
    if(procclass == CLBLOCK)
        return;
    if(profileflag)
        proflab = newlabel();
    line0 = lineno;
    lineno = ep->linentry;
#if FAMILY == SCJ
    if(profileflag)
    {
        fprintf(asmfile, "L%d:\t. = .+2\n", proflab);
        p2pass(sprintf(textline, "\tmov\t$L%d,r0", proflab));
        p2pass(sprintf(textline, "\tjsr\tpc,mcount"));
    }
    p2pass(sprintf(textline, "\tjsr\tr5,csv"));
    p2pass(sprintf(textline, "\tsub\t$.F%d,sp", procno));
#else
    if(profileflag)
        p2op2(P2PROFIL, proflab);
    p2op(P2SAVE);
    p2op2(P2SETSTK, ( (((int) autoleng)+1) & ~01) );
#endif

if(argvec == NULL)
	addreg(argloc = 4);
else
	{
	addreg( argloc = argvec->memoffset->const.ci );
	if(proctype == TYCHAR)
		{
		mvarg(TYADDR, 0, chslot);
		mvarg(TYLENG, SZADDR, chlgslot);
		argslot = SZADDR + SZLENG;
		}
	else if( ISCOMPLEX(proctype) )
		{
		mvarg(TYADDR, 0, cxslot);
		argslot = SZADDR;
		}
	else
		argslot = 0;

	for(p = ep->arglist ; p ; p =p->nextp)
		{
		q = p->datap;
		mvarg(TYADDR, argslot, q->vardesc.varno);
		argslot += SZADDR;
		}
	for(p = ep->arglist ; p ; p = p->nextp)
		{
		q = p->datap;
		if(q->vtype==TYCHAR || q->vclass==CLPROC)
			{
			if( q->vleng && ! ISCONST(q->vleng) )
				mvarg(TYLENG, argslot, q->vleng->memno);
			argslot += SZLENG;
			}
		}
	}

for(p = ep->arglist ; p ; p = p->nextp)
	if(dp = ( (struct nameblock *) (p->datap) ) ->vdim)
		{
		for(i = 0 ; i < dp->ndim ; ++i)
			if(dp->dims[i].dimexpr)
				puteq( fixtype(cpexpr(dp->dims[i].dimsize)),
					fixtype(cpexpr(dp->dims[i].dimexpr)));
		if(dp->basexpr)
			puteq( 	cpexpr(fixtype(dp->baseoffset)),
				cpexpr(fixtype(dp->basexpr)));
		}

if(typeaddr)
	puteq( cpexpr(typeaddr), mkaddcon(ep->typelabel) );
putgoto(ep->entrylabel);
lineno = line0;
}



prentry(s)
char *s;
{
#if FAMILY == SCJ
	p2pass(sprintf(textline, "_%s:", s));
#else
	p2op(P2RLABEL);
	putc('_', textfile);
	p2str(s);
#endif
}




addreg(k)
int k;
{
#if FAMILY == SCJ
	p2pass(sprintf(textline, "\tmov\tr5,r4"));
	p2pass(sprintf(textline, "\tadd\t$%d.,r4", k));
#else
	p2reg(ARGREG, P2SHORT);
	p2reg(AUTOREG, P2SHORT);
	p2op2(P2ICON, P2SHORT);
	p2i(k);
	p2op2(P2PLUS, P2SHORT);
	p2op2(P2ASSIGN, P2SHORT);
	putstmt();
#endif
}





prhead(fp)
FILEP fp;
{
#if FAMILY==SCJ
#	if OUTPUT == BINARY
		p2triple(P2LBRACKET, ARGREG-1-highregvar, procno);
		p2word( (long) (BITSPERCHAR*autoleng) );
		p2flush();
#	else
		fprintf(fp, "[%02d\t%06ld\t%02d\t\n", procno,
			BITSPERCHAR*autoleng, ARGREG-1-highregvar);
#	endif
#endif
}

prdbginfo()
{
register char *s;
char *t, buff[50];
register struct nameblock *p;
struct hashentry *hp;
if(procclass == CLMAIN)
   s = "MAIN__";
else
if(s = entries->entryname->extname)
	s = varstr(XL, s);
else
	return;
if(procclass != CLBLOCK && overlay==NO)
	fprintf(asmfile, "~~%s = _%s\n", s, s);
for(hp = hashtab ; hp<lasthash ; ++hp)
	if(p = hp->varp)
	{
		s = NULL;
		if(p->vstg == STGARG)
			s = sprintf(buff, "%o", p->vardesc.varno+argloc);
		else if(p->vclass == CLVAR)
			switch(p->vstg)
			{
			case STGCOMMON:
/* Для элемента общего блока формируем два слова:
   имяэлемента = FRMCOMMON
   ~~имяcommon = сдвиг
*/
				if (!cdebflag) break;
				s = sprintf(buff, "%o",FRMCOMMON);
				t = memname(p->vstg, p->vardesc.varno);
				break;
			case STGBSS:
			case STGINIT:
			case STGEQUIV:
				t = memname(p->vstg, p->vardesc.varno);
				if(p->voffset )
					s = sprintf(buff, "%s+%o", t, p->voffset);
				else
					s = sprintf(buff, "%s", t);
				break;
			case STGAUTO:
				s = sprintf(buff, "%o", p->voffset);
				break;
			default:
				break;
			}
		if(s)
		{
			fprintf(asmfile, "~%s = %s\n", (varstr(VL,p->varname)), s);
			if(cdebflag) /* Отладчик Флерова */
			{
				union cdebdesc cdbinf;
				int cdbl;
				if(p->vstg == STGCOMMON )
				{ fprintf(asmfile,CDBOFFS,t+1,p->voffset); }
				cdbinf.cdebword =0;
				cdbinf.cdbtype = p->vtype;
				cdbinf.cdbfarg = (p->vstg == STGARG);
				cdbinf.cdbfarr = (p->vdim != NULL);
				if(p->vleng != NULL && ISICON(p->vleng))
					cdbinf.cdbleng = p->vleng->const.ci;
				cdbl = 0;
				if(p->vdim != NULL && ISICON(p->vdim->nelt))
					cdbl = (int)p->vdim->nelt->const.ci;
				fprintf(asmfile,CDBFORM,cdbl,cdbinf.cdebword);
			}
		}
	}
fprintf(asmfile, "~~:\n");
}
/*YESXSTR*/

@


1.2
log
@Версия_2.6
@
text
@d269 1
a269 1
if(procclass != CLBLOCK)
@


1.1
log
@Initial revision
@
text
@d10 1
d97 5
a101 5
int i, argslot, proflab,line0;
register chainp p;
register struct nameblock *q;
register struct dimblock *dp;
struct constblock *mkaddcon();
d103 16
a118 15
/* Головное имя для правильной работы отладчика без оптимизатора
   расположено в голове подпрограммы (заносится через puthead - putdmr
   Это - main, если это программа
	 имя первого входа - в остальных случаях
	 печать этого имени здесь блокируется */
if(procclass == CLMAIN)
	hndone=NO;
if(hndone == NO && ep->entryname)
	prentry( varstr(XL, ep->entryname->extname) );
hndone = NO;
#else
if(procclass == CLMAIN)
	prentry("MAIN__");
if(ep->entryname)
	prentry( varstr(XL, ep->entryname->extname) );
d120 12
a131 6
if(procclass == CLBLOCK)
	return;
if(profileflag)
	proflab = newlabel();
line0 = lineno;
lineno = ep->linentry;
d133 8
a140 8
	if(profileflag)
		{
		fprintf(asmfile, "L%d:\t. = .+2\n", proflab);
		p2pass(sprintf(textline, "\tmov\t$L%d,r0", proflab));
		p2pass(sprintf(textline, "\tjsr\tpc,mcount"));
		}
	p2pass(sprintf(textline, "\tjsr\tr5,csv"));
	p2pass(sprintf(textline, "\tsub\t$.F%d,sp", procno));
d142 4
a145 4
	if(profileflag)
		p2op2(P2PROFIL, proflab);
	p2op(P2SAVE);
	p2op2(P2SETSTK, ( (((int) autoleng)+1) & ~01) );
@
