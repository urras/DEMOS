head     0.3;
access   ;
symbols  ;
locks    root:0.3;
comment  @ * @;


0.3
date     87.02.28.13.13.56;  author root;  state Exp;
branches ;
next     0.2;

0.2
date     87.02.28.12.34.46;  author root;  state Exp;
branches ;
next     0.1;

0.1
date     86.10.10.22.29.22;  author root;  state Exp;
branches ;
next     0.0;

0.0
date     86.08.03.19.49.11;  author avg;  state Exp;
branches ;
next     ;


desc
@
Макропроцессор Мини-Макро.
Сопоставление с образцом.
@


0.3
log
@Ускорена и исправлена обработка образцов [0-9] для не-Uкода. Флеров.
@
text
@/*
 * $Log:        match.c,v $
 * Revision 0.2  87/02/28  12:34:46  root
 * Исправлено испорченное @@VG сравнение символов в образцах вида [0-9].
 * Был не тот порядок аргументов во втором вызове cmpc.
 *                      Флеров.
 *
 * Revision 0.1  86/10/10  22:29:22  root
 * Error of "avg" is fixed by alex.
 *
 * Revision 0.0  86/08/03  19:49:11  avg
 * Макропроцессор Мини-Макро. Автор: Флеров М.Н.
 * Версия для ДЕМОС 2.0 by @@VG.
 *
 */
#ifndef lint
static char rcsid[] = "$Header: match.c,v 0.2 87/02/28 12:34:46 root Exp $";
#endif

#include <sys/code.h>

struct param { int lgt; char *adr;};
#define MAXPAR         9                /* макс.число параметров ср.*/
#define ERROR        (-2)               /* ошибка в образце         */
#define UNMATCHABLE  (-1)               /* не сравнилось            */

/* ТЕСТ ДЛЯ 'MATCH' */
/* для запуска вставить строку "#define d" */

#ifdef d
main()
{
   char string[80], pattern[80];
   struct param table [MAXPAR];
   int nparam, i, plgt, slgt;

cycle:
   printf("\n");
   printf("string:  ");   slgt = read(0, string, 80)-1;
   if( slgt == -1 )  exit( 0 );
   printf("pattern: ");   plgt = read(0, pattern,80)-1;
   if( plgt == -1 )  exit( 0 );

   nparam=match(pattern,plgt,string,slgt,table);
   if( nparam == ERROR )
      printf("errors in pattern\n");
   else if( nparam == UNMATCHABLE )
      printf("unmatchable\n");
   else
      printf("matched:\n");
      for(i=0; i<nparam; i++) {
	 printf("~%d=\"",i+1);
	 write(0, table[i].adr, table[i].lgt);  printf("\"\n");
      }
   goto cycle;
}
#endif



/*=== СРАВНЕНИЕ СТРОКИ С ОБРАЗЦОМ ===
 * сравнивает сроку с образцом с учетом спецсимволов в образце
 * на выходе:
 *    ERROR       - ошибка в образце (много спецсимволов)
 *    UNMATCHABLE - не сравнилось
 *    >= 0        - число спецсимволов (при успешном сравнении). подстроки,
 *                  с которыми сравнились спецсимволы, помещены в 'table'
 */

enum {us, one, any, brack, space, escape, o_one,c_one, o_some,c_some, par};

static char metasymbols[256] = {    /* быстро определить: мета.. или нет */
   us,    us,    us,    us,        us,    us,    us,    us,
   us,    us,    us,    us,        us,    us,    us,    us,
   us,    us,    us,    us,        us,    us,    us,    us,
   us,    us,    us,    us,        us,    us,    us,    us,

   us,   one,    us,    us,     brack,    us,    us,    us,
   us,    us,    us,    us,        us,    us,    us,    us,
   us,    us,    us,    us,        us,    us,    us,    us,
   us,    us,    us,    us,    o_some,    us,c_some,   any,

   us,    us,    us,    us,        us,    us,    us,    us,
   us,    us,    us,    us,        us,    us,    us,    us,
   us,    us,    us,    us,        us,    us,    us,    us,
   us,    us,    us, o_one,    escape, c_one,    us, space,

   us,    us,    us,    us,        us,    us,    us,    us,
   us,    us,    us,    us,        us,    us,    us,    us,
   us,    us,    us,    us,        us,    us,    us,    us,
   us,    us,    us,    us,        us,    us,   par,    us,
};



match(pattern,plgt,string,slgt,table)
   register char *pattern, *string;             /* адреса образца и стр. */
   int            plgt,     slgt;               /* длины  образца и стр. */
   struct param (*table)[];                     /* адрес таблицы парам.  */
{
#define MAXBRACK    20                          /* макс. вложенн. скобок */
#define pattern_is_empty (pattern >= pend)
#define string_is_empty  (string  >= send)

   register char *work_ptr;
   char *send, *pend;                           /* концы стр. и образца */
   char *(stack[MAXPAR]), **pstack;             /* для рекурсии         */
   char cwk, brackets[MAXBRACK], c;
   int level, txtflag, wk, i, nparam;
   struct param *ptable;

   pend   = pattern + plgt;                     /* началa обр. и стр. */
   send   = string  + slgt;
   nparam = 0;
   pstack = &stack[0];
   ptable = table;


/* АНАЛИЗ СЛЕДУЮЩЕГО СИМВОЛА ОБРАЗЦА - ОСОБЫЙ ЛИ ОН ? */

RECURSION:

#ifdef d
printf(">-%d-> \t\t", nparam);
printf("string:  \"");   write(0, string,  send-string);
printf("\"\t\t");
printf("pattern: \"");   write(0, pattern, pend-pattern);
puts("\"");
#endif

   if(pattern_is_empty) {
      if(string_is_empty)  return(nparam);       /* OK - сравнилось */
      goto FAILED;
   }

   switch( metasymbols[(*pattern)&0377] ) {

      case one:                         /* ! сравн. в любым 1 символом */
	 if(string_is_empty) goto FAILED;
	 i=1;  goto TOREC;

      case space:                       /* _ сравн.с любым числом пробел*/
	 work_ptr = string;
	 while( work_ptr<send  &&  *work_ptr==' ' )  ++work_ptr;
	 i = work_ptr - string;  goto TOREC;

      case any:                         /* ? сравн.с любым колич.люб.симв*/
	 if( pend-pattern == 1 ) {      /*    только 1 ? в образце */
	    ptable->lgt = send-string;
	    ptable->adr = string;
	    if( ++nparam > MAXPAR )  return(ERROR);
	    return( nparam );
	 }
	 i=0;  goto TOREC;              /*   при 1-ой попытке 0 символов */

      case brack:                       /* $ сравн.со сбалансир.скобками */
	 i=0;  goto TOREC;              /*   при 1-ой попытке 0 символов */

      case o_one:                       /* [.]сравн.с 1 из симв.в скобках*/
	 if(string_is_empty) goto FAILED;
	 if(!(wk=length_group(pattern,pend)))  goto USUAL;
	 if(!chckof(pattern,wk,*string))       goto FAILED;
	 i=1;  goto TOREC_WK;

      case o_some:                      /* <.>сравн.с N из симв.в скобках*/
	 if(!(wk=length_group(pattern,pend)))  goto USUAL;
	 work_ptr=string;
	 while(work_ptr<send && chckof(pattern,wk,*work_ptr))  ++work_ptr;
	 i=work_ptr-string;  goto TOREC_WK;

      case par:                         /* ~ сравн.с 1 из пред.переменных*/
	 if(pattern+1 >= pend)  return(ERROR);
	 if( (i = *(pattern+1)-'1') >= nparam ) return(ERROR);
	 work_ptr = (*table)[i].adr;
	 i        = (*table)[i].lgt;
	 if(string+i > send) goto FAILED;
	 for(wk=0; wk<i; ++wk) {
	    if( *(string+wk) != *(work_ptr+wk) ) goto FAILED;
	 }
	 pattern += 2;  string += i;  goto RECURSION;

      case escape:                      /* \ - символ, берем следующий */
	 ++pattern;
	 if(pattern_is_empty) goto FAILED;
	 switch( c = *pattern++ ) {
	     case 'n':  c = '\n';  break;
	     case 't':  c = '\t';  break;
	     case 'b':  c = '\b';  break;
	     case 'r':  c = '\r';  break;
	     case 'v':  c = '\v';  break;
	     case '0': case '1': case '2': case '3':
	     case '4': case '5': case '6': case '7':
		 wk = i = 0;
		 while( ++i<=3 && '0'<=c && c<='7' ) {
		     wk <<= 3;  wk += c - '0';
		     if(pattern_is_empty) break;
		     c = *pattern++;
		 }
		 c = wk;  --pattern;
	 }
	 if(string_is_empty) goto FAILED;
	 if(*string++ != c)  goto FAILED;    /* сравнил с 1-м сим. */
	 goto RECURSION;

      default:                               /* обычный символ в образце */
USUAL:   if(string_is_empty) goto FAILED;
	 if(*string++ != *pattern++)  goto FAILED;   /* сравнил 1-е сим. */
	 goto RECURSION;
   }


/* ВХОД В РЕКУРСИЮ */
/* i  - удалить символов из строки (присвоить их пересенной ~1-~9 */
/* wk - удалить символов из образца */

TOREC:
   wk = 1;
TOREC_WK:
   *pstack++ = pattern;
   ptable->lgt = i;
   ptable->adr = string;
   ptable++;
   if(nparam++ >= MAXPAR)  return(ERROR);
   string += i;  pattern += wk;
   goto RECURSION;


/* ПЕРЕЙТИ СЮДА ЕСЛИ НЕ СРАВНИЛОСЬ */

FAILED:
   if(!nparam--) return(UNMATCHABLE);           /* совсем не сравнилось  */
   ptable--;

#ifdef d
printf("\t<-%d-< \t", nparam);
printf("string:  \"");   write(0, string,  send-string);
printf("\"\t\t");
printf("pattern: \"");   write(0, pattern, pend-pattern);
puts("\"");
#endif

   pattern = *(--pstack);
   string  = ptable->adr;

   switch( metasymbols[(*pattern)&0377] ) {  /*следующая попытка сравнения*/

      case any:                             /* удлиннить на 1 символ */
	 i = ptable->lgt+1;
	    c = *(pattern+1);
	 if( metasymbols[c&0377] == us ) {
	    for( ; i < send-string; ++i )  if( c==string[i] )  goto TOREC;
	    goto FAILED;
	 } else {
	    if( string+i > send )  goto FAILED;
	    goto TOREC;
	 }

      case brack:                       /* удлиннить на сбланс.структуру */
	 level=0;  txtflag = -1;
	 work_ptr = string+ptable->lgt;
	 c = *(pattern+1);
	 wk = metasymbols[c&0377];
	 while( work_ptr < send ) {
	    if( *work_ptr == '\\'  &&  work_ptr+1<send     /* "...\"..." */
	    &&  *(work_ptr+1)==txtflag ) {
	       ++work_ptr;
	    } else if( *work_ptr == txtflag ) {
	       txtflag = -1;
	    } else if( txtflag<0 ) {
	       switch(*work_ptr) {
		  case '"':                                     /* "..." */
		  case '\'':                                    /* '...' */
		     txtflag = *work_ptr; break;
		  case '(':  cwk=')';     goto open;            /* (...) */
		  case '[':  cwk=']';     goto open;            /* [...] */
		  case '{':  cwk='}';     goto open;            /* {...} */
open:                brackets[level]=cwk;
		     if(++level >= MAXBRACK) goto FAILED;
		     break;
		  case ')':
		  case ']':
		  case '}':
		     if( level-- < 0 || *work_ptr != brackets[level] )
			goto FAILED;
	       }
	    }
	    ++work_ptr;
	    if( !level  &&  txtflag<0 )  {
	       if( wk != us  ||  work_ptr >= send  ||  c == *work_ptr ) {
		   i = work_ptr-string;  goto TOREC;
	       }
	    }
	 }
	 goto FAILED;

      case o_some:                      /* укоротить на 1 символ */
	 if( !(i=ptable->lgt) ) goto FAILED;
	 wk=length_group(pattern,pend);
	 --i;  goto TOREC_WK;

   }
   goto FAILED;
}

#ifdef KOI8
/*
 * Таблица перекодировки КОИ-8 --> U-код (by @@VG)
 */
char    KtoU[0400] = {
	0000,   0001,   0002,   0003,   0004,   0005,   0006,   0007,
	0010,   0011,   0012,   0013,   0014,   0015,   0016,   0017,
	0020,   0021,   0022,   0023,   0024,   0025,   0026,   0027,
	0030,   0031,   0032,   0033,   0034,   0035,   0036,   0037,
	0040,   0041,   0042,   0043,   0044,   0045,   0046,   0047,
	0050,   0051,   0052,   0053,   0054,   0055,   0056,   0057,
	0060,   0061,   0062,   0063,   0064,   0065,   0066,   0067,
	0070,   0071,   0072,   0073,   0074,   0075,   0076,   0077,

	0100,   0101,   0102,   0103,   0104,   0105,   0106,   0107,
	0110,   0111,   0112,   0113,   0114,   0115,   0116,   0117,
	0120,   0121,   0122,   0123,   0124,   0125,   0126,   0127,
	0130,   0131,   0132,   0133,   0134,   0135,   0136,   0137,
	0140,   0141,   0142,   0143,   0144,   0145,   0146,   0147,
	0150,   0151,   0152,   0153,   0154,   0155,   0156,   0157,
	0160,   0161,   0162,   0163,   0164,   0165,   0166,   0167,
	0170,   0171,   0172,   0173,   0174,   0175,   0176,   0177,

	0200,   0201,   0202,   0203,   0204,   0205,   0206,   0207,
	0210,   0211,   0212,   0213,   0214,   0215,   0216,   0217,
	0220,   0221,   0222,   0223,   0224,   0225,   0226,   0227,
	0230,   0231,   0232,   0233,   0234,   0235,   0236,   0237,
	0240,   0241,   0242,   0243,   0244,   0245,   0246,   0247,
	0250,   0251,   0252,   0253,   0254,   0255,   0256,   0257,
	0260,   0261,   0262,   0263,   0264,   0265,   0266,   0267,
	0270,   0271,   0272,   0273,   0274,   0275,   0276,   0277,

	0376,   0340,   0341,   0366,   0344,   0345,   0364,   0343,
	0365,   0350,   0351,   0352,   0353,   0354,   0355,   0356,
	0357,   0377,   0360,   0361,   0362,   0363,   0346,   0342,
	0374,   0373,   0347,   0370,   0375,   0371,   0367,   0372,
	0336,   0300,   0301,   0326,   0304,   0305,   0324,   0303,
	0325,   0310,   0311,   0312,   0313,   0314,   0315,   0316,
	0317,   0337,   0320,   0321,   0322,   0323,   0306,   0302,
	0334,   0333,   0307,   0330,   0335,   0331,   0327,   0332
};

#define cmpc( c1, c2 )  ((KtoU[(c1)&0377]&0377) - (KtoU[(c2)&0377]&0377))

#endif KOI8

/* ПРОВЕРКА, ПРИНАДЛЕЖИТ ЛИ 'symbol' ОБРАЗЦУ 'from' ДЛИНЫ 'lgt' */
/* на выходе: 1 - принадлежит, 0 - НЕТ */

int chckof(       from, lgt, symbol)
   register char *from;
   int                  lgt;
   char                      symbol;
{
   register int   symb;
   register char *end;

   symb = symbol&0377;
   end  = (++from)+lgt-2;
   while( from < end )  {
      if( from+2 < end  &&  *(from+1) == '-' )  {
#ifdef Ucode
	 if( ((*from)&0377)<=symb && symb<=((*(from+2))&0377) )  return(1);
#else
	 symb = KtoU[symb&0377] & 0377;
	 if( (KtoU[*from&0377]&0377) <= symb
	 &&  symb <= (KtoU[*(from+2)&0377]&0377) )  return(1);
#endif Ucode
	 from += 3;
      } else {
	 if( *from==symbol )  return(1);
	 from++;
      }
   }
   return(0);
}


/* ВЫЧИСЛЯЕТ ДЛИНУ СКОБОЧНЫХ КОНСТРУКЦИЙ ВИДА: [A-Z] И <A-Z> В ОБРАЗЦЕ
   на выходе:  длина или 0 (если ошибка в образце) */

int length_group( from, end )
   char          *from;                               /* начало образца */
   register char       *end;                          /* конец образца */
{
   register char *work, close;

   close = ( *from=='[' ? ']' : '>' );
   work  = from+2;
   while( work < end ) {
      if( *work == close )  return(work-from+1);
      ++work;
   }
   return( 0 );                                      /* ошибка в образце */
}
@


0.2
log
@Исправлено испорченное @@VG сравнение символов в образцах вида [0-9].
Был не тот порядок аргументов во втором вызове cmpc.
			Флеров.
@
text
@d3 5
d17 1
a17 1
static char rcsid[] = "$Header: match.c,v 0.1 86/10/10 22:29:22 root Exp $";
d136 1
a136 1
   switch( metasymbol[(*pattern)&0377] ) {
d245 1
a245 1
   switch( metasymbol[(*pattern)&0377] ) {  /*следующая попытка сравнения*/
d250 1
a250 1
	 if( metasymbol[c&0377] == us ) {
d262 1
a262 1
	 wk = metasymbol[c&0377];
d354 4
a357 4
int chckof(           from, lgt, symbol)
   register char     *from;
   int                      lgt;
   char                          symbol;
d359 1
a359 1
   register symb;
d369 3
a371 1
	 if( cmpc(*from,symb) <= 0 && cmpc(symb,*from) <= 0  )  return(1);
@


0.1
log
@Error of "avg" is fixed by alex.
@
text
@d2 4
a5 1
 * $Log:	match.c,v $
d9 1
a9 1
 * 
d12 1
a12 1
static char rcsid[] = "$Header: match.c,v 0.0 86/08/03 19:49:11 avg Exp $";
d364 1
a364 1
	 if( cmpc(*from,symb) <= 0 && cmpc(*from,symb) <= 0  )  return(1);
@


0.0
log
@Макропроцессор Мини-Макро. Автор: Флеров М.Н.
Версия для ДЕМОС 2.0 by @@VG.
@
text
@d2 5
a6 1
 * $Log$
d9 1
a9 1
static char rcsid[] = "$Header$";
d301 1
a301 1
char    KtoU[0377] = {
d361 1
a361 1
	 if( cmpc(*from,symb) <= 0 && cmpc(*from,symb) <= 0 ) )  return(1);
@
