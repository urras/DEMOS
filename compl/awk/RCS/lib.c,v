head     1.2;
access   ;
symbols  ;
locks    ;
comment  @ * @;


1.2
date     87.01.07.21.57.24;  author avg;  state Exp;
branches ;
next     1.1;

1.1
date     87.01.05.14.53.06;  author avg;  state Exp;
branches ;
next     ;


desc
@Интерпретатор языка обработки таблиц AWK.
@


1.2
log
@Сделаны правки под русские буквы.
- / - двуязычные диагностики.
Исправлены некоторые ошибки.
@
text
@/*
 * $Log:        lib.c,v $
 *Revision 1.1  87/01/05  14:53:06  avg
 *Initial revision
 *
 */

#include <stdio.h>
#include "awk.def"
#include "awk.h"
#include <ctype.h>
#include <ediag.h>

/*NOXSTR*/
#ifndef lint
static char rcsid[] = "$Header$";
#endif

FILE    *infile = NULL;
char    *file;
#define RECSIZE 512
char    record[RECSIZE];
char    fields[RECSIZE];
char    EMPTY[] = "";

#define MAXFLD  50
int     donefld;        /* 1 = implies rec broken into fields */
int     donerec;        /* 1 = record is valid (no flds have changed) */
int     mustfld;        /* 1 = NF seen, so always break*/

#define FINIT   {0, NULL, 0.0, FLD|STR}
cell fldtab[MAXFLD] = { /*room for fields */
	{ "$record", record, 0.0, STR|FLD},
	FINIT, FINIT, FINIT, FINIT, FINIT, FINIT, FINIT,
	FINIT, FINIT, FINIT, FINIT, FINIT, FINIT, FINIT,
	FINIT, FINIT, FINIT, FINIT, FINIT, FINIT, FINIT,
	FINIT, FINIT, FINIT, FINIT, FINIT, FINIT, FINIT,
	FINIT, FINIT, FINIT, FINIT, FINIT, FINIT, FINIT,
	FINIT, FINIT, FINIT, FINIT, FINIT, FINIT, FINIT,
	FINIT, FINIT, FINIT, FINIT, FINIT, FINIT, FINIT
};
int     maxfld  = 0;    /* last used field */
/*YESXSTR*/


getrec()
{
	register char *rr;
	extern int svargc;
	extern char **svargv;
	register c, sep;

	dprintf("**RS=%o, **FS=%o\n", **RS, **FS, NULL);
	donefld = 0;
	donerec = 1;
	record[0] = 0;
	while (svargc > 0) {
		dprintf("svargc=%d, *svargv=%s\n", svargc, *svargv, NULL);
		if (infile == NULL) {   /* have to open a new file */
			if (member('=', *svargv)) {     /* it's a var=value argument */
				setclvar(*svargv);
				svargv++;
				svargc--;
				continue;
			}
			*FILENAME = file = *svargv;
			dprintf("opening file %s\n", file, NULL, NULL);
			if (*file == '-')
				infile = stdin;
			else if ((infile = fopen(file, "r")) == NULL)
				error(FATAL, ediag("can't open %s",
						   "не могу открыть %s"), file);
		}
		if ((sep = **RS) == 0)
			sep = '\n';
		for (rr = record; ; ) {
			for (; (c=getc(infile)) != sep && c != EOF; *rr++ = c)
				;
			if (**RS == sep || c == EOF)
				break;
			if ((c = getc(infile)) == '\n' || c == EOF)     /* 2 in a row */
				break;
			*rr++ = '\n';
			*rr++ = c;
		}
		if (rr > record+RECSIZE)
			error(FATAL, ediag("record `%.20s...' too long",
					   "длинная запись `%.20s...'"), record);
		*rr = 0;
		if (mustfld)
			fldbld();
		if (c != EOF)   /* normal record */
			return(1);
		/* EOF arrived on this file; set up next */
		if (infile != stdin)
			fclose(infile);
		infile = NULL;
		svargc--;
		svargv++;
	}
	return(0);      /* true end of file */
}

setclvar(s)     /* set var=value from s */
char *s;
{
	char *p;
	cell *q;

	for (p=s; *p != '='; p++)
		;
	*p++ = 0;
	q = setsymtab(s, tostring(p), 0.0, STR, symtab);
	setsval(q, p);
	dprintf("command line set %s to |%s|\n", s, p, NULL);
}

fldbld()
{
	register char *r, *fr, sep;
	int i, j;

	r = record;
	fr = fields;
	if ((sep = **FS) == ' ')
		for (i = 0; ; ) {
			while (*r == ' ' || *r == '\t' || *r == '\n')
				r++;
			if (*r == 0)
				break;
			i++;
			if (i >= MAXFLD)
				error(FATAL, ediag("record `%.20s...' has too many fields",
						   "слишком много полей в записи `%.20s...'"), record);
			if (!(fldtab[i].tval&FLD))
				xfree(fldtab[i].sval);
			fldtab[i].sval = fr;
			fldtab[i].tval = FLD | STR;
			do
				*fr++ = *r++;
			while (*r != ' ' && *r != '\t' && *r != '\n' && *r != '\0');
			*fr++ = 0;
		}
	else
		for (i = 0; ; ) {
			i++;
			if (i >= MAXFLD)
				error(FATAL, ediag("record `%.20s...' has too many fields",
						   "слишком много полей в записи `%.20s...'"), record);
			if (!(fldtab[i].tval&FLD))
				xfree(fldtab[i].sval);
			fldtab[i].sval = fr;
			fldtab[i].tval = FLD | STR;
			while (*r != sep && *r != '\n' && *r != '\0')   /* \n always a separator */
				*fr++ = *r++;
			*fr++ = '\0';
			if (*r == 0) break;
			r++;
		}
	*fr = 0;
	for (j=maxfld; j>i; j--) {      /* clean out junk from previous record */
		if (!(fldtab[j].tval&FLD))
			xfree(fldtab[j].sval);
		fldtab[j].tval = STR | FLD;
		fldtab[j].sval = NULL;
	}
	maxfld = i;
	donefld = 1;
	for(i=1; i<=maxfld; i++)
		if(isnumber(fldtab[i].sval))
		{       fldtab[i].fval = atof(fldtab[i].sval);
			fldtab[i].tval |= NUM;
		}
	setfval(lookup("NF", symtab), (awkfloat) maxfld);
	if (dbg)
		for (i = 0; i <= maxfld; i++)
			printf( ediag("field %d: |%s|\n",
				      "поле %d: |%s|\n"), i, fldtab[i].sval);
}

recbld()
{
	int i;
	register char *r, *p;

	if (donefld == 0 || donerec == 1)
		return;
	r = record;
	for (i = 1; i <= *NF; i++) {
		p = getsval(&fldtab[i]);
		while (*r++ = *p++)
			;
		*(r-1) = **OFS;
	}
	*(r-1) = '\0';
	dprintf("in recbld FS=%o, recloc=%o\n", **FS, recloc, NULL);
	recloc->tval = STR | FLD;
	dprintf("in recbld FS=%o, recloc=%o\n", **FS, recloc, NULL);
	if (r > record+RECSIZE)
		error(FATAL, ediag("built giant record `%.20s...'",
				   "очень большая запись на выводе `%.20s...'"), record);
	dprintf("recbld = |%s|\n", record, NULL, NULL);
}

cell *fieldadr(n)
{
	if (n >= MAXFLD)
		error(FATAL, ediag("trying to access field %d",
				   "использование поля %d"), n);
	return(&fldtab[n]);
}

int     errorflag       = 0;

yyerror(s) char *s; {
	fprintf(stderr, ediag("awk: %s near line %d\n",
			      "awk: %s (строка %d)\n"), s, lineno);
	errorflag = 2;
}

error(f, s, a1, a2, a3, a4, a5, a6, a7) {
	fprintf(stderr, "awk: ");
	fprintf(stderr, s, a1, a2, a3, a4, a5, a6, a7);
	fprintf(stderr, "\n");
	if (*NR > 0)
		fprintf(stderr, ediag(" record number %g\n",
				      " запись %g\n"), *NR);
	if (f)
		exit(2);
}

PUTS(s) char *s; {
	dprintf("%s\n", s, NULL, NULL);
}

#define MAXEXPON        38      /* maximum exponenet for fp number */

isnumber(s)
register char *s;
{
	register d1, d2;
	int point;
	char *es;

	d1 = d2 = point = 0;
	while (*s == ' ' || *s == '\t' || *s == '\n')
		s++;
	if (*s == '\0')
		return(0);      /* empty stuff isn't number */
	if (*s == '+' || *s == '-')
		s++;
	if (!isdigit(*s) && *s != '.')
		return(0);
	if (isdigit(*s)) {
		d1++;
		do {
			s++;
		} while (isdigit(*s));
	}
	if (*s == '.') {
		point++;
		s++;
	}
	if (d1 == 0 && point == 0)
		return(0);
	if (isdigit(*s)) {
		d2++;
		do {
			s++;
		} while (isdigit(*s));
	}
	if (!(d1 || point && d2))
		return(0);
	if (*s == 'e' || *s == 'E') {
		s++;
		if (*s == '+' || *s == '-')
			s++;
		if (!isdigit(*s))
			return(0);
		es = s;
		do {
			s++;
		} while (isdigit(*s));
		if (s - es > 2)
			return(0);
		else if (s - es == 2 && 10 * (*es-'0') + *(es+1)-'0' >= MAXEXPON)
			return(0);
	}
	while (*s == ' ' || *s == '\t' || *s == '\n')
		s++;
	if (*s == '\0')
		return(1);
	else
		return(0);
}
/*
isnumber(s) char *s; {return(0);}
*/
@


1.1
log
@Initial revision
@
text
@d2 4
a5 1
 * $Log$
d8 1
a8 1
#include "stdio.h"
d11 2
a12 1
#include "ctype.h"
d14 5
d42 2
a43 1
int	maxfld	= 0;	/* last used field */
d59 2
a60 2
		if (infile == NULL) {	/* have to open a new file */
			if (member('=', *svargv)) {	/* it's a var=value argument */
d71 2
a72 1
				error(FATAL, "can't open %s", file);
d81 1
a81 1
			if ((c = getc(infile)) == '\n' || c == EOF)	/* 2 in a row */
d87 2
a88 1
			error(FATAL, "record `%.20s...' too long", record);
d92 1
a92 1
		if (c != EOF)	/* normal record */
d101 1
a101 1
	return(0);	/* true end of file */
d104 1
a104 1
setclvar(s)	/* set var=value from s */
d133 2
a134 1
				error(FATAL, "record `%.20s...' has too many fields", record);
d148 2
a149 1
				error(FATAL, "record `%.20s...' has too many fields", record);
d154 1
a154 1
			while (*r != sep && *r != '\n' && *r != '\0')	/* \n always a separator */
d161 1
a161 1
	for (j=maxfld; j>i; j--) {	/* clean out junk from previous record */
d171 1
a171 1
		{	fldtab[i].fval = atof(fldtab[i].sval);
d177 2
a178 1
			printf("field %d: |%s|\n", i, fldtab[i].sval);
d200 2
a201 1
		error(FATAL, "built giant record `%.20s...'", record);
d208 2
a209 1
		error(FATAL, "trying to access field %d", n);
d213 1
a213 1
int	errorflag	= 0;
d216 2
a217 1
	fprintf(stderr, "awk: %s near line %d\n", s, lineno);
d226 2
a227 1
		fprintf(stderr, " record number %g\n", *NR);
d236 1
a236 1
#define	MAXEXPON	38	/* maximum exponenet for fp number */
d249 1
a249 1
		return(0);	/* empty stuff isn't number */
@
