head     1.4;
access   ;
symbols  ;
locks    ;
comment  @ * @;


1.4
date     87.01.23.22.30.32;  author avg;  state Exp;
branches ;
next     1.3;

1.3
date     87.01.08.12.44.21;  author avg;  state Exp;
branches ;
next     1.2;

1.2
date     87.01.07.21.57.03;  author avg;  state Exp;
branches ;
next     1.1;

1.1
date     87.01.05.14.52.59;  author avg;  state Exp;
branches ;
next     ;


desc
@Интерпретатор языка обработки таблиц AWK.
@


1.4
log
@Исправлена ошибка в Xstrcmp.
@
text
@/*
 * $Log:        b.c,v $
 * Revision 1.3  87/01/08  12:44:21  avg
 * Забыл include ediag.h
 *
 * Revision 1.2  87/01/07  21:57:03  avg
 * Сделаны правки под русские буквы.
 * - / - двуязычные диагностики.
 * Исправлены некоторые ошибки.
 *
 *Revision 1.1  87/01/05  14:52:59  avg
 *Initial revision
 *
 */

/*NOXSTR*/
#ifndef lint
static char rcsid[] = "$Header: b.c,v 1.3 87/01/08 12:44:21 avg Exp $";
#endif
/*YESXSTR*/

#include <stdio.h>
#include <sys/code.h>
#include "awk.def"
#include "awk.h"
#include <ediag.h>

extern node *op2();
extern struct fa *cgotofn();
#define MAXLIN 256
#define NCHARS 256
#define NSTATES 256
#define U(x) ((x) & 0377)

#define type(v) v->nobj
#define left(v) v->narg[0]
#define right(v)        v->narg[1]
#define parent(v)       v->nnext

#define LEAF    case CCL: case NCCL: case CHAR: case DOT:
#define UNARY   case FINAL: case STAR: case PLUS: case QUEST:

/* encoding in tree nodes:
	leaf (CCL, NCCL, CHAR, DOT): left is index, right contains value or pointer to value
	unary (FINAL, STAR, PLUS, QUEST): left is child, right is null
	binary (CAT, OR): left and right are children
	parent contains pointer to parent
*/

struct fa {
	int cch;
	struct fa *st;
};

int     *state[NSTATES];
int     *foll[MAXLIN];
char    chars[MAXLIN];
int     setvec[MAXLIN];
node    *point[MAXLIN];

int     setcnt;
int     line;


struct fa *makedfa(p)   /* returns dfa for tree pointed to by p */
node *p;
{
	node *p1;
	struct fa *fap;
	p1 = op2(CAT, op2(STAR, op2(DOT, (node *) 0, (node *) 0), (node *) 0), p);
		/* put DOT STAR in front of reg. exp. */
	p1 = op2(FINAL, p1, (node *) 0);                /* install FINAL node */

	line = 0;
	penter(p1);     /* enter parent pointers and leaf indices */
	point[line] = p1;       /* FINAL node */
	setvec[0] = 1;          /* for initial DOT STAR */
	cfoll(p1);      /* set up follow sets */
	fap = cgotofn();
	freetr(p1);     /* add this when alloc works */
	return(fap);
}

penter(p)       /* set up parent pointers and leaf indices */
node *p;
{
	switch(type(p)) {
		LEAF
			left(p) = (node *) line;
			point[line++] = p;
			break;
		UNARY
			penter(left(p));
			parent(left(p)) = p;
			break;
		case CAT:
		case OR:
			penter(left(p));
			penter(right(p));
			parent(left(p)) = p;
			parent(right(p)) = p;
			break;
		default:
			error(FATAL, ediag("unknown type %d in penter\n",
					   "неизвестный тип %d в penter\n"), type(p));
			break;
	}
}

freetr(p)       /* free parse tree and follow sets */
node *p;
{
	switch(type(p)) {
		LEAF
			xfree(foll[(int) left(p)]);
			xfree(p);
			break;
		UNARY
			freetr(left(p));
			xfree(p);
			break;
		case CAT:
		case OR:
			freetr(left(p));
			freetr(right(p));
			xfree(p);
			break;
		default:
			error(FATAL, ediag("unknown type %d in freetr",
					   "неизвестный тип %d в freetr"), type(p));
			break;
	}
}

#ifdef KOI8
/*
 * Coding from and to U-code.
 */
static char KUtab[] = {         /* КОИ-8 --> U-код */
	0376, 0340, 0341, 0366, 0344, 0345, 0364, 0343,
	0365, 0350, 0351, 0352, 0353, 0354, 0355, 0356,
	0357, 0377, 0360, 0361, 0362, 0363, 0346, 0342,
	0374, 0373, 0347, 0370, 0375, 0371, 0367, 0372,
	0336, 0300, 0301, 0326, 0304, 0305, 0324, 0303,
	0325, 0310, 0311, 0312, 0313, 0314, 0315, 0316,
	0317, 0337, 0320, 0321, 0322, 0323, 0306, 0302,
	0334, 0333, 0307, 0330, 0335, 0331, 0327, 0332
};

static char UKtab[] = {         /* U-код --> КОИ-8 */
	0341, 0342, 0367, 0347, 0344, 0345, 0366, 0372,
	0351, 0352, 0353, 0354, 0355, 0356, 0357, 0360,
	0362, 0363, 0364, 0365, 0346, 0350, 0343, 0376,
	0373, 0375, 0377, 0371, 0370, 0374, 0340, 0361,
	0301, 0302, 0327, 0307, 0304, 0305, 0326, 0332,
	0311, 0312, 0313, 0314, 0315, 0316, 0317, 0320,
	0322, 0323, 0324, 0325, 0306, 0310, 0303, 0336,
	0333, 0335, 0337, 0331, 0330, 0334, 0300, 0321
};

/*
 * Transliterate from KOI-8 to Ucode
 */
KtoU(c)
register c;
{
	if ((c&0300) == 0300)
		c = KUtab[c&077];
	c &= 0377;
	return(c);
}

/*
 * Transliterate from Ucode to KOI-8
 */
UtoK(c)
register c;
{
	if ((c&0300) == 0300)
		c = UKtab[c&077];
	c &= 0377;
	return(c);
}

/*
 * Лексикографическое сравнение строк
 */
Xstrcmp(a, b)
register char *a, *b;
{
	while(*a) {
		if(*a++ != *b++)
			return( KtoU(*--a) - KtoU(*--b) );
	}
	return(0);
}
#endif KOI8

char *cclenter(p)
register char *p;
{
	register i, c;
	char *op;
	int   cc;

	op = p;
	i = 0;
	while ((c = *p++) != 0) {
		if (c == '-' && i > 0 && chars[i-1] != 0) {
			if (*p != 0) {
#ifdef KOI8
				c  = KtoU(chars[i-1]);
				cc = KtoU(*p);
#else
				c  = U(chars[i-1]);
				cc = U(*p);
#endif KOI8
				while (c < cc) {
					if (i >= MAXLIN)
						overflo();
#ifdef KOI8
					chars[i++] = UtoK(++c);
#else
					chars[i++] = ++c;
#endif KOI8
				}
				p++;
				continue;
			}
		}
		if (i >= MAXLIN)
			overflo();
		chars[i++] = c;
	}
	chars[i++] = '\0';
	dprintf("cclenter: in = |%s|, out = |%s|\n", op, chars, NULL);
	xfree(op);
	return(tostring(chars));
}

overflo()
{
	error(FATAL, ediag("regular expression too long\n",
			   "слишком длинное регулярное выражение\n"));
}

cfoll(v)                /* enter follow set of each leaf of vertex v into foll[leaf] */
register node *v;
{
	register i;
	int prev;
	int *add();

	switch(type(v)) {
		LEAF
			setcnt = 0;
			for (i=1; i<=line; i++)
				setvec[i] = 0;
			follow(v);
			if (notin(foll, ( (int) left(v))-1, &prev)) {
				foll[(int) left(v)] = add(setcnt);
			}
			else
				foll[ (int) left(v)] = foll[prev];
			break;
		UNARY
			cfoll(left(v));
			break;
		case CAT:
		case OR:
			cfoll(left(v));
			cfoll(right(v));
			break;
		default:
			error(FATAL, ediag("unknown type %d in cfoll",
					   "неизвестный тип %d в cfoll"), type(v));
	}
}

first(p)                        /* collects initially active leaves of p into setvec */
register node *p;               /* returns 0 or 1 depending on whether p matches empty string */
{
	register b;

	switch(type(p)) {
		LEAF
			if (setvec[(int) left(p)] != 1) {
				setvec[(int) left(p)] = 1;
				setcnt++;
			}
			if (type(p) == CCL && (*(char *) right(p)) == '\0')
				return(0);              /* empty CCL */
			else return(1);
		case FINAL:
		case PLUS:
			if (first(left(p)) == 0) return(0);
			return(1);
		case STAR:
		case QUEST:
			first(left(p));
			return(0);
		case CAT:
			if (first(left(p)) == 0 && first(right(p)) == 0) return(0);
			return(1);
		case OR:
			b = first(right(p));
			if (first(left(p)) == 0 || b == 0) return(0);
			return(1);
	}
	error(FATAL, ediag("unknown type %d in first\n",
			   "неизвестный тип %d в first\n"), type(p));
	return(-1);
}

follow(v)
node *v;                /* collects leaves that can follow v into setvec */
{
	node *p;

	if (type(v) == FINAL)
		return;
	p = parent(v);
	switch (type(p)) {
		case STAR:
		case PLUS:      first(v);
				follow(p);
				return;

		case OR:
		case QUEST:     follow(p);
				return;

		case CAT:       if (v == left(p)) {     /* v is left child of p */
					if (first(right(p)) == 0) {
						follow(p);
						return;
					}
				}
				else            /* v is right child */
					follow(p);
				return;
		case FINAL:     if (setvec[line] != 1) {
					setvec[line] = 1;
					setcnt++;
				}
				return;
	}
}

member(c, s)    /* is c in s? */
register char *s;
register c;
{
	c = U(c);
	while (*s)
		if (c == U(*s++))
			return(1);
	return(0);
}

notin(array, n, prev)           /* is setvec in array[0] thru array[n]? */
int **array;
int *prev; {
	register i, j;
	int *ptr;
	for (i=0; i<=n; i++) {
		ptr = array[i];
		if (*ptr == setcnt) {
			for (j=0; j < setcnt; j++)
				if (setvec[*(++ptr)] != 1) goto nxt;
			*prev = i;
			return(0);
		}
		nxt: ;
	}
	return(1);
}

int *add(n) {           /* remember setvec */
	int *ptr, *p;
	register i;
	if ((p = ptr = (int *) malloc((n+1)*sizeof(int))) == NULL)
		overflo();
	*ptr = n;
	dprintf("add(%d)\n", n, NULL, NULL);
	for (i=1; i <= line; i++)
		if (setvec[i] == 1) {
			*(++ptr) = i;
			dprintf("  ptr = %o, *ptr = %d, i = %d\n", ptr, *ptr, i);
		}
	dprintf("\n", NULL, NULL, NULL);
	return(p);
}

struct fa *cgotofn()
{
	register i, k;
	register int *ptr;
	int  c;
	char *p;
	node *cp;
	int j, n, s, ind, numtrans;
	int finflg;
	int curpos, num, prev;
	struct fa *where[NSTATES];

	int fatab[257];
	struct fa *pfa;

	char index[MAXLIN];
	char iposns[MAXLIN];
	int sposns[MAXLIN];
	int spmax, spinit;

	char symbol[NCHARS];
	char isyms[NCHARS];
	char ssyms[NCHARS];
	int ssmax, ssinit;

	for (i=0; i<=line; i++) index[i] = iposns[i] = setvec[i] = 0;
	for (i=0; i<NCHARS; i++)  isyms[i] = symbol[i] = 0;
	setcnt = 0;
	/* compute initial positions and symbols of state 0 */
	ssmax = 0;
	ptr = state[0] = foll[0];
	spinit = *ptr;
	for (i=0; i<spinit; i++) {
		curpos = *(++ptr);
		sposns[i] = curpos;
		iposns[curpos] = 1;
		cp = point[curpos];
		dprintf("i = %d, spinit = %d, curpos = %d\n", i, spinit, curpos);
		switch (type(cp)) {
			case CHAR:
				k = (int) right(cp);
				k = U(k);
				dprintf( "CHAR 1: %o\n", k, NULL, NULL );
				if (isyms[k] != 1) {
					isyms[k] = 1;
					ssyms[ssmax++] = k;
				}
				break;
			case DOT:
				for (k=1; k<NCHARS; k++) {
					if (k != HAT) {
						if (isyms[k] != 1) {
							isyms[k] = 1;
							ssyms[ssmax++] = k;
						}
					}
				}
				break;
			case CCL:
				for (p = (char *) right(cp); *p; p++) {
					if (*p != HAT) {
						if (isyms[U(*p)] != 1) {
							isyms[U(*p)] = 1;
							ssyms[ssmax++] = *p;
						}
					}
				}
				break;
			case NCCL:
				for (k=1; k<NCHARS; k++) {
					if (k != HAT && !member(k, (char *) right(cp))) {
						if (isyms[k] != 1) {
							isyms[k] = 1;
							ssyms[ssmax++] = k;
						}
					}
				}
		}
	}
	ssinit = ssmax;
	n = 0;
	for (s=0; s<=n; s++)  {
		dprintf("s = %d\n", s, NULL, NULL);
		ind = 0;
		numtrans = 0;
		finflg = 0;
		if (*(state[s] + *state[s]) == line) {          /* s final? */
			finflg = 1;
			goto tenter;
		}
		spmax = spinit;
		ssmax = ssinit;
		ptr = state[s];
		num = *ptr;
		for (i=0; i<num; i++) {
			curpos = *(++ptr);
			if (iposns[curpos] != 1 && index[curpos] != 1) {
				index[curpos] = 1;
				sposns[spmax++] = curpos;
			}
			cp = point[curpos];
			switch (type(cp)) {
				case CHAR:
					k = (int) right(cp);
					k = U(k);
					dprintf( "CHAR 2: %o\n", k, NULL, NULL );
					if (isyms[k] == 0 && symbol[k] == 0) {
						symbol[k] = 1;
						ssyms[ssmax++] = k;
					}
					break;
				case DOT:
					for (k=1; k<NCHARS; k++) {
						if (k != HAT) {
							if (isyms[k] == 0 && symbol[k] == 0) {
								symbol[k] = 1;
								ssyms[ssmax++] = k;
							}
						}
					}
					break;
				case CCL:
					for (p = (char *) right(cp); *p; p++) {
						if (*p != HAT) {
							if (isyms[U(*p)] == 0 && symbol[U(*p)] == 0) {
								symbol[U(*p)] = 1;
								ssyms[ssmax++] = *p;
							}
						}
					}
					break;
				case NCCL:
					for (k=1; k<NCHARS; k++) {
						if (k != HAT && !member(k, (char *) right(cp))) {
							if (isyms[k] == 0 && symbol[k] == 0) {
								symbol[k] = 1;
								ssyms[ssmax++] = k;
							}
						}
					}
			}
		}
		for (j=0; j<ssmax; j++) {       /* nextstate(s, ssyms[j]) */
			c = U(ssyms[j]);
			symbol[c] = 0;
			setcnt = 0;
			for (k=0; k<=line; k++) setvec[k] = 0;
			for (i=0; i<spmax; i++) {
				index[sposns[i]] = 0;
				cp = point[sposns[i]];
				if ((k = type(cp)) != FINAL)
					if (k == CHAR && c == U( ((int) right(cp)))
					 || k == DOT
					 || k == CCL && member(c, (char *) right(cp))
					 || k == NCCL && !member(c, (char *) right(cp))) {
						ptr = foll[sposns[i]];
						num = *ptr;
						for (k=0; k<num; k++) {
							if (setvec[*(++ptr)] != 1
								&& iposns[*ptr] != 1) {
								setvec[*ptr] = 1;
								setcnt++;
							}
						}
					}
			} /* end nextstate */
			if (notin(state, n, &prev)) {
				if (n >= NSTATES) {
					dprintf("cgotofn: notin; state = %d, n = %d\n", state, n, NULL);
					overflo();
				}
				state[++n] = add(setcnt);
				dprintf("       delta(%d,%o) = %d", s,c,n);
				dprintf(", ind = %d\n", ind+1, NULL, NULL);
				fatab[++ind] = U(c);
				fatab[++ind] = n;
				numtrans++;
			}
			else {
				if (prev != 0) {
					dprintf("       delta(%d,%o) = %d", s,c,prev);
					dprintf(", ind = %d\n", ind+1, NULL, NULL);
					fatab[++ind] = U(c);
					fatab[++ind] = prev;
					numtrans++;
				}
			}
		}
	tenter:
		if ((pfa = (struct fa *) malloc((numtrans + 1) * sizeof(struct fa))) == NULL)
			overflo();
		where[s] = pfa;
		if (finflg)
			pfa->cch = -1;          /* s is a final state */
		else
			pfa->cch = numtrans;
		pfa->st = 0;
		for (i=1, pfa += 1; i<=numtrans; i++, pfa++) {
			pfa->cch = fatab[2*i-1];
			pfa->st = (struct fa *) fatab[2*i];
		}
	}
	for (i=0; i<=n; i++) {
		xfree(state[i]);        /* free state[i] */
		pfa = where[i];
		pfa->st = where[0];
		dprintf("state %d: (%o)\n", i, pfa, NULL);
		dprintf("       numtrans = %d,  default = %o\n", pfa->cch, pfa->st, NULL);
		for (k=1; k<=pfa->cch; k++) {
			(pfa+k)->st = where[ (int) (pfa+k)->st];
			dprintf("       char = %o,      nextstate = %o\n",(pfa+k)->cch, (pfa+k)->st, NULL);
		}
	}
	pfa = where[0];
	if ((num = pfa->cch) < 0)
		return(where[0]);
	for (pfa += num; num; num--, pfa--)
		if (pfa->cch == HAT) {
			return(pfa->st);
		}
	return(where[0]);
}

match(pfa, p)
register struct fa *pfa;
register char *p;
{
	register count;
	int  c;

	if (p == 0) return(0);
	if (pfa->cch == 1) {            /* fast test for first character, if possible */
		c = (++pfa)->cch;
		do
			if (c == U(*p)) {
				p++;
				pfa = pfa->st;
				goto adv;
			}
		while (*p++ != 0);
		return(0);
	}
   adv: if ((count = pfa->cch) < 0) return(1);
	do {
		for (pfa += count; count; count--, pfa--)
			if (pfa->cch == U(*p)) {
				break;
			}
		pfa = pfa->st;
		if ((count = pfa->cch) < 0) return(1);
	} while(*p++ != 0);
	return(0);
}
@


1.3
log
@Забыл include ediag.h
@
text
@d3 3
d18 1
a18 1
static char rcsid[] = "$Header: b.c,v 1.2 87/01/07 21:57:03 avg Exp $";
d193 1
a193 1
			return( KtoU(*a) - KtoU(*b) );
@


1.2
log
@Сделаны правки под русские буквы.
- / - двуязычные диагностики.
Исправлены некоторые ошибки.
@
text
@d3 5
d15 1
a15 1
static char rcsid[] = "$Header$";
d23 1
@


1.1
log
@Initial revision
@
text
@d2 4
a5 1
 * $Log$
d8 8
a16 1
#include "stdio.h"
d22 1
a22 1
#define NCHARS 128
d24 1
d46 5
a50 5
int	*state[NSTATES];
int	*foll[MAXLIN];
char	chars[MAXLIN];
int	setvec[MAXLIN];
node	*point[MAXLIN];
d52 2
a53 2
int	setcnt;
int	line;
d56 1
a56 1
struct fa *makedfa(p)	/* returns dfa for tree pointed to by p */
d63 1
a63 1
	p1 = op2(FINAL, p1, (node *) 0);		/* install FINAL node */
d66 4
a69 4
	penter(p1);	/* enter parent pointers and leaf indices */
	point[line] = p1;	/* FINAL node */
	setvec[0] = 1;		/* for initial DOT STAR */
	cfoll(p1);	/* set up follow sets */
d71 1
a71 1
	freetr(p1);	/* add this when alloc works */
d75 1
a75 1
penter(p)	/* set up parent pointers and leaf indices */
d95 2
a96 1
			error(FATAL, "unknown type %d in penter\n", type(p));
d101 1
a101 1
freetr(p)	/* free parse tree and follow sets */
d120 2
a121 1
			error(FATAL, "unknown type %d in freetr", type(p));
d125 65
d195 1
d202 8
a209 2
				c = chars[i-1];
				while (c < *p) {
d212 3
d216 1
d234 2
a235 1
	error(FATAL, "regular expression too long\n");
d238 1
a238 1
cfoll(v)		/* enter follow set of each leaf of vertex v into foll[leaf] */
d266 2
a267 1
			error(FATAL, "unknown type %d in cfoll", type(v));
d271 2
a272 2
first(p)			/* collects initially active leaves of p into setvec */
register node *p;		/* returns 0 or 1 depending on whether p matches empty string */
d283 1
a283 1
				return(0);		/* empty CCL */
d301 2
a302 1
	error(FATAL, "unknown type %d in first\n", type(p));
d307 1
a307 1
node *v;		/* collects leaves that can follow v into setvec */
d316 1
a316 1
		case PLUS:	first(v);
d321 1
a321 1
		case QUEST:	follow(p);
d324 1
a324 1
		case CAT:	if (v == left(p)) {	/* v is left child of p */
d330 1
a330 1
				else		/* v is right child */
d333 1
a333 1
		case FINAL:	if (setvec[line] != 1) {
d341 3
a343 2
member(c, s)	/* is c in s? */
register char c, *s;
d345 1
d347 1
a347 1
		if (c == *s++)
d352 1
a352 1
notin(array, n, prev)		/* is setvec in array[0] thru array[n]? */
d370 1
a370 1
int *add(n) {		/* remember setvec */
d390 1
a390 1
	char c;
d427 2
d447 2
a448 2
						if (isyms[*p] != 1) {
							isyms[*p] = 1;
d468 1
a468 1
	dprintf("s = %d\n", s, NULL, NULL);
d472 1
a472 1
		if (*(state[s] + *state[s]) == line) {		/* s final? */
d490 2
d510 2
a511 2
							if (isyms[*p] == 0 && symbol[*p] == 0) {
								symbol[*p] = 1;
d528 2
a529 2
		for (j=0; j<ssmax; j++) {	/* nextstate(s, ssyms[j]) */
			c = ssyms[j];
d537 1
a537 1
					if (k == CHAR && c == (int) right(cp)
d558 1
a558 1
				dprintf("	delta(%d,%o) = %d", s,c,n);
d560 1
a560 1
				fatab[++ind] = c;
d566 1
a566 1
					dprintf("	delta(%d,%o) = %d", s,c,prev);
d568 1
a568 1
					fatab[++ind] = c;
d579 1
a579 1
			pfa->cch = -1;		/* s is a final state */
d589 1
a589 1
		xfree(state[i]);	/* free state[i] */
d593 1
a593 1
		dprintf("	numtrans = %d,	default = %o\n", pfa->cch, pfa->st, NULL);
d596 1
a596 1
			dprintf("	char = %o,	nextstate = %o\n",(pfa+k)->cch, (pfa+k)->st, NULL);
d614 2
a615 1
	char c;
d617 1
a617 1
	if (pfa->cch == 1) {		/* fast test for first character, if possible */
d620 1
a620 1
			if (c == *p) {
d631 1
a631 1
			if (pfa->cch == *p) {
@
