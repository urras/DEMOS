head     2.2;
access   ;
symbols  v7:1.1 DEMOS2:2 bsd29:1.2 MNOS:1.1.2 DEMOS1:1.1.1;
locks    ;
comment  @ *	@;


2.2
date     88.06.24.18.29.10;  author ache;  state Exp;
branches ;
next     2.1;

2.1
date     86.11.26.16.33.27;  author dmitry;  state Exp;
branches ;
next     2.0;

2.0
date     86.11.25.20.38.28;  author dmitry;  state Exp;
branches ;
next     1.5;

1.5
date     86.11.25.15.48.22;  author dmitry;  state Exp;
branches ;
next     1.4;

1.4
date     86.11.24.21.57.49;  author dmitry;  state Exp;
branches ;
next     1.3;

1.3
date     86.11.24.21.51.01;  author dmitry;  state Exp;
branches ;
next     1.2;

1.2
date     86.11.24.21.02.18;  author dmitry;  state Rel;
branches ;
next     1.1;

1.1
date     86.11.24.18.16.21;  author dmitry;  state Rel;
branches 1.1.1.1 1.1.2.1;
next     ;

1.1.1.1
date     86.11.24.18.28.26;  author dmitry;  state Rel;
branches ;
next     ;

1.1.2.1
date     86.11.24.19.32.30;  author dmitry;  state Stab;
branches ;
next     ;


desc
@Си-компилятор Д.М.Ритчи
Первый проход.
@


2.2
log
@Таблица меток увеличина на 100
@
text
@/*
 *      $Header: c0.h,v 2.1 86/11/26 16:33:27 dmitry Exp $
 *
 *       C compiler-- first pass header
 *
 *      $Log:	c0.h,v $
 *	Revision 2.1  86/11/26  16:33:27  dmitry
 *	Оформлено под Manifest avg.
 *	
 */

#include <stdio.h>
#include <sys/code.h>

/*
 * parameters
 */

#define LTYPE   long    /* change to int if no long consts */
#define MAXINT  077777  /* Largest positive short integer */
#define MAXUINT 0177777 /* largest unsigned integer */
#define NCPS    128     /*f # chars per symbol */
#define BUFNAME 8*1024  /* Размер буфера под имена переменных */
#ifdef  FORTY
#define HSHSIZ  700     /* Smaller but be sure vi compiles */
#else
#define HSHSIZ  900     /* # entries in hash table for names */
#endif  FORTY
#define CMSIZ   40      /* size of expression stack */
#define SSIZE   20      /* size of other expression stack */
#define SWSIZ   230     /* size of switch table */
#define NMEMS   128     /* Number of members in a structure */
#define NBPW    16      /* bits per word, object machine */
#define NBPC    8       /* bits per character, object machine */
#define NCPW    2       /* chars per word, object machine */
#define LNCPW   2       /* chars per word, compiler's machine */
int     STAUTO;         /* offset of first auto variable */
#define STARG   4       /* offset of first argument */
#define CMASK   0377    /* mask for access to char value as unsigned */


/*
 * # bytes in primitive types
 */
#define SZCHAR  1
#define SZINT   2
#define SZPTR   2
#define SZFLOAT 4
#define SZLONG  4
#define SZDOUB  8

/*
 * format of a structure description
 */
struct str {
	int     ssize;                  /* structure size */
	struct hshtab   **memlist;      /* member list */
};

/*
 * For fields, strp points here instead.
 */
struct field {
	int     flen;           /* field width in bits */
	int     bitoffs;        /* shift count */
};

/*
 * Structure of tree nodes for operators
 */
struct tnode {
	int     op;             /* operator */
	int     type;           /* data type */
	int     *subsp;         /* subscript list (for arrays) */
	struct  str *strp;      /* structure description for structs */
	struct  tnode *tr1;     /* left operand */
	struct  tnode *tr2;     /* right operand */
};

/*
 * Tree node for constants
 */
struct  cnode {
	int     op;
	int     type;
	int     *subsp;
	struct  str *strp;
	int     value;
};

/*
 * Tree node for long constants
 */
struct lnode {
	int     op;
	int     type;
	int     *subsp;
	struct  str *strp;
	LTYPE   lvalue;
};

/*
 * tree node for floating
 * constants
 */
struct  fnode {
	int     op;
	int     type;
	int     *subsp;
	struct  str *strp;
	char    *cstr;
};

/*
 * Structure of namelist
 */
/*
 * Pushed-down entry for block structure
 */
struct  phshtab {
	char    hclass;
	char    hflag;
	int     htype;
	int     *hsubsp;
	struct  str *hstrp;
	int     hoffset;
	struct  phshtab *hpdown;
	char    hblklev;
	char    hnlen;  /*f */
};

/*
 * Top-level namelist
 */
struct hshtab {
	char    hclass;         /* storage class */
	char    hflag;          /* various flags */
	int     htype;          /* type */
	int     *hsubsp;        /* subscript list */
	struct  str *hstrp;     /* structure description */
	int     hoffset;        /* post-allocation location */
	struct  phshtab *hpdown;        /* Pushed-down name in outer block */
	char    hblklev;        /* Block level of definition */
	char    hnlen;          /* Name length */
	char    *name;          /* ASCII name */
};

/*
 * Place used to keep dimensions
 * during declarations
 */
struct  tdim {
	int     rank;
	int     dimens[5];
};

/*
 * Table for recording switches.
 */
struct swtab {
	int     swlab;
	int     swval;
};

char    cvtab[4][4];
char    filename[64];
int     opdope[];
char    ctab[];
char    *symbuf;
int     hshused;
struct  hshtab  hshtab[HSHSIZ];
struct  tnode **cp;
int     isn;
struct  swtab   swtab[SWSIZ];
struct  swtab   *swp;
int     contlab;
int     brklab;
int     retlab;
int     deflab;
unsigned autolen;               /* make these int if necessary */
unsigned maxauto;               /* ... will only cause trouble rarely */
int     peeksym;
int     peekc;
int     eof;
int     line, lineexpr; /* Начало очередного выражения */
char    *funcbase;
char    *curbase;
char    *coremax;
char    *maxdecl;
struct  hshtab  *defsym;
struct  hshtab  *funcsym;
int     proflg;
int     ciflg;
int     strucflg;
struct  hshtab  *csym;
int     cval;
LTYPE   lcval;
int     nchstr;
int     nerror;
struct  hshtab  **paraml;
struct  hshtab  **parame;
int     strflg;
int     mosflg;
int     initflg;
int     uflag;
int     inhdr;
char    sbuf[BUFSIZ];
FILE    *sbufp;
int     regvar;
int     bitoffs;
struct  tnode   funcblk;
char    cvntab[];
char    numbuf[64];
struct  hshtab **memlist;
int     nmems;
struct  hshtab  structhole;
int     blklev;
int     mossym;

/*
  operators
*/
#define EOFC    0
#define NULLOP  218
#define SEMI    1
#define LBRACE  2
#define RBRACE  3
#define LBRACK  4
#define RBRACK  5
#define LPARN   6
#define RPARN   7
#define COLON   8
#define COMMA   9
#define FSEL    10
#define CAST    11
#define ETYPE   12

#define KEYW    19
#define NAME    20
#define CON     21
#define STRING  22
#define FCON    23
#define SFCON   24
#define LCON    25
#define SLCON   26

#define SIZEOF  91
#define INCBEF  30
#define DECBEF  31
#define INCAFT  32
#define DECAFT  33
#define EXCLA   34
#define AMPER   35
#define STAR    36
#define NEG     37
#define COMPL   38

#define DOT     39
#define PLUS    40
#define MINUS   41
#define TIMES   42
#define DIVIDE  43
#define MOD     44
#define RSHIFT  45
#define LSHIFT  46
#define AND     47
#define OR      48
#define EXOR    49
#define ARROW   50
#define ITOF    51
#define FTOI    52
#define LOGAND  53
#define LOGOR   54
#define FTOL    56
#define LTOF    57
#define ITOL    58
#define LTOI    59
#define ITOP    13
#define PTOI    14
#define LTOP    15

#define EQUAL   60
#define NEQUAL  61
#define LESSEQ  62
#define LESS    63
#define GREATEQ 64
#define GREAT   65
#define LESSEQP 66
#define LESSP   67
#define GREATQP 68
#define GREATP  69

#define ASPLUS  70
#define ASMINUS 71
#define ASTIMES 72
#define ASDIV   73
#define ASMOD   74
#define ASRSH   75
#define ASLSH   76
#define ASSAND  77
#define ASOR    78
#define ASXOR   79
#define ASSIGN  80

#define QUEST   90
#define MAX     93
#define MAXP    94
#define MIN     95
#define MINP    96
#define SEQNC   97
#define CALL    100
#define MCALL   101
#define JUMP    102
#define CBRANCH 103
#define INIT    104
#define SETREG  105
#define RFORCE  110
#define BRANCH  111
#define LABEL   112
#define NLABEL  113
#define RLABEL  114
#define STRASG  115
#define ITOC    109
#define SEOF    200     /* stack EOF marker in expr compilation */

/*
  types
*/
#define INT     0
#define CHAR    1
#define FLOAT   2
#define DOUBLE  3
#define STRUCT  4
#define LONG    6
#define UNSIGN  7
#define UNION   8               /* adjusted later to struct */

#define ALIGN   01
#define TYPE    07
#define BIGTYPE 060000
#define TYLEN   2
#define XTYPE   (03<<3)
#define PTR     010
#define FUNC    020
#define ARRAY   030

/*
  storage classes
*/
#define KEYWC   1
#define DEFXTRN 20
#define TYPEDEF 9
#define MOS     10
#define AUTO    11
#define EXTERN  12
#define STATIC  13
#define REG     14
#define STRTAG  15
#define ARG     16
#define ARG1    17
#define AREG    18
#define MOU     21
#define ENUMTAG 22
#define ENUMCON 24

/*
  keywords
*/
#define GOTO    20
#define RETURN  21
#define IF      22
#define WHILE   23
#define ELSE    24
#define SWITCH  25
#define CASE    26
#define BREAK   27
#define CONTIN  28
#define DO      29
#define DEFAULT 30
#define FOR     31
#define ENUM    32

/*
  characters
*/
#define BSLASH  117
#define SHARP   118
#define INSERT  119
#define PERIOD  120
#define SQUOTE  121
#define DQUOTE  122
#define LETTER  123
#define DIGIT   124
#define NEWLN   125
#define SPACE   126
#define UNKN    127

/*
 * Special operators in intermediate code
 */
#define BDATA   200
#define WDATA   201
#define PROG    202
#define DATA    203
#define BSS     204
#define CSPACE  205
#define SSPACE  206
#define SYMDEF  207
#define SAVE    208
#define RETRN   209
#define EVEN    210
#define PROFIL  212
#define SWIT    213
#define EXPR    214
#define SNAME   215
#define RNAME   216
#define ANAME   217
#define SETSTK  219
#define SINIT   220

/*
  Flag bits
*/

#define BINARY  01
#define LVALUE  02
#define RELAT   04
#define ASSGOP  010
#define LWORD   020
#define RWORD   040
#define COMMUTE 0100
#define RASSOC  0200
#define LEAF    0400

/*
 * Conversion codes
 */
#define ITF     1
#define ITL     2
#define LTF     3
#define ITP     4
#define PTI     5
#define FTI     6
#define LTI     7
#define FTL     8
#define LTP     9
#define ITC     10
#define XX      15

/*
 * symbol table flags
 */

#define FMOS    01
#define FKEYW   04
#define FFIELD  020
#define FINIT   040
#define FLABL   0100
#define FEXAM   0200

/*
 * functions
 */
char    *sbrk();
struct  tnode *tree();
char    *copnum();
struct  tnode *convert();
struct  tnode *chkfun();
struct  tnode *disarray();
struct  tnode *block();
struct  cnode *cblock();
struct  fnode *fblock();
char    *gblock();
struct  tnode *pexpr();
struct  str *strdec();
struct  hshtab *xprtype();
struct  tnode *nblock();
@


2.1
log
@Оформлено под Manifest avg.
@
text
@d2 1
a2 1
 *      $Header$
d6 4
a9 1
 *      $Log$
d25 1
a25 1
#define HSHSIZ  600     /* Smaller but be sure vi compiles */
d27 1
a27 1
#define HSHSIZ  800     /* # entries in hash table for names */
@


2.0
log
@Исправлены диагностики
@
text
@d2 2
d5 2
@


1.5
log
@Вместо whoami.h будем включать sys/code.h.
В последнем указана кодировка.
@
text
@@


1.4
log
@Сливки с МНОС РЛ 1.2 (флеровские правки)
@
text
@d6 1
a6 1
#include <whoami.h>
@


1.3
log
@Сливки с Демос 1.3
@
text
@a0 1
#
d2 2
a3 2
*       C compiler-- first pass header
*/
d187 1
@


1.2
log
@Версия из bsd 2.9
@
text
@a0 1
/*      @@(#)c0.h        2.4     SCCS id keyword */
d16 2
a17 1
#define NCPS    8       /* # chars per symbol */
d33 1
d123 1
d138 2
a139 1
	char    name[NCPS];     /* ASCII name */
d163 1
a163 1
char    symbuf[NCPS+2];
d179 1
a179 1
int     line;
d187 1
d198 1
d452 1
@


1.1
log
@Initial revision
@
text
@d1 1
d8 1
d18 5
a22 1
#define HSHSIZ  400     /* # entries in hash table for names */
d31 1
a31 1
#define STAUTO  (-6)    /* offset of first auto variable */
@


1.1.2.1
log
@Версия из МНОС РЛ 1.2
@
text
@d1 1
a26 1
#define CMASK   0377    /* mask for access to char value as unsigned */
a177 2
int     ciflg;
int     strucflg;
@


1.1.1.1
log
@Версия из Демос 1.3
@
text
@d7 1
a7 1
#define NEWBEG
d15 1
a15 1
#define NCPS    128     /*f # chars per symbol */
a16 1
#define BUFNAME 8*1024  /* Размер буфера под имена переменных */
a26 1
#define CMASK   0377    /* mask for access to char value as unsigned */
a115 1
	char    hnlen;  /*f */
d130 1
a130 2
	char    hnlen;          /* Name length */
	char    *name;          /* ASCII name */
d154 1
a154 1
char    *symbuf;
d170 1
a170 1
int     line, lineexpr; /* Начало очередного выражения */
a177 1
int     ciflg;
a187 1
int     uflag;
a440 1
#define FEXAM   0200
@
