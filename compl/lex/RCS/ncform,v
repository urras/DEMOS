head     1.2;
access   ;
symbols  ;
locks    ;
comment  @ *@;


1.2
date     86.12.30.18.15.56;  author avg;  state Exp;
branches ;
next     1.1;

1.1
date     86.12.28.18.51.34;  author avg;  state Exp;
branches ;
next     1.0;

1.0
date     86.12.28.18.43.59;  author avg;  state Exp;
branches ;
next     ;


desc
@
Процедура лексического анализа для LEX.
@


1.2
log
@Добавлен Header.
@
text
@/* $Header$ */
int yylineno =1;
# define YYU(x) ((int)(x)&0377)
# define NLSTATE yyprevious=YYNEWLINE
char yytext[YYLMAX];
struct yysvf *yylstate [YYLMAX], **yylsp, **yyolsp;
char yysbuf[YYLMAX];
char *yysptr = yysbuf;
int *yyfnd;
extern struct yysvf *yyestate;
int yyprevious = YYNEWLINE;
yylook(){
	register struct yysvf *yystate, **lsp;
	register struct yywork *yyt;
	struct yysvf *yyz;
	int yych;
	struct yywork *yyr;
# ifdef LEXDEBUG
	int debug;
# endif
	char *yylastch;
	/* start off machines */
# ifdef LEXDEBUG
	debug = 0;
# endif
	if (!yymorfg)
		yylastch = yytext;
	else {
		yymorfg=0;
		yylastch = yytext+yyleng;
		}
	for(;;){
		lsp = yylstate;
		yyestate = yystate = yybgin;
		if (yyprevious==YYNEWLINE) yystate++;
		for (;;){
# ifdef LEXDEBUG
			if(debug)fprintf(yyout,ediag("state %d\n","состояние %d\n"),yystate-yysvec-1);
# endif
			yyt = yystate->yystoff;
			if(yyt == yycrank){             /* may not be any transitions */
				yyz = yystate->yyother;
				if(yyz == 0)break;
				if(yyz->yystoff == yycrank)break;
				}
			*yylastch++ = yych = input();
		tryagain:
# ifdef LEXDEBUG
			if(debug){
				fprintf(yyout,ediag("symbol ","символ "));
				allprint(yych);
				putchar('\n');
				}
# endif
			yyr = yyt;
			if ( (int)yyt > (int)yycrank){
				yyt = yyr + yych;
				if (yyt <= yytop && YYU(yyt->verify)+yysvec == yystate){
					if(yyt->advance == YYLERR)       /* error transitions */
						{unput(*--yylastch);break;}
					*lsp++ = yystate = YYU(yyt->advance)+yysvec;
					goto contin;
					}
				}
# ifdef YYOPTIM
			else if((int)yyt < (int)yycrank) {              /* r < yycrank */
				yyt = yyr = yycrank+(yycrank-yyt);
# ifdef LEXDEBUG
				if(debug)fprintf(yyout,ediag("compressed state\n","сжатое состояние\n"));
# endif
				yyt = yyt + yych;
				if(yyt <= yytop && YYU(yyt->verify)+yysvec == yystate){
					if(yyt->advance == YYLERR)       /* error transitions */
						{unput(*--yylastch);break;}
					*lsp++ = yystate = YYU(yyt->advance)+yysvec;
					goto contin;
					}
				yyt = yyr + YYU(yymatch[yych]);
# ifdef LEXDEBUG
				if(debug){
					fprintf(yyout,ediag("try to put back char ","попытка положить назад символ "));
					allprint(YYU(yymatch[yych]));
					putchar('\n');
					}
# endif
				if(yyt <= yytop && YYU(yyt->verify)+yysvec == yystate){
					if(yyt->advance == YYLERR)       /* error transition */
						{unput(*--yylastch);break;}
					*lsp++ = yystate = YYU(yyt->advance)+yysvec;
					goto contin;
					}
				}
			if ((yystate = yystate->yyother) && (yyt= yystate->yystoff) != yycrank){
# ifdef LEXDEBUG
				if(debug)fprintf(yyout,ediag("return back to state %d\n","возврат к состоянию %d\n"),yystate-yysvec-1);
# endif
				goto tryagain;
				}
# endif
			else
				{unput(*--yylastch);break;}
		contin:
# ifdef LEXDEBUG
			if(debug){
				fprintf(yyout,ediag("state %d symbol ","состояние %d символ "),yystate-yysvec-1);
				allprint(yych);
				putchar('\n');
				}
# endif
			;
			}
# ifdef LEXDEBUG
		if(debug){
			fprintf(yyout,ediag("stopped on %d with ","остановлено на %d с "),*(lsp-1)-yysvec-1);
			allprint(yych);
			putchar('\n');
			}
# endif
		while (lsp-- > yylstate){
			*yylastch-- = 0;
			if (*lsp != 0 && (yyfnd= (*lsp)->yystops) && *yyfnd > 0){
				yyolsp = lsp;
				if(yyextra[*yyfnd]){            /* must backup */
					while(yyback((*lsp)->yystops,-*yyfnd) != 1 && lsp > yylstate){
						lsp--;
						unput(*yylastch--);
						}
					}
				yyprevious = YYU(*yylastch);
				yylsp = lsp;
				yyleng = yylastch-yytext+1;
				yytext[yyleng] = 0;
# ifdef LEXDEBUG
				if(debug){
					fprintf(yyout,ediag("\nfound ","\nнайдено "));
					sprint(yytext);
					fprintf(yyout,ediag(" действие %d\n"," action %d\n"),*yyfnd);
					}
# endif
				return(*yyfnd++);
				}
			unput(*yylastch);
			}
		if (yytext[0] == 0  /* && feof(yyin) */)
			{
			yysptr=yysbuf;
			return(0);
			}
		yyprevious = yytext[0] = input();
		if (yyprevious>0)
			output(yyprevious);
		yylastch=yytext;
# ifdef LEXDEBUG
		if(debug)putchar('\n');
# endif
		}
	}
yyback(p, m)
	int *p;
{
if (p==0) return(0);
while (*p)
	{
	if (*p++ == m)
		return(1);
	}
return(0);
}
	/* the following are only used in the lex library */
yyinput(){
	return(input());
	}
yyoutput(c)
  int c; {
	output(c);
	}
yyunput(c)
   int c; {
	unput(c);
	}
@


1.1
log
@Версия из МНОС РЛ 1.2
@
text
@d1 1
@


1.0
log
@Initial revision
@
text
@d2 1
a2 1
# define YYU(x) x
d37 1
a37 1
			if(debug)fprintf(yyout,"state %d\n",yystate-yysvec-1);
d40 1
a40 1
			if(yyt == yycrank){		/* may not be any transitions */
d49 1
a49 1
				fprintf(yyout,"char ");
d57 2
a58 2
				if (yyt <= yytop && yyt->verify+yysvec == yystate){
					if(yyt->advance+yysvec == YYLERR)	/* error transitions */
d60 1
a60 1
					*lsp++ = yystate = yyt->advance+yysvec;
d65 1
a65 1
			else if((int)yyt < (int)yycrank) {		/* r < yycrank */
d68 1
a68 1
				if(debug)fprintf(yyout,"compressed state\n");
d71 2
a72 2
				if(yyt <= yytop && yyt->verify+yysvec == yystate){
					if(yyt->advance+yysvec == YYLERR)	/* error transitions */
d74 1
a74 1
					*lsp++ = yystate = yyt->advance+yysvec;
d80 1
a80 1
					fprintf(yyout,"try fall back character ");
d85 2
a86 2
				if(yyt <= yytop && yyt->verify+yysvec == yystate){
					if(yyt->advance+yysvec == YYLERR)	/* error transition */
d88 1
a88 1
					*lsp++ = yystate = yyt->advance+yysvec;
d94 1
a94 1
				if(debug)fprintf(yyout,"fall back to state %d\n",yystate-yysvec-1);
d104 1
a104 1
				fprintf(yyout,"state %d char ",yystate-yysvec-1);
d113 1
a113 1
			fprintf(yyout,"stopped at %d with ",*(lsp-1)-yysvec-1);
d122 1
a122 1
				if(yyextra[*yyfnd]){		/* must backup */
d134 1
a134 1
					fprintf(yyout,"\nmatch ");
d136 1
a136 1
					fprintf(yyout," action %d\n",*yyfnd);
@
