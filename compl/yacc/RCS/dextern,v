head     1.2;
access   ;
symbols  BSD29:1.0;
locks    ;
comment  @ *@;


1.2
date     86.12.27.17.10.35;  author avg;  state Exp;
branches ;
next     1.1;

1.1
date     86.12.26.17.39.09;  author avg;  state Exp;
branches ;
next     1.0;

1.0
date     86.12.26.17.11.46;  author avg;  state Exp;
branches 1.0.1.1;
next     ;

1.0.1.1
date     87.08.14.18.46.33;  author dmitry;  state Exp;
branches ;
next     ;


desc
@
Определения для построителя трансляторов YACC.
@


1.2
log
@Версия, полученная слиянием из BSD 2.9 и МНОС РЛ 1.2.
@
text
@/*
 * $Log$
 */

#ifndef lint
#define DEXTHDR "$Header$"
#endif

#include <stdio.h>
#include <ctype.h>
#include <ediag.h>

	/*  MANIFEST CONSTANT DEFINITIONS */

	/* base of nonterminal internal numbers */
#define NTBASE 010000

	/* internal codes for error and accept actions */

#define ERRCODE         8190
#define ACCEPTCODE      8191

	/* sizes and limits */

#ifdef HUGE
# define ACTSIZE 12000
# define MEMSIZE 12000
# define NSTATES 750
# define NTERMS 127
# define NPROD 600
# define NNONTERM 300
# define TEMPSIZE 1200
# define CNAMSZ 5000
# define LSETSIZE 600
# define WSETSIZE 350
#endif

     /* relationships which must hold:
	TBITSET ints must hold NTERMS+1 bits...
	WSETSIZE >= NNONTERM
	LSETSIZE >= NNONTERM
	TEMPSIZE >= NTERMS + NNONTERMs + 1
	TEMPSIZE >= NSTATES
     */

#ifdef MEDIUM
# define ACTSIZE  2000
# define MEMSIZE  4000
# define NSTATES 600
# define NTERMS 127
# define NPROD     308
# define NNONTERM  170
# define TEMPSIZE  620
# define CNAMSZ   2000
# define LSETSIZE  310
# define WSETSIZE  172
#endif

     /* relationships which must hold:
	TBITSET ints must hold NTERMS+1 bits...
	WSETSIZE >= NNONTERM
	LSETSIZE >= NNONTERM
	TEMPSIZE >= NTERMS + NNONTERMs + 1
	TEMPSIZE >= NSTATES
     */

#ifdef MINI
# define ACTSIZE  1600
# define MEMSIZE  3600
# define NSTATES 500
# define NTERMS 127
# define NPROD     275
# define NNONTERM  110
# define TEMPSIZE  530
# define CNAMSZ   1600
# define LSETSIZE  150
# define WSETSIZE  110
#endif

#define NAMESIZE 50
#define NTYPES 63

#ifdef WORD32
# define TBITSET ((32+NTERMS)/32)

	/* bit packing macros (may be machine dependent) */
# define BIT(a,i) ((a)[(i)>>5] & (1<<((i)&037)))
# define SETBIT(a,i) ((a)[(i)>>5] |= (1<<((i)&037)))

	/* number of words needed to hold n+1 bits */
# define NWORDS(n) (((n)+32)/32)

#else

# define TBITSET ((16+NTERMS)/16)

	/* bit packing macros (may be machine dependent) */
# define BIT(a,i) ((a)[(i)>>4] & (1<<((i)&017)))
# define SETBIT(a,i) ((a)[(i)>>4] |= (1<<((i)&017)))

	/* number of words needed to hold n+1 bits */
# define NWORDS(n) (((n)+16)/16)
#endif

	/* relationships which must hold:
	TBITSET ints must hold NTERMS+1 bits...
	WSETSIZE >= NNONTERM
	LSETSIZE >= NNONTERM
	TEMPSIZE >= NTERMS + NNONTERMs + 1
	TEMPSIZE >= NSTATES
	*/

#if WSETSIZE < NNONTERM || LSETSIZE < NNONTERM || TEMPSIZE < NTERMS + NNONTERM + 1 || TEMPSIZE < NSTATES
# include " Ошибка в задании размеров массивов"
#endif

	/* associativities */
#define NOASC 0 /* no assoc. */
#define LASC 1  /* left assoc. */
#define RASC 2  /* right assoc. */
#define BASC 3  /* binary assoc. */

	/* flags for state generation */
#define DONE 0
#define MUSTDO 1
#define MUSTLOOKAHEAD 2

	/* flags for a rule having an action, and being reduced */

#define ACTFLAG 04
#define REDFLAG 010

	/* output parser flags */
#define YYFLAG1 (-1000)

	/* macros for getting associativity and precedence levels */

#define ASSOC(i) ((i)&03)
#define PLEVEL(i) (((i)>>4)&077)
#define TYPE(i)  ((i>>10)&077)

	/* macros for setting associativity and precedence levels */

#define SETASC(i,j)  i |= j
#define SETPLEV(i,j) i |= (j<<4)
#define SETTYPE(i,j) i |= (j<<10)

	/* looping macros */

#define TLOOP(i) for(i=1;i<=ntokens;++i)
#define NTLOOP(i) for(i=0;i<=nnonter;++i)
#define PLOOP(s,i) for(i=s;i<nprod;++i)
#define SLOOP(i) for(i=0;i<nstate;++i)
#define WSBUMP(x) ++x
#define WSLOOP(s,j) for(j=s;j<cwp;++j)
#define ITMLOOP(i,p,q) q=pstate[i+1];for(p=pstate[i];p<q;++p)
#define SETLOOP(i) for(i=0;i<tbitset;++i)

	/* I/O descriptors */

extern   FILE   *finput;             /* input file */
extern   FILE   *faction;            /* file for saving actions */
extern   FILE   *fdefine;            /* file for # defines */
extern   FILE   *ftable;             /* y.tab.c file */
extern   FILE   *ftemp;              /* tempfile to pass 2 */
extern   FILE   *foutput;            /* y.output file */

	/* structure declarations */

struct looksets {
	int lset[TBITSET];
};

struct item {
	int *pitem;
	struct looksets *look;
};

struct toksymb {
	char *name;
	int value;
};

struct ntsymb {
	char *name;
	int tvalue;
};

struct wset {
	int *pitem;
	int flag;
	struct looksets ws;
};

	/* token information */

extern int ntokens ;    /* number of tokens */
extern struct toksymb tokset[];
extern int toklev[];    /* vector with the precedence of the terminals */

	/* nonterminal information */

extern int nnonter ;    /* the number of nonterminals */
extern struct ntsymb nontrst[];

	/* grammar rule information */

extern int nprod ;      /* number of productions */
extern int *prdptr[];   /* pointers to descriptions of productions */
extern int levprd[] ;   /* contains production levels to break conflicts */

	/* state information */

extern int nstate ;             /* number of states */
extern struct item *pstate[];   /* pointers to the descriptions of the states */
extern int tystate[];   /* contains type information about the states */
extern int defact[];    /* the default action of the state */
extern int tstates[];   /* the states deriving each token */
extern int ntstates[];  /* the states deriving each nonterminal */
extern int mstates[];   /* the continuation of the chains begun in tstates and ntstates */

	/* lookahead set information */

extern struct looksets lkst[];
extern int nolook;  /* flag to turn off lookahead computations */

	/* working set information */

extern struct wset wsets[];
extern struct wset *cwp;

	/* storage for productions */

extern int mem0[];
extern int *mem;

	/* storage for action table */

/* extern        int     amem[]; */
extern           int    *amem;       /* action table storage */ /* 31.03.85 @@VG */
extern           int    *memp;       /* next free action table position */
extern int indgo[];             /* index to the stored goto table */

	/* temporary vector, indexable by states, terms, or ntokens */

extern int temp1[];
extern int lineno; /* current line number */

	/* statistics collection variables */
extern           int     zzgoent;
extern           int     zzgobest;
extern           int     zzacent;
extern           int     zzexcp;
extern           int     zzclose;
extern           int     zzrrconf;
extern           int     zzsrconf;

	/* define functions with strange types... */

extern char *cstash();
extern struct looksets *flset();
extern char *symnam();
extern char *writem();

	/* default settings for a number of macros */

	/* name of yacc tempfiles */

#ifndef TEMPNAME
# define TEMPNAME "yacc.tmp"
#endif

#ifndef ACTNAME
# define ACTNAME  "yacc.act"
#endif

	/* output file name */

#ifndef OFILE
# define OFILE "y.tab.c"
#endif

	/* user output file name */

#ifndef FILEU
# define FILEU "y.output"
#endif

	/* output file for # defines */

#ifndef FILED
# define FILED "y.tab.h"
#endif

	/* command to clobber tempfiles after use */

#ifndef ZAPFILE
# define ZAPFILE(x) unlink(x)
#endif
@


1.1
log
@Версия из МНОС РЛ 1.2
@
text
@d2 1
a2 6
 *      Слепцов С.А.    28.03.84
 *      Володин Д.      10.08.84        ВМК МГУ
 *      Леонтьев С.Е.   18.08.84        ИПК МАП
 *      Антонов В.Г.    05.12.84        ВМК МГУ, ИПК МАП
 *      Антонов В.Г.    31.03.85        ВМК МГУ, ИПК МАП
 *      Антонов В.Г.    04.04.85        ВМК МГУ, ИПК МАП
d5 4
d11 1
d13 1
a13 1
     /*  MANIFEST CONSTANT DEFINITIONS */
d15 2
a16 2
     /* base of nonterminal internal numbers */
#define NTBASE  010000
d18 1
a18 1
     /* internal codes for error and accept actions */
d23 1
a23 1
     /* sizes and limits */
d49 4
a52 4
# define NSTATES   600
# define NTERMS    127
# define NPROD     308 /* 300 */
# define NNONTERM  170 /* 130 */
d54 3
a56 9
# define CNAMSZ   2000 /* 1700 */
# define LSETSIZE  310 /* 160 */
# define WSETSIZE  172 /* 140 */
# undef getc
# undef getchar
# undef putc
# undef putchar
# define getc(p) fgetc(p)
# define putc(x,p) fputc(x,p)
d70 2
a71 2
# define NSTATES   500
# define NTERMS    127
d78 1
a79 7
# undef getc
# undef getchar
# undef putc
# undef putchar
# define getc(p) fgetc(p)
# define putc(x,p) fputc(x,p)
#endif
d83 2
a84 2
     /* bit packing macros (may be machine dependent) */
#define TBITSET ((16+NTERMS)/16)
d86 3
a88 5
     /* bit packing macros (may be machine dependent) */
#define BIT(a,i) ((a)[(i)>>4] & (1<<((i)&017)))
#define SETBIT(a,i) ((a)[(i)>>4] |= (1<<((i)&017)))
     /* number of words needed to hold n+1 bits */
#define NWORDS(n) (((n)+16)/16)
d90 16
a105 1
     /* relationships which must hold:
d111 1
a111 1
     */
d117 1
a117 1
     /* associativities */
d123 1
a123 2
     /* flags for state generation */

d128 1
a128 1
     /* flags for a rule having an action, and being reduced */
d133 1
a133 1
     /* output parser flags */
d136 1
a136 1
     /* macros for getting associativity and precedence levels */
d142 1
a142 1
     /* macros for setting associativity and precedence levels */
d144 1
a144 1
#define SETASC(i,j) i|=j
d148 1
a148 1
     /* looping macros */
d159 1
a159 1
     /* I/O descriptors */
d168 1
a168 1
     /* structure declarations */
d170 2
a171 2
struct   looksets{
	int      lset[TBITSET];
d174 3
a176 3
struct   item{
	int                     *pitem;
	struct   looksets       *look;
d179 3
a181 3
struct   toksymb{
	char    *name;
	int      value;
d184 3
a186 3
struct   ntsymb{
	char    *name;
	int      tvalue;
d189 4
a192 4
struct   wset{
	int                     *pitem;
	int                      flag;
	struct   looksets        ws;
d195 1
a195 1
     /* token information */
d197 3
a199 3
extern           int     ntokens ;   /* number of tokens */
extern   struct  toksymb tokset[];
extern           int     toklev[];   /* vector with the precedence of the terminals */
d201 1
a201 1
     /* nonterminal information */
d203 2
a204 2
extern           int     nnonter;    /* the number of nonterminals */
extern   struct  ntsymb  nontrst[];
d206 1
a206 1
     /* grammar rule information */
d208 3
a210 3
extern           int     nprod;      /* number of productions */
extern           int    *prdptr[];   /* pointers to descriptions of productions */
extern           int     levprd[];   /* contains production levels to break conflicts */
d212 1
a212 1
     /* state information */
d214 7
a220 7
extern           int     nstate;     /* number of states */
extern   struct  item   *pstate[];   /* pointers to the descriptions of the states */
extern           int     tystate[];  /* contains type information about the states */
extern           int     defact[];   /* the default action of the state */
extern           int     tstates[];  /* the states deriving each token */
extern           int     ntstates[]; /* the states deriving each nonterminal */
extern           int     mstates[];  /* the continuation of the chains begun in tstates and ntstates */
d222 1
a222 1
     /* lookahead set information */
d224 2
a225 2
extern   struct  looksets lkst[];
extern           int      nolook;    /* flag to turn off lookahead computations */
d227 1
a227 1
     /* working set information */
d229 2
a230 2
extern   struct  wset    wsets[];
extern   struct  wset   *cwp;
d232 1
a232 1
     /* storage for productions */
d234 2
a235 2
extern           int     mem0[];
extern           int    *mem;
d237 1
a237 1
     /* storage for action table */
d242 1
a242 1
extern           int     indgo[];    /* index to the stored goto table */
d244 1
a244 1
     /* temporary vector, indexable by states, terms, or ntokens */
d246 2
a247 2
extern           int     temp1[];
extern           int     lineno;     /* current line number */
d249 1
a249 1
     /* statistics collection variables */
d258 1
a258 1
     /* define functions with strange types... */
d260 4
a263 4
extern           char     *cstash();
extern   struct  looksets *flset();
extern           char     *symnam();
extern           char     *writem();
d265 1
a265 1
     /* default settings for a number of macros */
d267 1
a267 1
     /* name of yacc tempfiles */
d277 1
a277 1
     /* output file name */
d280 1
a280 1
# define OFILE    "y.tab.c"
d283 1
a283 1
     /* user output file name */
d286 1
a286 1
# define FILEU    "y.output"
d289 1
a289 1
     /* output file for # defines */
d292 1
a292 1
# define FILED    "y.tab.h"
d295 1
a295 1
     /* command to clobber tempfiles after use */
@


1.0
log
@Initial revision
@
text
@d1 8
a8 3
# include <stdio.h>
# include <ctype.h>
# include "files"
d10 2
a11 1
	/*  MANIFEST CONSTANT DEFINITIONS */
d13 1
a13 2
	/* base of nonterminal internal numbers */
# define NTBASE 010000
d15 2
a16 1
	/* internal codes for error and accept actions */
d18 1
a18 2
# define ERRCODE  8190
# define ACCEPTCODE 8191
d20 2
a21 1
	/* sizes and limits */
d23 3
a25 1
# ifdef HUGE
d36 1
a36 1
# endif
d38 7
a44 12
# ifdef MEDIUM
# define ACTSIZE 4000
# define MEMSIZE 5200
# define NSTATES 600
# define NTERMS 127
# define NPROD 400
# define NNONTERM 200
# define TEMPSIZE 800
# define CNAMSZ 4000
# define LSETSIZE 450
# define WSETSIZE 250
# endif
d46 18
a63 12
# ifdef SMALL
# define ACTSIZE 2500
# define MEMSIZE 3700   /* bumped from 3000 */
# define NSTATES 500
# define NTERMS 127
# define NPROD 300
# define NNONTERM 200
# define TEMPSIZE 600
# define CNAMSZ 3000
# define LSETSIZE 300
# define WSETSIZE 150
# endif
d65 7
a71 2
# define NAMESIZE 50
# define NTYPES 63
d73 11
a83 2
# ifdef WORD32
# define TBITSET ((32+NTERMS)/32)
d85 9
a93 3
	/* bit packing macros (may be machine dependent) */
# define BIT(a,i) ((a)[(i)>>5] & (1<<((i)&037)))
# define SETBIT(a,i) ((a)[(i)>>5] |= (1<<((i)&037)))
d95 2
a96 2
	/* number of words needed to hold n+1 bits */
# define NWORDS(n) (((n)+32)/32)
d98 5
a102 1
# else
d104 1
a104 11
# define TBITSET ((16+NTERMS)/16)

	/* bit packing macros (may be machine dependent) */
# define BIT(a,i) ((a)[(i)>>4] & (1<<((i)&017)))
# define SETBIT(a,i) ((a)[(i)>>4] |= (1<<((i)&017)))

	/* number of words needed to hold n+1 bits */
# define NWORDS(n) (((n)+16)/16)
# endif

	/* relationships which must hold:
d110 1
a110 1
	*/
d112 3
a114 1
	/* associativities */
d116 5
a120 4
# define NOASC 0  /* no assoc. */
# define LASC 1  /* left assoc. */
# define RASC 2  /* right assoc. */
# define BASC 3  /* binary assoc. */
d122 1
a122 1
	/* flags for state generation */
d124 3
a126 3
# define DONE 0
# define MUSTDO 1
# define MUSTLOOKAHEAD 2
d128 1
a128 1
	/* flags for a rule having an action, and being reduced */
d130 2
a131 2
# define ACTFLAG 04
# define REDFLAG 010
d133 2
a134 2
	/* output parser flags */
# define YYFLAG1 (-1000)
d136 1
a136 1
	/* macros for getting associativity and precedence levels */
d138 3
a140 3
# define ASSOC(i) ((i)&03)
# define PLEVEL(i) (((i)>>4)&077)
# define TYPE(i)  ((i>>10)&077)
d142 1
a142 1
	/* macros for setting associativity and precedence levels */
d144 3
a146 3
# define SETASC(i,j) i|=j
# define SETPLEV(i,j) i |= (j<<4)
# define SETTYPE(i,j) i |= (j<<10)
d148 1
a148 1
	/* looping macros */
d150 8
a157 8
# define TLOOP(i) for(i=1;i<=ntokens;++i)
# define NTLOOP(i) for(i=0;i<=nnonter;++i)
# define PLOOP(s,i) for(i=s;i<nprod;++i)
# define SLOOP(i) for(i=0;i<nstate;++i)
# define WSBUMP(x) ++x
# define WSLOOP(s,j) for(j=s;j<cwp;++j)
# define ITMLOOP(i,p,q) q=pstate[i+1];for(p=pstate[i];p<q;++p)
# define SETLOOP(i) for(i=0;i<tbitset;++i)
d159 1
a159 1
	/* I/O descriptors */
d161 6
a166 6
extern FILE * finput;           /* input file */
extern FILE * faction;          /* file for saving actions */
extern FILE *fdefine;           /* file for # defines */
extern FILE * ftable;           /* y.tab.c file */
extern FILE * ftemp;            /* tempfile to pass 2 */
extern FILE * foutput;          /* y.output file */
d168 1
a168 1
	/* structure declarations */
d170 3
a172 3
struct looksets {
	int lset[TBITSET];
	};
d174 4
a177 4
struct item {
	int *pitem;
	struct looksets *look;
	};
d179 4
a182 4
struct toksymb {
	char *name;
	int value;
	};
d184 4
a187 4
struct ntsymb {
	char *name;
	int tvalue;
	};
d189 5
a193 5
struct wset {
	int *pitem;
	int flag;
	struct looksets ws;
	};
d195 1
a195 1
	/* token information */
d197 3
a199 3
extern int ntokens ;    /* number of tokens */
extern struct toksymb tokset[];
extern int toklev[];    /* vector with the precedence of the terminals */
d201 1
a201 1
	/* nonterminal information */
d203 2
a204 2
extern int nnonter ;    /* the number of nonterminals */
extern struct ntsymb nontrst[];
d206 1
a206 1
	/* grammar rule information */
d208 3
a210 3
extern int nprod ;      /* number of productions */
extern int *prdptr[];   /* pointers to descriptions of productions */
extern int levprd[] ;   /* contains production levels to break conflicts */
d212 1
a212 1
	/* state information */
d214 7
a220 7
extern int nstate ;             /* number of states */
extern struct item *pstate[];   /* pointers to the descriptions of the states */
extern int tystate[];   /* contains type information about the states */
extern int defact[];    /* the default action of the state */
extern int tstates[];   /* the states deriving each token */
extern int ntstates[];  /* the states deriving each nonterminal */
extern int mstates[];   /* the continuation of the chains begun in tstates and ntstates */
d222 1
a222 1
	/* lookahead set information */
d224 2
a225 2
extern struct looksets lkst[];
extern int nolook;  /* flag to turn off lookahead computations */
d227 1
a227 1
	/* working set information */
d229 2
a230 2
extern struct wset wsets[];
extern struct wset *cwp;
d232 1
a232 1
	/* storage for productions */
d234 2
a235 2
extern int mem0[];
extern int *mem;
d237 1
a237 1
	/* storage for action table */
d239 4
a242 3
extern int amem[];  /* action table storage */
extern int *memp ;              /* next free action table position */
extern int indgo[];             /* index to the stored goto table */
d244 1
a244 1
	/* temporary vector, indexable by states, terms, or ntokens */
d246 2
a247 2
extern int temp1[];
extern int lineno; /* current line number */
d249 8
a256 1
	/* statistics collection variables */
d258 1
a258 8
extern int zzgoent ;
extern int zzgobest ;
extern int zzacent ;
extern int zzexcp ;
extern int zzclose ;
extern int zzrrconf ;
extern int zzsrconf ;
	/* define functions with strange types... */
d260 4
a263 4
extern char *cstash();
extern struct looksets *flset();
extern char *symnam();
extern char *writem();
d265 1
a265 1
	/* default settings for a number of macros */
d267 1
a267 1
	/* name of yacc tempfiles */
d269 1
a269 1
# ifndef TEMPNAME
d271 1
a271 1
# endif
d273 3
a275 3
# ifndef ACTNAME
# define ACTNAME "yacc.acts"
# endif
d277 1
a277 1
	/* output file name */
d279 3
a281 3
# ifndef OFILE
# define OFILE "y.tab.c"
# endif
d283 1
a283 1
	/* user output file name */
d285 3
a287 3
# ifndef FILEU
# define FILEU "y.output"
# endif
d289 1
a289 1
	/* output file for # defines */
d291 3
a293 3
# ifndef FILED
# define FILED "y.tab.h"
# endif
d295 1
a295 1
	/* command to clobber tempfiles after use */
d297 1
a297 1
# ifndef ZAPFILE
d299 1
a299 1
# endif
@


1.0.1.1
log
@V.2
@
text
@a0 1
/*      @@(#)dextern     1.5     */
d31 2
a32 2
# define ACTSIZE 2000
# define MEMSIZE 4000
d35 6
a40 6
# define NPROD 308
# define NNONTERM 170
# define TEMPSIZE 620
# define CNAMSZ 2000
# define LSETSIZE 310
# define WSETSIZE 172
d43 13
d137 1
a137 1
extern FILE * fdefine;          /* file for # defines */
a139 1
extern FILE * fdebug;           /* tempfile for two debugging info arrays */
a184 1
extern char had_act[];  /* set if reduction has associated action code */
d213 1
a213 1
extern int *amem ;  /* action table storage */
a247 4
# endif

# ifndef DEBUGNAME
# define DEBUGNAME "yacc.debug"
@
