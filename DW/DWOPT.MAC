.ENABL LC
.DSABL GBL
.ENABL MCL
.LIST  ME
.NLIST CND

.Title DW reformatting/optimization program.

.MCALL  .print
.INCLUDE /DK:DWOPT.INC/


Start:
        call    manual          ;Informs the user
                                ;and handles initialization parameters

        call    pardef          ;Defines winchester parameters:
                                ;redefines all zeroed parameters 

        call    proceed         ;reformat choosen part of DW
Exit:
.Exit

Manual:
mov #0.,stcyl
clr sthd
mov #3.,maxhd
clr order
clr shift
mov #-1,shifts
mov #-1,shiftc
Return ;Manual

Pardef:
        clr     shift
        .print  #strsts         ;print status line
        tst     maxcyl
        bne     1$
mov #804.,maxcyl                ;define max. cylinder number and type it
1$:
        tst     maxhd
        bne     2$
mov #3.,maxhd                   ;define max. cylinder number and type it
2$:     mov     sthd,crnthd     ;starting cylinder
        clr     crnthd
        tst     order
        bne     3$
        mov     #tab09,order    ;define the best interleave
        mov     #9.,r2
        call    optrk
        mov     #-1,(7)+
 20$:   .word   0
 21$:   call    optrk
        call    read
        cmp     iswait,20$
        bhi     22$
        mov     iswait,20$
        sub     #16.,order
        sob     r2,21$
 22$:   add     #16.,order
        cmp     20$,#640.
        bhi     23$
        add     #16.,order
        inc     r2
 23$:   inc     r2
        movb    r2,intrs
        add     #'0,r2
        movb    r2,<strins+4>
        .print  #strins

3$:     tst     shifts
        bpl     4$
        call    bests                   ;define the best surface shift

4$:     tst     shiftc
        bpl     5$
        call    bestc                   ;define the best cylinder shift
5$:
Return ;Pardef

Proceed:
        mov     #dw$csr,r4
        waitit
        mov     #cmrest,dwcmd(4)
        mov     stcyl,crntcyl
        mov     sthd,crnthd

1$:     call    typecyl
                                ;set new shift here (inter-surface)
10$:    add     shifts,shift
        call    typehd
        tstb    safe
        beq     2$
        call    optrk           ;optimize track
        cmp     (7)+,(7)+
2$:     call    format
        inc     crnthd
        cmp     maxhd,crnthd
        bge     10$
                                ;correct new shift here (inter-cylinder)
        sub     shifts,shift
        add     shiftc,shift
        mov     sthd,crnthd
        inc     crntcyl
        cmp     maxcyl,crntcyl
        bge     1$
clr crntcyl
clr crnthd
call read
waitit
mov #cmrest,dwcmd(4)
Return ;Proceed
optrk:
        waitit
        call    read
        waitit
        call    format
        waitit
        call    write
        waitit
return

Read:                           ;Reads one track (16. sectors) into RWbuf
                                ;Inputs:
                                ;  Crntcyl      Current cylinder
                                ;  Crnthd       Current head
                                ;Returns:
                                ;  Iswait       avrg. Inter-sector wait time
        pushr
        clr     iswait
        mov     #dw$csr,r4
        waitit
        mov     crntcyl,dwcyl(4)
        mov     crnthd,dwhead(4)
        clr     r5
        mov     r5,dwsec(4)
        mov     #15.,r2
        mov     #32.,r1
        mov     #rwbuf,r0
        mov     #<dw$csr+dwbuf>,r3
        mov     #cmread,dwcmd(4)
        waitit
1$:   .rept 8.
        mov     (3),(0)+        ;empty controller's buffer
      .endr
        sob     r1,1$
2$:     mov     #32.,r1
        inc     r5
        mov     r5,dwsec(4)
        mov     #cmread,dwcmd(4)
        waitit  iswait          ;wait for next sector & count iswait
3$:   .rept 8.
        mov     (3),(0)+        ;empty controller's buffer
      .endr
        sob     r1,3$
        sob     r2,2$
        popr
Return ;Read

Write:                          ;Writes track (16. sectors) from RWbuf
                                ;Inputs:
                                ;  Crntcyl      Current cylinder
                                ;  Crnthd       Current head
                                ;Returns:
                                ;  None
        pushr
        mov     #dw$csr,r4
        waitit
        mov     crntcyl,dwcyl(4)
        mov     crnthd,dwhead(4)
        clr     r5
        mov     r5,dwsec(4)
        mov     #16.,r2
        mov     #rwbuf,r0
        mov     #<dw$csr+dwbuf>,r3
        waitit
1$:     mov     #256.,r1
        mov     #cmwrit,dwcmd(4)
2$:   
6$:     tstb    (4)
        bpl     6$
        mov     (0)+,(3)        ;fill controller's buffer
      
        sob     r1,2$
        waitit
        inc     r5
        mov     r5,dwsec(4)
        sob     r2,1$
        popr
Return ;Write

Format:                         ;Formats one surface of one cylinder
                                ;Inputs: 
                                ;  Crntcyl      Current cylinder
                                ;  Crnthd       Current head
                                ;  Order        ptr. to Sectors order
                                ;  Shift        Shift of hardware Index
                                ;Returns:
                                ;  None
        pushr
        mov     #dw$csr,r4
        mov     order,r0
        mov     #fmbuf,r1
        mov     #16.,r2
1$:     movb    (0)+,(1)+
        movb    #0,(1)+
        sob     r2,1$           ;set initial order
        bic     #^c17,shift
        mov     shift,r3
2$:     tst     r3              ;and rotate it <shift> times
        beq     4$
        dec     r3
        mov     #16.,r2
        mov     #<fmbend-4>,r0
3$:     mov     (0),2(0)
        tst     -(0)
        sob     r2,3$
        mov     <fmbend-2>,fmbuf
        br      2$
4$:     waitit
        mov     crntcyl,dwcyl(4)
        mov     crnthd,dwhead(4)
        mov     #cmform,dwcmd(4)
        mov     #fmbuf,r0
        mov     #256.,r1
        
5$:     waitit
6$:     tstb    (4)
        bpl     6$
        mov     (0)+,dwbuf(4)
        sob     r1,5$
        waitit
        popr
Return

.radix 10
Tab01:  .byte  0, 1, 2, 3, 4, 5, 6, 7, 8, 9,10,11,12,13,14,15
Tab02:  .byte  8, 0, 9, 1,10, 2,11, 3,12, 4,13, 5,14, 6,15, 7
Tab03:  .byte  0,11, 6, 1,12, 7, 2,13, 8, 3,14, 9, 4,15,10, 5
Tab04:  .byte 12, 8, 4, 0,13, 9, 5, 1,14,10, 6, 2,15,11, 7, 3
Tab05:  .byte  0,13,10, 7, 4, 1,14,11, 8, 5, 2,15,12, 9, 6, 3
Tab06:  .byte  0, 3, 6, 9,14,12, 1, 4, 7,10,15,13, 2, 5, 8,11
Tab07:  .byte  0, 7,14, 5,12, 3,10, 1, 8,15, 6,13, 4,11, 2, 9
Tab08:  .byte 14,12,10, 8, 6, 4, 2, 0,15,13,11, 9, 7, 5, 3, 1
Tab09:  .byte  0, 9, 2,11, 4,13, 6,15, 8, 1,10, 3,12, 5,14, 7
.radix 8

typecyl:
        pushr
        mov     #<strcyl+4>,r0
        mov     #20040,(0)
        mov     #20040,2(0)
        mov     #'0,r5
        mov     r5,r1
        mov     crntcyl,r3
1$:     cmp     #1000.,r3
        bgt     2$
        sub     #1000.,r3
        inc     r1
        br      1$
2$:     movb    r1,(0)
        mov     r5,r1
3$:     cmp     #100.,r3
        bgt     4$
        sub     #100.,r3
        inc     r1
        br      3$
4$:     movb    r1,1(0)
        mov     r5,r1
5$:     cmp     #10.,r3
        bgt     6$
        sub     #10.,r3
        inc     r1
        br      5$
6$:     movb    r1,2(0)
        mov     r5,r1
7$:     tst     r3
        ble     8$
        dec     r3
        inc     r1
        br      7$
8$:     movb    r1,3(0)
        mov     #3,r2
9$:     cmpb    r5,(0)+
        bne     10$
        movb    #40,-1(0)
        sob     r2,9$
10$:    .print  #strcyl
        popr
return
typehd:
        mov     r0,-(6)
        mov     #'0,r0
        add     crnthd,r0
        movb    r0,<4+strhd>
        .print  #strhd
        mov     (6)+,r0
return
bests:
        mov     #-1,34$
 30$:   clr     shift
        clr     crnthd
        call    optrk
        mov     #1,crnthd
        mov     order,(7)+
 31$:   .word   0
        mov     #tab01,order
        call    optrk
        mov     #16.,r2
 32$:   clr     iswait
        mov     #dw$csr,r4
        waitit
        mov     #0,dwhead(4)
        mov     #15.,dwsec(4)
        mov     #cmread,dwcmd(4)
        waitit
        add     #dwbuf,r4
        mov     #64.,r1
 33$: .rept 4.
        mov     (4),#0
      .endr
        sob     r1,33$
        mov     #dw$csr,r4
        waitit
        mov     r2,crntsec
        bic     #^c17,crntsec
        mov     crntsec,dwsec(4)
        mov     #1,dwhead(4)
        mov     #cmread,dwcmd(4)
        clr     r5
        waitit  r5

        cmp     r5,34$
        bhi     36$
        mov     r5,34$
        mov     r2,(7)+
 35$:   .word   0                       ;the best shift of surf.
 36$:
        dec     r2
        ble     360$
        jmp     32$                     ;sob    r2,32$
 34$:   .word   0                       ;lowest delay

 360$:  mov     31$,order
        cmpb    #2,intrs
        bne     37$
        dec     35$
        bic     #1,35$
 37$:   cmpb    #4,intrs
        bne     38$
        bic     #3,35$
 38$:   cmpb    #8.,intrs
        bne     39$
        bic     #7,35$
 39$:   bic     #^c17,35$
        mov     35$,shifts
        cmpb    #9.,35$
        bge     390$
        movb    #'1,<strinh+4>
        sub     #10.,35$
 390$:  add     #'0,35$
        movb    35$,<strinh+5>
        .print  #strinh
        mov     #dw$csr,r4
        waitit
return
bestc:
        mov     #-1,34$
 30$:   clr     shift
        clr     crnthd
        call    optrk
        mov     crntcyl,(7)+
 300$:  .word   0
        inc     crntcyl
        mov     order,(7)+
 31$:   .word   0
        mov     #tab01,order
        call    optrk
        mov     #16.,r2
 32$:   clr     iswait
        mov     300$,crntcyl
        mov     #dw$csr,r4
        waitit
        mov     crntcyl,dwcyl(4)
        mov     #15.,dwsec(4)
        mov     #cmread,dwcmd(4)
        waitit
        add     #dwbuf,r4
        mov     #64.,r1
 33$: .rept 4.
        mov     (4),#0
      .endr
        sob     r1,33$
        mov     #dw$csr,r4
        waitit
        mov     r2,crntsec
        bic     #^c17,crntsec
        mov     crntsec,dwsec(4)
        inc     crntcyl
        mov     crntcyl,dwcyl(4)
        mov     #cmread,dwcmd(4)
        clr     r5
        waitit  r5

        cmp     r5,34$
        bhi     36$
        mov     r5,34$
        mov     r2,(7)+
 35$:   .word   0                       ;the best shift of cyl.
 36$:
        dec     r2
        ble     360$
        jmp     32$                     ;sob    r2,32$
 34$:   .word   0                       ;lowest delay

 360$:  mov     31$,order
        cmpb    #2,intrs
        bne     37$
        dec     35$
        bic     #1,35$
 37$:   cmpb    #4,intrs
        bne     38$
        bic     #3,35$
 38$:   cmpb    #8.,intrs
        bne     39$
        bic     #7,35$
 39$:   bic     #^c17,35$
        mov     35$,shiftc
        cmpb    #9.,35$
        bge     390$
        movb    #'1,<strinc+4>
        sub     #10.,35$
 390$:  add     #'0,35$
        movb    35$,<strinc+5>
        .print  #strinc
        mov     #dw$csr,r4
        waitit
return

fmbuf:  .blkw   17.             ;sector order buffer
fmbend:  .word  0
stcyl:   .word  0
maxcyl:  .word  0
crntcyl: .word  0
sthd:    .word  0
maxhd:   .word  0
crnthd:  .word  0
crntsec: .word  0
order:   .word  0
shift:   .word  0
shifts:  .word  0               ;shift of surfaces
shiftc:  .word  0               ;shift of cylinders
iswait:  .word  0
safe:   .byte   0
intrs:  .byte   0


cbsy:   .ASCIZ  <7><16>'kONTROLLER o~enx ZANQT ...'<17>
strcyl: .byte   esc,'Y,<37+23.>,<37+2>,40,40,40,40,200
strhd:  .byte   esc,'Y,<37+23.>,<37+9.>,40,200
strins: .byte   esc,'Y,<37+23.>,<37+15.>,40,200
strinh: .byte   esc,'Y,<37+23.>,<37+21.>,40,40,200
strinc: .byte   esc,'Y,<37+23.>,<37+28.>,40,40,200
strsts: .byte   cr,lf,lf,lf,esc,'Y,<37+22.>,<37+2.>
        .asciz  'Cyl.  Hd.  intlv  shsrf  shcyl'
.even
RWbuf:
RWbend=rwbuf+<256.*16.>

.End Start

