head     1.6;
access   ;
symbols  ;
locks    ;
comment  @ * @;


1.6
date     89.04.08.18.22.17;  author avg;  state Exp;
branches ;
next     1.5;

1.5
date     88.09.17.21.04.05;  author avg;  state Exp;
branches ;
next     1.4;

1.4
date     88.09.17.20.37.58;  author avg;  state Exp;
branches ;
next     1.3;

1.3
date     88.09.16.16.32.10;  author avg;  state Exp;
branches ;
next     1.2;

1.2
date     88.09.12.22.04.17;  author avg;  state Exp;
branches ;
next     1.1;

1.1
date     88.09.12.20.40.49;  author avg;  state Exp;
branches ;
next     ;


desc
@
Программа регулярного обновления /usr/cat.
@


1.6
log
@Добавлен раздел 'rubin'.
@
text
@/*
 *  catman - обновление справочников
 *           с готовыми документами.
 *
 *  Макропеременная CAT указывает положение
 *  справочников для записи отформатированных
 *  документов, по умолчанию /usr/man.
 *
 *  Положение справочников с исходными текстами
 *  документов задается в качестве значения
 *  макропеременной MAN (по умолчанию /usr/man).
 *
 * $Log:        catman.c,v $
 * Revision 1.5  88/09/17  21:04:05  avg
 * Из-за ошибки (или глупости) в system приходится работать с сигналами
 * и самому делать fork-exec-wait.
 *
 * Revision 1.4  88/09/17  20:37:58  avg
 * Теперь по сигналам завершения удаляется недоформатированный файл.
 *
 * Revision 1.3  88/09/16  16:32:10  avg
 * Добавлен fflush(stdout) для ключей -p и -d.
 *
 * Revision 1.2  88/09/12  22:04:17  avg
 * Доделан ключ -d (учитывая пожелания трудящихся).
 *
 * Revision 1.1  88/09/12  20:40:49  avg
 * Initial revision
 *
 */
# include       <stdio.h>
# include       <sys/types.h>
# include       <dir.h>
# include       <stat.h>
# include       <ctype.h>
# include       <strings.h>
# include       <ediag.h>
# include       <signal.h>

static char rcsid[] = "$Header: catman.c,v 1.5 88/09/17 21:04:05 avg Exp $";

#define NROFF   "nroff -man"
/*
#define SSP     " | cat -s"
 */

# define        reg     register
# define        bool    char


char            buf[BUFSIZ],
		pflag = 0,
		dflag = 0,
		nflag = 0,
		wflag = 0;
char    *rindex();

SYSTEM(str)
char *str;
{
	int pid, status;

	if(pflag||dflag) {
		printf("%s\n", str);
		fflush(stdout);
	}
	if(!pflag) {
		do {
			pid = fork();
			if( pid == 0 ) {
				execl( "/bin/sh", "sh", "-ce", str, 0 );
				printf( ediag("Can't exec shell\n",
					      "Не могу запустить sh\n"));
				exit(100);
			}
			if( pid == -1 )
				sleep(60);
		} while( pid == -1 );
		wait( &status );
		if( status ) {
			printf(ediag("-- exit status=0%o\n",
				     "-- код завершения=0%o\n"), status);
			Termination();
		}
	}
}

char *UnlinkFile = NULL;

Termination()
{
	signal(SIGINT,  SIG_IGN);
	signal(SIGQUIT, SIG_IGN);
	signal(SIGTERM, SIG_IGN);
	if( UnlinkFile != NULL ) {
		unlink( UnlinkFile );
		printf(ediag("%s removed.\n", "%s удален.\n"), UnlinkFile);
	}
	printf( ediag( "catman: interrupted\n",
		       "catman: прерван\n" ) );
	exit(2);
}

main(ac, av)
int     ac;
char    *av[]; {

	reg char        *tsp, *msp, *csp, *man, *cat, *sp;
	reg FILE        *mdir, *inf;
	reg long        time;
	reg char        *sections;
	reg int         exstat = 0;
	reg bool        changed = 0;
	static struct direct    dir;
	static struct stat      sbuf;
	char *getenv(), *catdir, dirc[100];
	char *mandir, dirm[100];
	int ndirc, ndirm;

	if( signal(SIGINT, SIG_IGN) != SIG_IGN )
		signal(SIGINT, Termination);
	if( signal(SIGTERM, SIG_IGN) != SIG_IGN )
		signal(SIGTERM, Termination);
	if( signal(SIGQUIT, SIG_IGN) != SIG_IGN )
		signal(SIGQUIT, Termination);

	while (ac > 1) {
		av++;
		if (strcmp(*av, "-p") == 0)
			pflag++;
		else if (strcmp(*av, "-d") == 0)
			dflag++;
		else if (strcmp(*av, "-n") == 0)
			nflag++;
		else if (strcmp(*av, "-w") == 0)
			wflag++;
		else if (*av[0] == '-')
			goto usage;
		else
			break;
		ac--;
	}
	if (ac == 2)
		sections = *av;
	else if (ac < 2)
		sections = "12345678lnpur";
	else {
usage:
		printf(ediag("Usage: catman [-p] [-n] [-w] [sections]\n",
			     "Вызов: catman [-p] [-n] [-w] [разделы]\n"));
		exit(-1);
	}
	if (wflag)
		goto whatis;

	ndirm = 0;
	*dirm = '\0';
	if ( (mandir=getenv("MAN")) != NULL){
		strcpy(dirm, mandir);
		if ( dirm[(ndirm = strlen(dirm)-1)] != '/') {
			strcat(dirm,"/");
			ndirm++;
		}
		ndirm++;
	}

	ndirc = 0;
	*dirc = '\0';
	if ( (catdir=getenv("CAT")) != NULL){
		strcpy(dirc, catdir);
		if ( dirc[(ndirc = strlen(dirc)-1)] != '/') {
			strcat(dirc,"/");
			ndirc++;
		}
		ndirc++;
	}
	chdir("/usr/man");
	strcat(dirm,"manx/xxxxxxxxxxxxxx");
	man = dirm;
	strcat(dirc,"catx/xxxxxxxxxxxxxx");
	cat = dirc;
	msp = &man[5+ndirm];
	csp = &cat[5+ndirc];
	umask(02);
	for (sp = sections; *sp; sp++) {
		man[3+ndirm] = cat[3+ndirc] = *sp;
		*msp = *csp = '\0';
		if ((mdir = fopen(man, "r")) == NULL) {
			fprintf(stderr, "fopen:");
			perror(man);
			exstat = 1;
			continue;
		}
		if (stat(cat, &sbuf) < 0) {
			sprintf(buf, "mkdir %s", cat);
			SYSTEM(buf);
			stat(cat, &sbuf);
		}
		if ((sbuf.st_mode & 0777) != 0777)
			chmod(cat, 0777);
		while (fread((char *) &dir, sizeof dir, 1, mdir) > 0) {
			if (dir.d_ino == 0 || dir.d_name[0] == '.')
				continue;
			/*
			 * make sure this is a man file, i.e., that it
			 * ends in .[1-9] or .[1-9][a-z]
			 */
			tsp = rindex(dir.d_name, '.');
			if (tsp == NULL)
				continue;
			switch (*++tsp) {
				case '1':       case '2':       case '3':
				case '4':       case '5':       case '6':
				case '7':       case '8':       case 'l':
				case 'n':       case 'p':       case 'u':
				case 'r':
					if (isalpha(*++tsp) || *tsp == '\0')
						break;
				default:
					continue;
			}

			strncpy(msp, dir.d_name, DIRSIZ);
			if ((inf = fopen(man, "r")) == NULL) {
				perror(man);
				exstat = 1;
				continue;
			}
			if (getc(inf) == '.' && getc(inf) == 's'
			    && getc(inf) == 'o') {
				fclose(inf);
				continue;
			}
			fclose(inf);
			strncpy(csp, dir.d_name, DIRSIZ);
			if (stat(cat, &sbuf) >= 0) {
				time = sbuf.st_mtime;
				stat(man, &sbuf);
				if (time >= sbuf.st_mtime)
					continue;
				unlink(cat);
			}
			if(!pflag)
				UnlinkFile = cat;
			sprintf(buf, "%s %s > %s", NROFF, man, cat);
			SYSTEM(buf);
			UnlinkFile = NULL;
			changed = 1;
		}
		fclose(mdir);
	}
	if (changed && !nflag) {
whatis:
		if (pflag||dflag)
			printf("/bin/csh -f /usr/man/man0/makewhatis\n");
		if (!pflag) {
			UnlinkFile = "/usr/lib/whatis";
			execl("/bin/csh", "/bin/csh", "-f", "/usr/man/man0/makewhatis", 0);
			UnlinkFile = NULL;
			perror("/bin/csh -f /usr/man/man0/makewhatis");
			exstat = 1;
		}
	}
	exit(exstat);
}
@


1.5
log
@Из-за ошибки (или глупости) в system приходится работать с сигналами
и самому делать fork-exec-wait.
@
text
@d14 4
d40 1
a40 1
static char rcsid[] = "$Header: catman.c,v 1.4 88/09/17 20:37:58 avg Exp $";
d146 1
a146 1
		sections = "12345678lnpu";
d216 1
@


1.4
log
@Теперь по сигналам завершения удаляется недоформатированный файл.
@
text
@d14 3
d36 1
a36 1
static char rcsid[] = "$Header: catman.c,v 1.3 88/09/16 16:32:10 avg Exp $";
d57 2
d63 19
a81 2
	if(!pflag)
		system(str);
d95 2
@


1.3
log
@Добавлен fflush(stdout) для ключей -p и -d.
@
text
@d14 3
d31 1
d33 1
a33 1
static char rcsid[] = "$Header: catman.c,v 1.2 88/09/12 22:04:17 avg Exp $";
d62 14
d92 7
d214 2
d218 1
d228 1
d230 1
@


1.2
log
@Доделан ключ -d (учитывая пожелания трудящихся).
@
text
@d14 3
d29 1
a29 1
static char rcsid[] = "$Header: catman.c,v 1.1 88/09/12 20:40:49 avg Exp $";
d50 1
a50 1
	if(pflag||dflag)
d52 2
@


1.1
log
@Initial revision
@
text
@d13 4
a16 1
 * $Log$
d26 1
a26 1
static char rcsid[] = "$Header$";
a35 1
# define        SYSTEM(str)     (pflag ? printf("%s\n", str) : system(str))
d39 1
d44 9
d73 2
d192 5
a196 5
		if (pflag)
			printf("/bin/csh /usr/man/man0/makewhatis\n");
		else {
			execl("/bin/csh", "/bin/csh", "/usr/man/man0/makewhatis", 0);
			perror("/bin/csh /usr/man/man0/makewhatis");
@
