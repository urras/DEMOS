head     1.7;
access   ;
symbols  ;
locks    ;
comment  @ * @;


1.7
date     87.03.04.12.36.26;  author alex;  state Exp;
branches ;
next     1.6;

1.6
date     86.10.03.16.01.53;  author avg;  state Exp;
branches ;
next     1.5;

1.5
date     86.05.23.12.58.03;  author mike;  state Exp;
branches ;
next     1.4;

1.4
date     86.05.23.12.40.16;  author mike;  state Exp;
branches ;
next     1.3;

1.3
date     86.05.23.12.29.38;  author mike;  state Exp;
branches ;
next     1.2;

1.2
date     86.05.22.17.07.38;  author mike;  state Exp;
branches ;
next     1.1;

1.1
date     86.05.21.11.41.38;  author root;  state Exp;
branches ;
next     ;


desc
@
Первая версия программы dd, скомпанованная из программ dd
версий МНОС 1.2 и 2.9. 
Существенные отличия в том что таблицы перекодировок будут браться
из каталога /lib/codes (поэтому сама программа кодо-независима, а
меняются только файлы таблиц перекодировок).
		Коротаев М.В. /подпись/  21.05.86
@


1.7
log
@???
Сделан ключ seeks.
@
text
@/*
 * Таблицы перекодировок находятся в файлах:
 *      /lib/code/...
 * Каждый файл содержит две таблицы:
 *      сначала таблица "to"
 *      затем таблица "from".
 * В каждой таблице должны быть описаны все 256 символов.
 *
 * Программа не зависит от внутренней кодировки системы.
 * ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 *      Исправил Коротаев М.В. (ИПК Минавтопрома)
 *
 *      $Log:	dd.c,v $
 * Revision 1.6  86/10/03  16:01:53  avg
 * В связи с отсутствием в ДЕМОС/МНОС 2.0 системного вызова sleep
 * с аргументом в тиках аргумент delay теперь - секунды.
 * 
 * Revision 1.5  86/05/23  12:58:03  mike
 * *** empty log message ***
 *
 * Revision 1.4  86/05/23  12:40:16  mike
 * Смещение от начала файла таблиц кодировок
 * берется из размера структуры exec из a.out.h
 *
 * Revision 1.3  86/05/23  12:29:38  mike
 * *** empty log message ***
 *
 * Revision 1.2  86/05/22  17:07:38  mike
 * Таблицы перекодировок описаны как static массивы в "C"
 * поэтомы пришлось изменить смещение при чтении файлов с
 * таблицами перекодировок.
 *
 * Revision 1.1  86/05/21  11:41:38  root
 * Initial revision
 *
 */

/*NOXSTR*/
#ifndef lint
static char rcsid[] = "$Header: dd.c,v 1.6 86/10/03 16:01:53 avg Exp $";
#endif
/*YESXSTR*/

#include <a.out.h>
#include <stdio.h>
#include <signal.h>
#include <ctype.h>
#include <errno.h>
#include <ediag.h>
#include <stat.h>

#define BIG     32767l
#define HZ      50
#define LCASE   01
#define UCASE   02
#define SWAB    04
#define NERR    010
#define SYNC    020

#define STRSIZE 80      /* size of string for file name */
#define CODSIZE 256     /* size of code table */
#define SEEKTBL sizeof(struct exec)  /* seek to code table */

#define DELAY   if(delay != 0) sleep(delay)

extern   int    errno;

int      cflag;
int      fflag;
int      skip;
int      seekn;
int      seekskip; /* Делать "skip" через "seek" */
int      count;
int      files = 1;
int      ibs = 512;
int      obs = 512;
int      bs;
int      cbs;
int      ibc;
int      obc;
int      cbc;
int      ibf;
int      obf;
int      nspace;
int      delay = 0;

char    *string;
char    *ifile;
char    *ofile;
char    *ibuf;
char    *obuf;
char    *op;
char    TOFROM[CODSIZE];

/*NOXSTR*/
char    fcodname[STRSIZE] = "/lib/codes/";  /* здесь станд. перекодировки */
/*YESXSTR*/

char    *sbrk();

long     nifr;
long     nipr;
long     nofr;
long     nopr;
long     ntrunc;

int      to();
int      from();
int      null();
int      cnull();
int      term();
int      pad();
int      trim();


main( argc, argv )
int      argc;
char   **argv;
{
    int            (*conv)() = null;
    register char   *ip;
    register         c;
    int              a;
    long             number();
    struct   stat    st;

    for( c = 1; c < argc; c++ ){
	string = argv[c];
	if( match( "ibs=" ) ){
	    ibs = number( BIG );
	    continue;
	}
	if( match( "obs=" ) ){
	    obs = number( BIG );
	    continue;
	}
	if( match( "cbs=" ) ){
	    cbs = number( BIG );
	    continue;
	}
	if( match( "bs=" ) ){
	    bs = number( BIG );
	    continue;
	}
	if( match( "if=" ) ){
	    ifile = string;
	    continue;
	}
	if( match( "of=" ) ){
	    ofile = string;
	    continue;
	}
	if( match( "skips=" ) ){
	    skip = number( BIG );
	    seekskip = 1;
	    continue;
	}
	if( match( "skip=" ) ){
	    skip = number( BIG );
	    continue;
	}
	if( match( "seek=" ) ){
	    seekn = number( BIG );
	    continue;
	}
	if( match( "count=" ) ){
	    count = number( BIG );
	    continue;
	}
	if( match( "files=" ) ){
	    files = number( BIG );
	    continue;
	}
	if( match( "delay=" ) ){
	    delay = number( 10000l );
	    continue;
	}
	if( match( "conv=" ) ){
	cloop:
	    if( match( "," ) )
		goto cloop;
	    if( *string == '\0' )
		continue;
	    if( match( "to" ) ){
		conv = to;
		makeconv(0);
		goto cloop;
	    }
	    if( match( "from" ) ){
		conv = from;
		makeconv(1);
		goto cloop;
	    }
	    if( match( "pad" ) || match( "rfill" ) ){
		if( conv == null )
		    conv = pad;
		goto cloop;
	    }
	    if( match( "trim" ) || match( "rtrim" ) ){
		if( conv == null )
		    conv = trim;
		goto cloop;
	    }
	    if( match( "lcase" ) ){
		cflag |= LCASE;
		goto cloop;
	    }
	    if( match( "ucase" ) ){
		cflag |= UCASE;
		goto cloop;
	    }
	    if( match( "swab" ) ){
		cflag |= SWAB;
		goto cloop;
	    }
	    if( match( "noerror" ) ){
		cflag |= NERR;
		goto cloop;
	    }
	    if( match( "sync" ) ){
		cflag |= SYNC;
		goto cloop;
	    }
	}
	fprintf( stderr, ediag("Bad arg: %s\n","Плохой аргумент: %s\n"), string );
	exit( 0 );
    }
    if( conv == null && cflag&(LCASE|UCASE) )
	conv = cnull;
    if( ifile )
	ibf = open( ifile, 0 );
    else
	ibf = dup( 0 );
    if( ibf < 0 ){
	fprintf( stderr, ediag("Can't open: %s\n","Нельзя открыть: %s\n"), ifile);
	exit(0);
    }
    if( ofile )
	obf = creat( ofile, 0666 );
    else
	obf = dup( 1 );
    if( obf < 0 ){
	fprintf( stderr, ( ofile ? ediag("Can't create: %s\n","Нельзя роздать: %s\n")
				 : ediag("Can't open: %s\n","Нельзя открыть вых. файл") ), ofile );
	exit( 0 );
    }
    if( bs ){
	ibs = obs = bs;
	if( conv == null )
	    fflag++;
    }
    if( ibs == 0 || obs == 0 ){
	fprintf( stderr, ediag("Counts: can't be zero\n","Размер блока не может быть 0\n") );
	exit( 0 );
    }
    ibuf = sbrk( ibs );
    if( fflag )
	obuf = ibuf;
    else
	obuf = sbrk( obs );
    sbrk( 64 );       /* For good measure */
    if( ibuf == (char *)-1 || obuf == (char *)-1 ){
	fprintf( stderr, ediag("Out of memory\n","Не хватает памяти\n") );
	exit( 0 );
    }
    ibc = 0;
    obc = 0;
    cbc = 0;
    op = obuf;
    if( signal( SIGINT, SIG_IGN ) != SIG_IGN )
	signal( SIGINT, term );
    if( skip ){
	if( seekskip || fstat(ibf,&st)==0 && (st.st_mode&S_IFMT)==S_IFBLK ){
	    DELAY;
	    lseek(ibf,(long)skip*ibs,0);
	}else{
	    while( skip ){
		DELAY;
		read( ibf, ibuf, ibs );
		skip--;
	    }
	}
    }
    while( seekn ){
	DELAY;
	lseek( obf, (long)obs, 1 ); /* !!!!!!!! */
	seekn--;
    }
loop:
    if( ibc-- == 0 ){
	ibc = 0;
	if( count == 0 || nifr+nipr != count ){
	    if( cflag&(NERR|SYNC) )
		for( ip = ibuf+ibs; ip > ibuf; )
		    *--ip = 0;
	    DELAY;
	    ibc = read( ibf, ibuf, ibs );
	    DELAY;
	}
	if( ibc == -1 ){
	    perror( ediag("Reading","Чтение") );
	    if( (cflag&NERR) == 0 ){
		flsh();
		term();
	    }
	    if( errno == EFBIG ){   /* Затык против конца ленты */
		flsh();
		term();
	    }
	    ibc = ibs;
	    stats();
	}
	if( ibc == 0 && --files <= 0 ){
	    flsh();
	    term();
	}
	if( ibc != ibs ){
	    nipr++;
	    if( cflag&SYNC )
		ibc = ibs;
	}else
	    nifr++;
	ip = ibuf;
	c = (ibc>>1) & ~1;
	if( cflag&SWAB && c ){
	    do{
		a = *ip++;
		ip[-1] = *ip;
		*ip++ = a;
	    }while( --c );
	}
	ip = ibuf;
	if( fflag ){
	    obc = ibc;
	    flsh();
	    ibc = 0;
	}
	goto loop;
    }
    c = 0;
    c |= *ip++;
    c &= 0377;
    (*conv)(c);
    goto loop;
}

flsh()
{
    register c;

    if( obc ){
	if( obc == obs )
	    nofr++;
	else
	    nopr++;
	c = write( obf, obuf, obc );
	if( c != obc ){
	    perror( ediag("Write","Запись") );
	    term();
	}
	obc = 0;
    }
}

match( s )
char    *s;
{
    register char   *cs;

    cs = string;
    while( *cs++ == *s )
	if( *s++ == '\0' )
	    goto true;
    if( *s != '\0' )
	return(0);
true:
    cs--;
    string = cs;
    return( 1 );
}

makeconv(flg)
{
    register dfil;

    name();
    if( (dfil = open(fcodname,0)) < 0 ){
	fprintf( stderr, ediag("Can't open: %s\n","Нельзя открыть: %s\n"), fcodname );
	exit(0);
    }
    if( flg )
	lseek( dfil, (long)(CODSIZE+SEEKTBL), 0 );
    else
	lseek( dfil, (long)SEEKTBL, 0 );
    if( read( dfil, TOFROM, CODSIZE ) != CODSIZE ){
	fprintf( stderr, ediag("Bad file of code table: %s\n","Плохой файл таблицы перекодировок: %s\n"), fcodname );
	exit(0);
    }
    close(dfil);
}

name()
{
    register char *r,*s;
    register i;

    i = strlen(fcodname);
    r = &fcodname[i];
    s = string;
    while( *s && *s != ',' && i++ < STRSIZE-1 )
	*r++ = *s++;
    *r = '\0';
    string = s;
}

long number( big )
long     big;
{
    register char   *cs;
    long            n;

    cs = string;
    n = 0;
    while( *cs >= '0' && *cs <= '9' )
	n = n*10 + *cs++ - '0';
    for( ;; ){
	switch( *cs++ ){
	case 'k':
	    n *= 1024;
	    continue;
	case 'w':
	    n *= sizeof( int );
	    continue;
	case 'b':
	    n *= 512;
	    continue;
	case '*':
	case 'x':
	    string = cs;
	    n *= number( BIG );
	case '\0':
	    if( n >= big || n < 0 ){
		fprintf( stderr, ediag("dd: argument %D out of rang\n","dd: Аргумент %D выходит за пределы\n"), n );
		exit(1);
	    }
	    return( n );
	}
    }                   /* never gets here */
}

cnull( cc )
{
    register c;

    c = cc&0377;
    if( cflag&UCASE && islower( c ) )
	c = toupper(c);
    if( cflag&LCASE && isupper( c ) )
	c = tolower(c);
    null( c );
}

null( c )
{
    *op = c;
    op++;
    if( ++obc >= obs ){
	flsh();
	op = obuf;
    }
}

trim( cc )
{
    register c;

    c = cc&0377;
    if( cbs == 0 ){
	cnull( c );
	return;
    }
    if( c == ' ' ){
	nspace++;
	goto out;
    }
    while( nspace > 0 ){
	null( ' ' );
	nspace--;
    }
    cnull( c );
out:
    if( ++cbc >= cbs ){
	null( '\n' );
	cbc = 0;
	nspace = 0;
    }
}

pad( cc )
{
    register c;

    c = cc&0377;
    if( cflag&UCASE && islower( c ) )
	c = toupper(c);
    if( cflag&LCASE && isupper( c ) )
	c = tolower(c);
    c &= 0377;
    if( cbs == 0 ){
	null( c );
	return;
    }
    if( cc == '\n' ){
	while( cbc < cbs ){
	    null( ' ' );
	    cbc++;
	}
	cbc = 0;
	return;
    }
    if( cbc++ == cbs )
	ntrunc++;
    if( cbc <= cbs )
	null( c );
}

term()
{
    stats();
    exit( 0 );
}

stats()
{
    fprintf( stderr, ediag("\n%D+%D records in\n","%D+%D записей введено\n"), nifr, nipr );
    fprintf( stderr, ediag("%D+%D records out\n","%D+%D записей выведено\n"), nofr, nopr );
    if( ntrunc )
	fprintf( stderr, ediag("%D truncated records\n","%D записей обрезано\n"), ntrunc );
}

from( cc )
register unsigned cc;
{
    register unsigned c;

    c = (unsigned)TOFROM[cc&0377]&0377;
    if( cbs == 0 ){
	cnull( c );
	return;
    }
    if( c == ' ' ){
	nspace++;
	goto out;
    }
    while( nspace > 0 ){
	null( ' ' );
	nspace--;
    }
    cnull( c );
out:
    if( ++cbc >= cbs ){
	null( '\n' );
	cbc = 0;
	nspace = 0;
    }
}

to( cc )
unsigned cc;
{
    register unsigned c;

    c = cc&0377;
    if( cflag&UCASE && islower( c ) )
	c = toupper(c);
    if( cflag&LCASE && isupper( c ) )
	c = tolower(c);
    c = (unsigned)TOFROM[c]&0377;
    if( cbs == 0 ){
	null( c );
	return;
    }
    if( cc == '\n' ){
	while( cbc < cbs ){
	    null( TOFROM[(unsigned)' '] );
	    cbc++;
	}
	cbc = 0;
	return;
    }
    if( cbc++ == cbs )
	ntrunc++;
    if( cbc <= cbs )
	null( c );
}
@


1.6
log
@В связи с отсутствием в ДЕМОС/МНОС 2.0 системного вызова sleep
с аргументом в тиках аргумент delay теперь - секунды.
@
text
@d13 5
a17 1
 *      $Log:   dd.c,v $
d40 1
a40 1
static char rcsid[] = "$Header: dd.c,v 1.5 86/05/23 12:58:03 mike Exp $";
d72 1
d153 5
d273 1
a273 1
	if( fstat(ibf,&st)==0 && (st.st_mode&S_IFMT)==S_IFBLK ){
@


1.5
log
@*** empty log message ***
@
text
@d14 3
d36 1
a36 1
static char rcsid[] = "$Header: dd.c,v 1.4 86/05/23 12:40:16 mike Exp $";
d165 2
a166 2
	    delay = -number( 10000l )*HZ/1000;
	    continue;  /* Пересчет из милисекунд в тики */
@


1.4
log
@Смещение от начала файла таблиц кодировок 
берется из размера структуры exec из a.out.h
@
text
@d14 4
d33 1
a33 1
static char rcsid[] = "$Header: dd.c,v 1.3 86/05/23 12:29:38 mike Exp $";
@


1.3
log
@*** empty log message ***
@
text
@d14 3
d29 1
a29 1
static char rcsid[] = "$Header: dd.c,v 1.2 86/05/22 17:07:38 mike Exp $";
d33 1
d51 1
a51 1
#define SEEKTBL 16      /* seek on begining table decode */
@


1.2
log
@Таблицы перекодировок описаны как static массивы в "C"
поэтомы пришлось изменить смещение при чтении файлов с
таблицами перекодировок.
@
text
@d14 5
d26 1
a26 1
static char rcsid[] = "$Header: dd.c,v 1.1 86/05/21 11:41:38 root Exp $";
d371 1
a371 1
	lseek( dfil, (long)CODSIZE+SEEKTBL, 0 );
d378 1
@


1.1
log
@Initial revision
@
text
@d13 4
a16 1
 *      $Log$
d21 1
a21 1
static char rcsid[] = "$Header$";
d42 1
d366 3
a368 1
	lseek( dfil, (long)CODSIZE, 0 );
@
