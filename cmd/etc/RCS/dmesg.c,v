head     1.2;
access   ;
symbols  ;
locks    ;
comment  @ * @;


1.2
date     88.09.26.15.27.45;  author avg;  state Exp;
branches ;
next     1.1;

1.1
date     86.12.21.17.27.41;  author alex;  state Exp;
branches ;
next     ;


desc
@
Просмотр буфера системных сообщений.
@


1.2
log
@Теперь дата записывается в начало диагностического сообщения.
@
text
@/*
 *      dmesg - Посмотреть системные сообщения
 *      $Log:   dmesg.c,v $
 * Revision 1.1  86/12/21  17:27:41  alex
 * Initial revision
 *
 */

static char rcsid[]="$Header: dmesg.c,v 1.1 86/12/21 17:27:41 alex Exp $";

#include <stdio.h>
#include <sys/param.h>
#include <a.out.h>
#include <ediag.h>

char    msgbuf[MSGBUFS];
char    *msgbufp;
int     sflg;
int     of      = -1;

struct {
	char    *omsgflg;
	int     omindex;
	char    omsgbuf[MSGBUFS];
} omesg;
struct nlist nl[3] = {
	{"_msgbuf"},
	{"_msgbufp"}
};

main(argc, argv)
char **argv;
{
	int mem;
	register char *mp, *omp, *mstart;
	int samef, grbf;
	char workline[512];
	char *colls;

	if (argc>1 && argv[1][0] == '-') {
		sflg++;
		argc--;
		argv++;
	}
	if (sflg)
		of = open("/usr/adm/msgbuf", 2);
	read(of, (char *)&omesg, sizeof(omesg));
	lseek(of, 0L, 0);
	sflg = 0;
	nlist(argc>2? argv[2]:"/demos", nl);
	if (nl[0].n_type==0)
		done(ediag("dmesg: no kernel namelist\n",
			   "dmesg: нет списка имен ядра\n"));
	if ((mem = open((argc>1? argv[1]: "/dev/mem"), 0)) < 0)
		done(ediag("dmesg: no /dev/mem\n",
			   "dmesg: нет /dev/mem\n"));
	lseek(mem, (long)nl[0].n_value, 0);
	read(mem, msgbuf, MSGBUFS);
	lseek(mem, (long)nl[1].n_value, 0);
	read(mem, (char *)&msgbufp, sizeof(msgbufp));
	if (msgbufp < (char *)nl[0].n_value || msgbufp >= (char *)nl[0].n_value+MSGBUFS)
		done(ediag("dmesg: kernel namelist mismatch\n",
			   "dmesg: плохой список имен ядра\n"));
	msgbufp += msgbuf - (char *)nl[0].n_value;
	mstart = &msgbuf[omesg.omindex];
	omp = &omesg.omsgbuf[msgbufp-msgbuf];
	mp = msgbufp;
	samef = 1;
	do {
		if (*mp++ != *omp++) {
			mstart = msgbufp;
			samef = 0;
			break;
		}
		if (mp == &msgbuf[MSGBUFS])
			mp = msgbuf;
		if (omp == &omesg.omsgbuf[MSGBUFS])
			omp = omesg.omsgbuf;
	} while (mp != mstart);
	if (samef && mstart == msgbufp)
		exit(0);
	mp = mstart;
	grbf = 0;
	colls = workline;
	do {
		if( grbf )  {
			if( (*mp < 040 || *mp > 0176) &&
			     *mp != '\n' && *mp != '\r' ) {
				mp++;
				grbf = 0;
			} else if( (*colls++ = *mp++) == '\n' ) {
				pdate();
				*colls = 0;
				printf( "%.80s", workline);
				colls = workline;
			}
		} else if(*mp++ == '\n')
			grbf++;
		if (mp == &msgbuf[MSGBUFS])
			mp = msgbuf;
	} while (mp != msgbufp);
	done((char *)NULL);
}

done(s)
char *s;
{
	register char *p, *q;

	if (s && s!=omesg.omsgflg && sflg==0) {
		pdate();
		printf("%.80s", s);
	}
	omesg.omsgflg = s;
	q = omesg.omsgbuf;
	for (p = msgbuf; p < &msgbuf[MSGBUFS]; )
		*q++ = *p++;
	omesg.omindex = msgbufp - msgbuf;
	write(of, (char *)&omesg, sizeof(omesg));
	exit(s!=NULL);
}

pdate()
{
	extern char *ctime();
	time_t tbuf;

	time(&tbuf);
	printf("%.12s ", ctime(&tbuf)+4);
}
@


1.1
log
@Initial revision
@
text
@@
