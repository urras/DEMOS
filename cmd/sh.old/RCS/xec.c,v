head     0.4;
access   ;
symbols  MNOS:0.3 SYSTEM2_9:0.2 DEMOS1_3:0.1;
locks    ;
comment  @ * @;


0.4
date     86.09.29.18.32.09;  author alex;  state Exp;
branches ;
next     0.3;

0.3
date     86.09.24.21.57.37;  author alex;  state Exp;
branches ;
next     0.2;

0.2
date     86.09.24.21.44.36;  author alex;  state Exp;
branches ;
next     0.1;

0.1
date     86.09.24.21.17.02;  author alex;  state Exp;
branches ;
next     ;


desc
@SHELL -ÉÎÔÅÒÐÒÅÔÁÔÏÒ
@


0.4
log
@÷ÅÒÓÉÑ, ÓÌÉÔÁÑ ÉÚ 2.9 É äåíïó ÂÅÚ ÒÕÓÓËÉÈ ÄÉÁÇÎÏÓÔÉË
@
text
@#
/*
 * KIAE  shell
 *
 *
 */

#include        "defs.h"
#include        "sym.h"

LOCAL INT       parent;

SYSTAB          commands;



/* ========     command execution       ========*/


execute(argt, execflg, pf1, pf2)
	TREPTR          argt;
	INT             *pf1, *pf2;
{
	/* `stakbot' is preserved by this routine */
	REG TREPTR      t;
	STKPTR          sav=savstak();

	sigchk();

	IF (t=argt) ANDF execbrk==0
	THEN    REG INT         treeflgs;
		INT             oldexit, type;
		REG STRING      *com;

		treeflgs = t->tretyp; type = treeflgs&COMMSK;
		oldexit=exitval; exitval=0;

		SWITCH type IN

		case TCOM:
			BEGIN
			STRING          a1;
			INT             argn, internal;
			ARGPTR          schain=gchain;
			IOPTR           io=t->treio;
			gchain=0;
			argn = getarg(t);
			com=scan(argn);
			a1=com[1]; gchain=schain;

			IF (internal=syslook(com[0],commands)) ORF argn==0
			THEN    setlist(t->comset, 0);
			FI

			IF argn ANDF (flags&noexec)==0
			THEN    /* print command if execpr */
				IF flags&execpr
				THEN    argn=0; prs(execpmsg);
					WHILE com[argn]!=ENDARGS
					DO prs(com[argn++]); blank() OD
					newline();
				FI

				SWITCH internal IN

				case SYSDOT:
					IF a1
					THEN    REG INT         f;

						IF (f=pathopen(getpath(a1), a1)) < 0
						THEN failed(a1,notfound);
						ELSE execexp(0,f);
						FI
					FI
					break;

				case SYSTIMES:
					{
#ifndef HZ60
					struct { INT pt[2]; L_INT ct[2]; } t;
					times( &t );
					prs( "U " );  prt( t.ct[0] );
					prs( "  S " );prt( t.ct[1] ); newline();
#else
					L_INT   t[4]; times(t);
					prt(t[2]); blank(); prt(t[3]); newline();
#endif
					}
					break;

				case SYSEXIT:
#ifdef RL
					exitval = a1?stoi(a1):oldexit;
					done();
#else
					exitsh(a1?stoi(a1):oldexit);
#endif

				case SYSNULL:
					io=0;
					break;

				case SYSCONT:
					execbrk = -loopcnt; break;

				case SYSBREAK:
					IF (execbrk=loopcnt) ANDF a1
					THEN breakcnt=stoi(a1);
					FI
					break;

				case SYSTRAP:
					IF a1
					THEN    BOOL    clear;
						IF (clear=digit(*a1))==0
						THEN    ++com;
						FI
						WHILE *++com
						DO INT  i;
						   IF (i=stoi(*com))>=MAXTRAP ORF i<MINTRAP
						   THEN failed(*com,badtrap);
						   ELIF clear
						   THEN clrsig(i);
						   ELSE replace(&trapcom[i],a1);
							IF *a1
							THEN    getsig(i);
							ELSE    ignsig(i);
							FI
						   FI
						OD
					ELSE    /* print out current traps */
						INT             i;

						FOR i=0; i<MAXTRAP; i++
						DO IF trapcom[i]
						   THEN prn(i); prs(colon); prs(trapcom[i]); newline();
						   FI
						OD
					FI
					break;

				case SYSEXEC:
					com++;
					initio(io); ioset=0; io=0;
					IF a1==0 THEN break FI

				case SYSLOGIN:
					flags |= forked;
					oldsigs(); execa(com); done();

				case SYSCD:
					IF flags&rshflg
					THEN    failed(com[0],restricted);
					ELIF (a1==0 ANDF (a1=homenod.namval)==0) ORF chdir(a1)<0
					THEN    failed(a1,baddir);
					FI
					break;

				case SYSSHFT:
					IF dolc<1
					THEN    error(badshift);
					ELSE    dolv++; dolc--;
					FI
					assnum(&dolladr, dolc);
					break;

				case SYSWAIT:
					await(-1);
					break;

				case SYSREAD:
					exitval=readvar(&com[1]);
					break;

/*
				case SYSTST:
					exitval=testcmd(com);
					break;
*/

				case SYSSET:
					IF a1
					THEN    INT     argc;
						argc = options(argn,com);
						IF argc>1
						THEN    setargs(com+argn-argc);
						FI
					ELIF t->comset==0
					THEN    /*scan name chain and print*/
						namscan(printnam);
					FI
					break;

				case SYSRDONLY:
					exitval=N_RDONLY;

				case SYSXPORT:
					IF exitval==0 THEN exitval=N_EXPORT; FI

					IF a1
					THEN    WHILE *++com
						DO attrib(lookup(*com), exitval) OD
					ELSE    namscan(printflg);
					FI
					exitval=0;
					break;

				case SYSEVAL:
					IF a1
					THEN    execexp(a1,&com[2]);
					FI
					break;

				case SYSUMASK:
					if (a1) {
						int c, i
						i = 0;
						while ((c = *a1++) >= '0' &&
							c <= '7')
							i = (i << 3) + c - '0';
						umask(i);
					} else {
						int i, j;
						umask(i = umask(0));
						prc('0');
						for (j = 6; j >= 0; j -= 3)
							prc(((i>>j)&07) + '0');
						newline();
					}
					break;

				default:
					internal=builtin(argn,com);

				ENDSW

				IF internal
				THEN    IF io THEN error(illegal) FI
					chktrap();
					break;
				FI
			ELIF t->treio==0
			THEN    break;
			FI
			END

		case TFORK:
			IF execflg ANDF (treeflgs&(FAMP|FPOU))==0
			THEN    parent=0;
			ELSE    WHILE (parent=fork()) == -1
				DO sigchk();
#ifndef RL
					alarm(10); pause()
#else
					sleep( 10 ) ;
#endif  RL
				OD
			FI
			IF parent
			THEN    /* This is the parent branch of fork;    */
				/* it may or may not wait for the child. */
				IF treeflgs&FPRS ANDF flags&ttyflg
				THEN	prn(parent); newline();
				FI
				IF treeflgs&FPCL THEN closepipe(pf1) FI
				IF (treeflgs&(FAMP|FPOU))==0
				THEN	await(parent);
				ELIF (treeflgs&FAMP)==0
				THEN	post(parent);
				ELSE	assnum(&pcsadr, parent);
				FI

				chktrap();
				break;


			ELSE	/* this is the forked branch (child) of execute */
				flags |= forked; iotemp=0;
				postclr();
				settmp();

				/* Turn off INTR and QUIT if `FINT'  */
				/* Reset ramaining signals to parent */
				/* except for those `lost' by trap   */
				oldsigs();
				IF treeflgs&FINT
				THEN	signal(INTR,1); signal(QUIT,1);
				FI

				/* pipe in or out */
				IF treeflgs&FPIN
				THEN	rename(pf1[INPIPE],0);
					close(pf1[OTPIPE]);
				FI
				IF treeflgs&FPOU
				THEN	rename(pf2[OTPIPE],1);
					close(pf2[INPIPE]);
				FI

				/* default std input for & */
				IF treeflgs&FINT ANDF ioset==0
				THEN	rename(chkopen(devnull),0);
				FI

				/* io redirection */
				initio(t->treio);
				IF type!=TCOM
				THEN	execute(t->forktre,1);
				ELIF com[0]!=ENDARGS
				THEN	setlist(t->comset,N_EXPORT);
					execa(com);
				FI
				done();
			FI

		case TPAR:
			rename(dup(2),output);
			execute(t->partre,execflg);
			done();

		case TFIL:
			BEGIN
			   INT pv[2]; chkpipe(pv);
			   IF execute(t->lstlef, 0, pf1, pv)==0
			   THEN	execute(t->lstrit, execflg, pv, pf2);
			   ELSE	closepipe(pv);
			   FI
			END
			break;

		case TLST:
			execute(t->lstlef,0);
			execute(t->lstrit,execflg);
			break;

		case TAND:
			IF execute(t->lstlef,0)==0
			THEN	execute(t->lstrit,execflg);
			FI
			break;

		case TORF:
			IF execute(t->lstlef,0)!=0
			THEN	execute(t->lstrit,execflg);
			FI
			break;

		case TFOR:
			BEGIN
			   NAMPTR	n = lookup(t->fornam);
			   STRING	*args;
			   DOLPTR	argsav=0;

			   IF t->forlst==0
			   THEN    args=dolv+1;
				   argsav=useargs();
			   ELSE	   ARGPTR	schain=gchain;
				   gchain=0;
				   trim((args=scan(getarg(t->forlst)))[0]);
				   gchain=schain;
			   FI
			   loopcnt++;
			   WHILE *args!=ENDARGS ANDF execbrk==0
			   DO	assign(n,*args++);
				execute(t->fortre,0);
				IF execbrk<0 THEN execbrk=0 FI
			   OD
			   IF breakcnt THEN breakcnt-- FI
			   execbrk=breakcnt; loopcnt--;
			   argfor=freeargs(argsav);
			END
			break;

		case TWH:
		case TUN:
			BEGIN
			   INT		i=0;

			   loopcnt++;
			   WHILE execbrk==0 ANDF (execute(t->whtre,0)==0)==(type==TWH)
			   DO i=execute(t->dotre,0);
			      IF execbrk<0 THEN execbrk=0 FI
			   OD
			   IF breakcnt THEN breakcnt-- FI
			   execbrk=breakcnt; loopcnt--; exitval=i;
			END
			break;

		case TIF:
			IF execute(t->iftre,0)==0
			THEN	execute(t->thtre,execflg);
			ELSE	execute(t->eltre,execflg);
			FI
			break;

		case TSW:
			BEGIN
			   REG STRING	r = mactrim(t->swarg);
			   t=t->swlst;
			   WHILE t
			   DO	ARGPTR		rex=t->regptr;
				WHILE rex
				DO	REG STRING	s;
					IF gmatch(r,s=macro(rex->argval)) ORF (trim(s), eq(r,s))
					THEN	execute(t->regcom,0);
						t=0; break;
					ELSE	rex=rex->argnxt;
					FI
				OD
				IF t THEN t=t->regnxt FI
			   OD
			END
			break;
		ENDSW
		exitset();
	FI

	sigchk();
	tdystak(sav);
	return(exitval);
}


execexp(s,f)
	STRING		s;
	UFD		f;
{
	FILEBLK		fb;
	push(&fb);
	IF s
	THEN	estabf(s); fb.feval=f;
	ELIF f>=0
	THEN	initf(f);
	FI
	execute(cmd(NL, NLFLG|MTFLG),0);
	pop();
}
/* éáü ÉÍ. é. ÷. ëõòþáôï÷á, íïóë÷á, 1984 (ëïé-8) */
@


0.3
log
@÷ÅÒÓÉÑ ÉÚ íîïó
@
text
@d3 1
a3 1
 * íîïó òì 1.2 shell
d79 1
a79 1
#ifdef RL
@


0.2
log
@÷ÅÒÓÉÑ ÉÚ 2.9
@
text
@d3 1
a3 1
 * UNIX shell
a4 2
 * S. R. Bourne
 * Bell Telephone Laboratories
d8 2
a9 2
#include	"defs.h"
#include	"sym.h"
d11 1
a11 1
LOCAL INT	parent;
d13 1
a13 1
SYSTAB		commands;
d17 1
a17 1
/* ========	command execution	========*/
d21 2
a22 2
	TREPTR		argt;
	INT		*pf1, *pf2;
d25 2
a26 2
	REG TREPTR	t;
	STKPTR		sav=savstak();
d31 3
a33 3
	THEN	REG INT		treeflgs;
		INT		oldexit, type;
		REG STRING	*com;
d42 4
a45 4
			STRING		a1;
			INT		argn, internal;
			ARGPTR		schain=gchain;
			IOPTR		io=t->treio;
d52 1
a52 1
			THEN	setlist(t->comset, 0);
d56 1
a56 1
			THEN	/* print command if execpr */
d58 1
a58 1
				THEN	argn=0;	prs(execpmsg);
d68 2
a69 2
					THEN	REG INT		f;
	
d76 1
a76 1
	
d79 7
a85 1
					L_INT	t[4]; times(t);
d87 1
d90 1
a90 1
	
d92 4
d97 2
a98 1
	
d102 1
a102 1
	
d105 1
a105 1
	
d111 1
a111 1
	
d114 1
a114 1
					THEN	BOOL	clear;
d116 1
a116 1
						THEN	++com;
d119 1
a119 1
						DO INT	i;
d121 1
a121 1
						   THEN	failed(*com,badtrap);
d123 2
a124 2
						   THEN	clrsig(i);
						   ELSE	replace(&trapcom[i],a1);
d126 2
a127 2
							THEN	getsig(i);
							ELSE	ignsig(i);
d131 3
a133 3
					ELSE	/* print out current traps */
						INT		i;
	
d136 1
a136 1
						   THEN	prn(i); prs(colon); prs(trapcom[i]); newline();
d141 1
a141 1
	
d146 1
a146 1
	
d150 1
a150 1
	
d153 1
a153 1
					THEN	failed(com[0],restricted);
d155 1
a155 1
					THEN	failed(a1,baddir);
d158 1
a158 1
	
d161 2
a162 2
					THEN	error(badshift);
					ELSE	dolv++; dolc--;
d166 1
a166 1
	
d170 1
a170 1
	
d183 1
a183 1
					THEN	INT	argc;
d186 1
a186 1
						THEN	setargs(com+argn-argc);
d189 1
a189 1
					THEN	/*scan name chain and print*/
d193 1
a193 1
	
d196 1
d199 1
a199 1
	
d201 1
a201 1
					THEN	WHILE *++com
d203 1
a203 1
					ELSE	namscan(printflg);
d207 1
a207 1
	
d210 1
a210 1
					THEN	execexp(a1,&com[2]);
d214 18
a231 18
                                case SYSUMASK:
                                        if (a1) {
                                                int c, i
                                                i = 0;
                                                while ((c = *a1++) >= '0' &&
                                                        c <= '7')
                                                        i = (i << 3) + c - '0';
                                                umask(i);
                                        } else {
                                                int i, j;
                                                umask(i = umask(0));
                                                prc('0');
                                                for (j = 6; j >= 0; j -= 3)
                                                        prc(((i>>j)&07) + '0');
                                                newline();
                                        }
                                        break;
	
d234 1
a234 1
	
d238 1
a238 1
				THEN	IF io THEN error(illegal) FI
d243 1
a243 1
			THEN	break;
d246 1
a246 1
	
d249 9
a257 3
			THEN	parent=0;
			ELSE	WHILE (parent=fork()) == -1
				DO sigchk(); alarm(10); pause() OD
a258 1

d260 1
a260 1
			THEN	/* This is the parent branch of fork;    */
d438 1
@


0.1
log
@*** empty log message ***
@
text
@d3 1
a3 1
 * KIAE  shell
d5 2
d10 2
a11 2
#include        "defs.h"
#include        "sym.h"
d13 1
a13 1
LOCAL INT       parent;
d15 1
a15 1
SYSTAB          commands;
d19 1
a19 1
/* ========     command execution       ========*/
d23 2
a24 2
	TREPTR          argt;
	INT             *pf1, *pf2;
d27 2
a28 2
	REG TREPTR      t;
	STKPTR          sav=savstak();
d33 3
a35 3
	THEN    REG INT         treeflgs;
		INT             oldexit, type;
		REG STRING      *com;
d44 4
a47 4
			STRING          a1;
			INT             argn, internal;
			ARGPTR          schain=gchain;
			IOPTR           io=t->treio;
d54 1
a54 1
			THEN    setlist(t->comset, 0);
d58 1
a58 1
			THEN    /* print command if execpr */
d60 1
a60 1
				THEN    argn=0; prs(execpmsg);
d70 2
a71 2
					THEN    REG INT         f;

d78 1
a78 1

d81 1
a81 7
#ifndef HZ60
					struct { INT pt[2]; L_INT ct[2]; } t;
					times( &t );
					prs( "U " );  prt( t.ct[0] );
					prs( "  S " );prt( t.ct[1] ); newline();
#else
					L_INT   t[4]; times(t);
a82 1
#endif
d85 1
a85 1

a86 4
#ifdef RL
					exitval = a1?stoi(a1):oldexit;
					done();
#else
d88 1
a88 2
#endif

d92 1
a92 1

d95 1
a95 1

d101 1
a101 1

d104 1
a104 1
					THEN    BOOL    clear;
d106 1
a106 1
						THEN    ++com;
d109 1
a109 1
						DO INT  i;
d111 1
a111 1
						   THEN failed(*com,badtrap);
d113 2
a114 2
						   THEN clrsig(i);
						   ELSE replace(&trapcom[i],a1);
d116 2
a117 2
							THEN    getsig(i);
							ELSE    ignsig(i);
d121 3
a123 3
					ELSE    /* print out current traps */
						INT             i;

d126 1
a126 1
						   THEN prn(i); prs(colon); prs(trapcom[i]); newline();
d131 1
a131 1

d136 1
a136 1

d140 1
a140 1

d143 1
a143 1
					THEN    failed(com[0],restricted);
d145 1
a145 1
					THEN    failed(a1,baddir);
d148 1
a148 1

d151 2
a152 2
					THEN    error(badshift);
					ELSE    dolv++; dolc--;
d156 1
a156 1

d160 1
a160 1

d173 1
a173 1
					THEN    INT     argc;
d176 1
a176 1
						THEN    setargs(com+argn-argc);
d179 1
a179 1
					THEN    /*scan name chain and print*/
d183 1
a183 1

a185 1

d188 1
a188 1

d190 1
a190 1
					THEN    WHILE *++com
d192 1
a192 1
					ELSE    namscan(printflg);
d196 1
a196 1

d199 1
a199 1
					THEN    execexp(a1,&com[2]);
d203 18
a220 18
				case SYSUMASK:
					if (a1) {
						int c, i
						i = 0;
						while ((c = *a1++) >= '0' &&
							c <= '7')
							i = (i << 3) + c - '0';
						umask(i);
					} else {
						int i, j;
						umask(i = umask(0));
						prc('0');
						for (j = 6; j >= 0; j -= 3)
							prc(((i>>j)&07) + '0');
						newline();
					}
					break;

d223 1
a223 1

d227 1
a227 1
				THEN    IF io THEN error(illegal) FI
d232 1
a232 1
			THEN    break;
d235 1
a235 1

d238 3
a240 9
			THEN    parent=0;
			ELSE    WHILE (parent=fork()) == -1
				DO sigchk();
#ifndef RL
					alarm(10); pause()
#else
					sleep( 10 ) ;
#endif  RL
				OD
d242 1
d244 1
a244 1
			THEN    /* This is the parent branch of fork;    */
a421 1
/* éáü ÉÍ. é. ÷. ëõòþáôï÷á, íïóë÷á, 1984 (ëïé-8) */
@
