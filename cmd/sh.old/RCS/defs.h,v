head     0.6;
access   ;
symbols  MNOS:0.3 SYSTEM2_9:0.2 DEMOS1_3:0.1;
locks    ;
comment  @ * @;


0.6
date     89.02.07.23.09.10;  author korotaev;  state Exp;
branches ;
next     0.5;

0.5
date     88.09.20.17.58.19;  author avg;  state Exp;
branches ;
next     0.4;

0.4
date     86.09.29.18.26.18;  author alex;  state Exp;
branches ;
next     0.3;

0.3
date     86.09.24.21.50.45;  author alex;  state Exp;
branches ;
next     0.2;

0.2
date     86.09.24.21.38.55;  author alex;  state Exp;
branches ;
next     0.1;

0.1
date     86.09.24.21.19.20;  author alex;  state Exp;
branches ;
next     ;


desc
@SHELL -интерпретатор
@


0.6
log
@Теперь умеет экранировать сигналы 17-25 (командой trap).
@
text
@#
/*
 *      KIAE  shell
 */
#define NEWEXEC /* exec понимает #!csh -x ... */
/* error exits from various parts of shell */
#define ERROR   1
#define SYNBAD  2
#define SIGFAIL 3
#define SIGFLG  0200

/* command tree */
#define FPRS    020
#define FINT    040
#define FAMP    0100
#define FPIN    0400
#define FPOU    01000
#define FPCL    02000
#define FCMD    04000
#define COMMSK  017

#define TCOM    0
#define TPAR    1
#define TFIL    2
#define TLST    3
#define TIF     4
#define TWH     5
#define TUN     6
#define TSW     7
#define TAND    8
#define TORF    9
#define TFORK   10
#define TFOR    11

/* execute table */
#define SYSSET  1
#define SYSCD   2
#define SYSEXEC 3
#define SYSLOGIN 4
#define SYSTRAP 5
#define SYSEXIT 6
#define SYSSHFT 7
#define SYSWAIT 8
#define SYSCONT 9
#define SYSBREAK 10
#define SYSEVAL 11
#define SYSDOT  12
#define SYSRDONLY 13
#define SYSTIMES 14
#define SYSXPORT 15
#define SYSNULL 16
#define SYSREAD 17
#define SYSTST  18
#define SYSUMASK        19

/* used for input and output of shell */
#define INIO 10
#define OTIO 11

/*io nodes*/
#define USERIO  10
#define IOUFD   15
#define IODOC   16
#define IOPUT   32
#define IOAPP   64
#define IOMOV   128
#define IORDW   256
#define INPIPE  0
#define OTPIPE  1

/* arg list terminator */
#define ENDARGS 0

#include        "mac.h"
#include        "mode.h"
#include        "name.h"


/* result type declarations */
#define alloc malloc
ADDRESS         alloc();
VOID            addblok();
STRING          make();
STRING          movstr();
TREPTR          cmd();
TREPTR          makefork();
NAMPTR          lookup();
VOID            setname();
VOID            setargs();
DOLPTR          useargs();
REAL            expr();
STRING          catpath();
STRING          getpath();
STRING          *scan();
STRING          mactrim();
STRING          macro();
STRING          execs();
VOID            await();
VOID            post();
STRING          copyto();
VOID            exname();
STRING          staknam();
VOID            printnam();
VOID            printflg();
VOID            prs();
VOID            prc();
VOID            getenv();
STRING          *setenv();

#define attrib(n,f)     (n->namflg |= f)
#define round(a,b)      (((int)((ADR(a)+b)-1))&~((b)-1))
#define closepipe(x)    (close(x[INPIPE]), close(x[OTPIPE]))
#define eq(a,b)         (cf(a,b)==0)
#define max(a,b)        ((a)>(b)?(a):(b))
#define assert(x)       ;

/* temp files and io */
UFD             output;
INT             ioset;
IOPTR           iotemp;         /* files to be deleted sometime */
IOPTR           iopend;         /* documents waiting to be read at NL */

/* substitution */
INT             dolc;
STRING          *dolv;
DOLPTR          argfor;
ARGPTR          gchain;

/* stack */
#define         BLK(x)  ((BLKPTR)(x))
#define         BYT(x)  ((BYTPTR)(x))
#define         STK(x)  ((STKPTR)(x))
#define         ADR(x)  ((char*)(x))

/* stak stuff */
#include        "stak.h"

/* string constants */
MSG             atline;
MSG             readmsg;
MSG             colon;
MSG             minus;
MSG             nullstr;
MSG             sptbnl;
MSG             unexpected;
MSG             endoffile;
MSG             synmsg;

/* name tree and words */
SYSTAB          reserved;
INT             wdval;
INT             wdnum;
ARGPTR          wdarg;
INT             wdset;
BOOL            reserv;

/* prompting */
MSG             stdprompt;
MSG             supprompt;
MSG             profile;

/* built in names */
NAMNOD          fngnod;
NAMNOD          ifsnod;
NAMNOD          homenod;
NAMNOD          mailnod;
NAMNOD          pathnod;
NAMNOD          ps1nod;
NAMNOD          ps2nod;

/* special names */
MSG             flagadr;
STRING          cmdadr;
STRING          exitadr;
STRING          dolladr;
STRING          pcsadr;
STRING          pidadr;

MSG             defpath;

/* names always present */
MSG             mailname;
MSG             homename;
MSG             pathname;
MSG             fngname;
MSG             ifsname;
MSG             ps1name;
MSG             ps2name;

/* transput */
CHAR            tmpout[];
STRING          tmpnam;
INT             serial;
#define         TMPNAM 7
FILE            standin;
#define input   (standin->fdes)
#define eof     (standin->feof)
INT             peekc;
STRING          comdiv;
MSG             devnull;

/* flags */
#define         noexec  01
#define         intflg  02
#define         prompt  04
#define         setflg  010
#define         errflg  020
#define         ttyflg  040
#define         forked  0100
#define         oneflg  0200
#define         rshflg  0400
#define         waiting 01000
#define         stdflg  02000
#define         execpr  04000
#define         readpr  010000
#define         keyflg  020000
INT             flags;

/* error exits from various parts of shell */
#include        <setjmp.h>
jmp_buf         subshell;
jmp_buf         errshell;

/* fault handling */
#include        "brkincr.h"
POS             brkincr;

#define MINTRAP 0
#define MAXTRAP 26

#define INTR    2
#define QUIT    3
#define MEMF    11
#define ALARM   14
#define KILL    15
#define TRAPSET 2
#define SIGSET  4
#define SIGMOD  8

VOID            fault();
BOOL            trapnote;
STRING          trapcom[];
BOOL            trapflg[];

/* name tree and words */
STRING          *environ;
CHAR            numbuf[];
MSG             export;
MSG             readonly;

/* execflgs */
INT             exitval;
BOOL            execbrk;
INT             loopcnt;
INT             breakcnt;

/* messages */
MSG             mailmsg;
MSG             coredump;
MSG             badopt;
MSG             badparam;
MSG             badsub;
MSG             nospace;
MSG             notfound;
MSG             badtrap;
MSG             baddir;
MSG             badshift;
MSG             illegal;
MSG             restricted;
MSG             execpmsg;
MSG             notid;
MSG             wtfailed;
MSG             badcreate;
MSG             piperr;
MSG             badopen;
MSG             badnum;
MSG             arglist;
MSG             txtbsy;
MSG             toobig;
MSG             badexec;
MSG             notfound;
MSG             badfile;
/*
MSG             version;
 */
address end[];

#include        "ctype.h"
@


0.5
log
@Убран

Rsort.h
@
text
@d229 1
a229 1
#define MAXTRAP 17
@


0.4
log
@Версия, слитая из 2.9 и ДЕМОС без русских диагностик
@
text
@a288 2
#include        "Rsort.h"

@


0.3
log
@Версия из МНОС
@
text
@d3 1
a3 3
 *      МНОС РЛ 1.2 shell
 *
 *
d5 1
a5 1

d107 1
a107 3
STRING          getenv();
VOID            initmess();
VOID            getuenv();
d139 1
a139 1
STRING          atline;
d145 3
a147 3
STRING          unexpected;
STRING          endoffile;
STRING          synmsg;
a188 1
MSG             meslang;
d248 2
a249 2
STRING          export;
STRING          readonly;
d258 12
a269 12
STRING          mailmsg;
STRING          coredump;
STRING          badopt;
STRING          badparam;
STRING          badsub;
STRING          nospace;
STRING          notfound;
STRING          badtrap;
STRING          baddir;
STRING          badshift;
STRING          illegal;
STRING          restricted;
d271 12
a282 14
STRING          notid;
STRING          wtfailed;
STRING          badcreate;
STRING          piperr;
STRING          badopen;
STRING          badnum;
STRING          arglist;
STRING          txtbsy;
STRING          toobig;
STRING          badexec;
STRING          notfound;
STRING          badfile;
STRING          Islogin;
STRING          Newline;
d290 1
@


0.2
log
@Версия из 2.9
@
text
@d3 3
a5 1
 *	UNIX shell
d9 2
a10 2
#define ERROR	1
#define SYNBAD	2
d12 1
a12 1
#define SIGFLG	0200
d15 8
a22 8
#define FPRS	020
#define FINT	040
#define FAMP	0100
#define FPIN	0400
#define FPOU	01000
#define FPCL	02000
#define FCMD	04000
#define COMMSK	017
d24 12
a35 12
#define TCOM	0
#define TPAR	1
#define TFIL	2
#define TLST	3
#define TIF	4
#define TWH	5
#define TUN	6
#define TSW	7
#define TAND	8
#define TORF	9
#define TFORK	10
#define TFOR	11
d38 3
a40 3
#define SYSSET	1
#define SYSCD	2
#define SYSEXEC	3
d42 2
a43 2
#define SYSTRAP	5
#define SYSEXIT	6
d45 1
a45 1
#define SYSWAIT	8
d49 1
a49 1
#define SYSDOT	12
d55 2
a56 2
#define SYSTST	18
#define	SYSUMASK	19
d63 9
a71 9
#define USERIO	10
#define IOUFD	15
#define IODOC	16
#define IOPUT	32
#define IOAPP	64
#define IOMOV	128
#define IORDW	256
#define INPIPE	0
#define OTPIPE	1
d74 1
a74 1
#define ENDARGS	0
d76 3
a78 3
#include	"mac.h"
#include	"mode.h"
#include	"name.h"
d83 30
a112 28
ADDRESS		alloc();
VOID		addblok();
STRING		make();
STRING		movstr();
TREPTR		cmd();
TREPTR		makefork();
NAMPTR		lookup();
VOID		setname();
VOID		setargs();
DOLPTR		useargs();
REAL		expr();
STRING		catpath();
STRING		getpath();
STRING		*scan();
STRING		mactrim();
STRING		macro();
STRING		execs();
VOID		await();
VOID		post();
STRING		copyto();
VOID		exname();
STRING		staknam();
VOID		printnam();
VOID		printflg();
VOID		prs();
VOID		prc();
VOID		getenv();
STRING		*setenv();
d114 6
a119 6
#define attrib(n,f)	(n->namflg |= f)
#define round(a,b)	(((int)((ADR(a)+b)-1))&~((b)-1))
#define closepipe(x)	(close(x[INPIPE]), close(x[OTPIPE]))
#define eq(a,b)		(cf(a,b)==0)
#define max(a,b)	((a)>(b)?(a):(b))
#define assert(x)	;
d122 4
a125 4
UFD		output;
INT		ioset;
IOPTR		iotemp;		/* files to be deleted sometime */
IOPTR		iopend;		/* documents waiting to be read at NL */
d128 4
a131 4
INT		dolc;
STRING		*dolv;
DOLPTR		argfor;
ARGPTR		gchain;
d134 4
a137 4
#define		BLK(x)	((BLKPTR)(x))
#define		BYT(x)	((BYTPTR)(x))
#define		STK(x)	((STKPTR)(x))
#define		ADR(x)	((char*)(x))
d140 1
a140 1
#include	"stak.h"
d143 9
a151 9
MSG		atline;
MSG		readmsg;
MSG		colon;
MSG		minus;
MSG		nullstr;
MSG		sptbnl;
MSG		unexpected;
MSG		endoffile;
MSG		synmsg;
d154 6
a159 6
SYSTAB		reserved;
INT		wdval;
INT		wdnum;
ARGPTR		wdarg;
INT		wdset;
BOOL		reserv;
d162 3
a164 3
MSG		stdprompt;
MSG		supprompt;
MSG		profile;
d167 7
a173 7
NAMNOD		fngnod;
NAMNOD		ifsnod;
NAMNOD		homenod;
NAMNOD		mailnod;
NAMNOD		pathnod;
NAMNOD		ps1nod;
NAMNOD		ps2nod;
d176 6
a181 6
MSG		flagadr;
STRING		cmdadr;
STRING		exitadr;
STRING		dolladr;
STRING		pcsadr;
STRING		pidadr;
d183 1
a183 1
MSG		defpath;
d186 8
a193 7
MSG		mailname;
MSG		homename;
MSG		pathname;
MSG		fngname;
MSG		ifsname;
MSG		ps1name;
MSG		ps2name;
d196 10
a205 10
CHAR		tmpout[];
STRING		tmpnam;
INT		serial;
#define		TMPNAM 7
FILE		standin;
#define input	(standin->fdes)
#define eof	(standin->feof)
INT		peekc;
STRING		comdiv;
MSG		devnull;
d208 15
a222 15
#define		noexec	01
#define		intflg	02
#define		prompt	04
#define		setflg	010
#define		errflg	020
#define		ttyflg	040
#define		forked	0100
#define		oneflg	0200
#define		rshflg	0400
#define		waiting	01000
#define		stdflg	02000
#define		execpr	04000
#define		readpr	010000
#define		keyflg	020000
INT		flags;
d225 3
a227 3
#include	<setjmp.h>
jmp_buf		subshell;
jmp_buf		errshell;
d230 2
a231 2
#include	"brkincr.h"
POS		brkincr;
d233 2
a234 2
#define MINTRAP	0
#define MAXTRAP	17
d236 8
a243 8
#define INTR	2
#define QUIT	3
#define MEMF	11
#define ALARM	14
#define KILL	15
#define TRAPSET	2
#define SIGSET	4
#define SIGMOD	8
d245 4
a248 4
VOID		fault();
BOOL		trapnote;
STRING		trapcom[];
BOOL		trapflg[];
d251 4
a254 4
STRING		*environ;
CHAR		numbuf[];
MSG		export;
MSG		readonly;
d257 4
a260 4
INT		exitval;
BOOL		execbrk;
INT		loopcnt;
INT		breakcnt;
d263 31
a293 25
MSG		mailmsg;
MSG		coredump;
MSG		badopt;
MSG		badparam;
MSG		badsub;
MSG		nospace;
MSG		notfound;
MSG		badtrap;
MSG		baddir;
MSG		badshift;
MSG		illegal;
MSG		restricted;
MSG		execpmsg;
MSG		notid;
MSG		wtfailed;
MSG		badcreate;
MSG		piperr;
MSG		badopen;
MSG		badnum;
MSG		arglist;
MSG		txtbsy;
MSG		toobig;
MSG		badexec;
MSG		notfound;
MSG		badfile;
d295 2
a296 4
address	end[];

#include	"ctype.h"

@


0.1
log
@
@
text
@d3 1
a3 1
 *      KIAE  shell
d7 2
a8 2
#define ERROR   1
#define SYNBAD  2
d10 1
a10 1
#define SIGFLG  0200
d13 8
a20 8
#define FPRS    020
#define FINT    040
#define FAMP    0100
#define FPIN    0400
#define FPOU    01000
#define FPCL    02000
#define FCMD    04000
#define COMMSK  017
d22 12
a33 12
#define TCOM    0
#define TPAR    1
#define TFIL    2
#define TLST    3
#define TIF     4
#define TWH     5
#define TUN     6
#define TSW     7
#define TAND    8
#define TORF    9
#define TFORK   10
#define TFOR    11
d36 3
a38 3
#define SYSSET  1
#define SYSCD   2
#define SYSEXEC 3
d40 2
a41 2
#define SYSTRAP 5
#define SYSEXIT 6
d43 1
a43 1
#define SYSWAIT 8
d47 1
a47 1
#define SYSDOT  12
d53 2
a54 2
#define SYSTST  18
#define SYSUMASK        19
d61 9
a69 9
#define USERIO  10
#define IOUFD   15
#define IODOC   16
#define IOPUT   32
#define IOAPP   64
#define IOMOV   128
#define IORDW   256
#define INPIPE  0
#define OTPIPE  1
d72 1
a72 1
#define ENDARGS 0
d74 3
a76 3
#include        "mac.h"
#include        "mode.h"
#include        "name.h"
d81 28
a108 28
ADDRESS         alloc();
VOID            addblok();
STRING          make();
STRING          movstr();
TREPTR          cmd();
TREPTR          makefork();
NAMPTR          lookup();
VOID            setname();
VOID            setargs();
DOLPTR          useargs();
REAL            expr();
STRING          catpath();
STRING          getpath();
STRING          *scan();
STRING          mactrim();
STRING          macro();
STRING          execs();
VOID            await();
VOID            post();
STRING          copyto();
VOID            exname();
STRING          staknam();
VOID            printnam();
VOID            printflg();
VOID            prs();
VOID            prc();
VOID            getenv();
STRING          *setenv();
d110 6
a115 6
#define attrib(n,f)     (n->namflg |= f)
#define round(a,b)      (((int)((ADR(a)+b)-1))&~((b)-1))
#define closepipe(x)    (close(x[INPIPE]), close(x[OTPIPE]))
#define eq(a,b)         (cf(a,b)==0)
#define max(a,b)        ((a)>(b)?(a):(b))
#define assert(x)       ;
d118 4
a121 4
UFD             output;
INT             ioset;
IOPTR           iotemp;         /* files to be deleted sometime */
IOPTR           iopend;         /* documents waiting to be read at NL */
d124 4
a127 4
INT             dolc;
STRING          *dolv;
DOLPTR          argfor;
ARGPTR          gchain;
d130 4
a133 4
#define         BLK(x)  ((BLKPTR)(x))
#define         BYT(x)  ((BYTPTR)(x))
#define         STK(x)  ((STKPTR)(x))
#define         ADR(x)  ((char*)(x))
d136 1
a136 1
#include        "stak.h"
d139 9
a147 9
MSG             atline;
MSG             readmsg;
MSG             colon;
MSG             minus;
MSG             nullstr;
MSG             sptbnl;
MSG             unexpected;
MSG             endoffile;
MSG             synmsg;
d150 6
a155 6
SYSTAB          reserved;
INT             wdval;
INT             wdnum;
ARGPTR          wdarg;
INT             wdset;
BOOL            reserv;
d158 3
a160 3
MSG             stdprompt;
MSG             supprompt;
MSG             profile;
d163 7
a169 7
NAMNOD          fngnod;
NAMNOD          ifsnod;
NAMNOD          homenod;
NAMNOD          mailnod;
NAMNOD          pathnod;
NAMNOD          ps1nod;
NAMNOD          ps2nod;
d172 6
a177 6
MSG             flagadr;
STRING          cmdadr;
STRING          exitadr;
STRING          dolladr;
STRING          pcsadr;
STRING          pidadr;
d179 1
a179 1
MSG             defpath;
d182 7
a188 7
MSG             mailname;
MSG             homename;
MSG             pathname;
MSG             fngname;
MSG             ifsname;
MSG             ps1name;
MSG             ps2name;
d191 10
a200 10
CHAR            tmpout[];
STRING          tmpnam;
INT             serial;
#define         TMPNAM 7
FILE            standin;
#define input   (standin->fdes)
#define eof     (standin->feof)
INT             peekc;
STRING          comdiv;
MSG             devnull;
d203 15
a217 15
#define         noexec  01
#define         intflg  02
#define         prompt  04
#define         setflg  010
#define         errflg  020
#define         ttyflg  040
#define         forked  0100
#define         oneflg  0200
#define         rshflg  0400
#define         waiting 01000
#define         stdflg  02000
#define         execpr  04000
#define         readpr  010000
#define         keyflg  020000
INT             flags;
d220 3
a222 3
#include        <setjmp.h>
jmp_buf         subshell;
jmp_buf         errshell;
d225 2
a226 2
#include        "brkincr.h"
POS             brkincr;
d228 2
a229 2
#define MINTRAP 0
#define MAXTRAP 17
d231 8
a238 8
#define INTR    2
#define QUIT    3
#define MEMF    11
#define ALARM   14
#define KILL    15
#define TRAPSET 2
#define SIGSET  4
#define SIGMOD  8
d240 4
a243 4
VOID            fault();
BOOL            trapnote;
STRING          trapcom[];
BOOL            trapflg[];
d246 4
a249 4
STRING          *environ;
CHAR            numbuf[];
MSG             export;
MSG             readonly;
d252 4
a255 4
INT             exitval;
BOOL            execbrk;
INT             loopcnt;
INT             breakcnt;
d258 25
a282 29
MSG             mailmsg;
MSG             coredump;
MSG             badopt;
MSG             badparam;
MSG             badsub;
MSG             nospace;
MSG             notfound;
MSG             badtrap;
MSG             baddir;
MSG             badshift;
MSG             illegal;
MSG             restricted;
MSG             execpmsg;
MSG             notid;
MSG             wtfailed;
MSG             badcreate;
MSG             piperr;
MSG             badopen;
MSG             badnum;
MSG             arglist;
MSG             txtbsy;
MSG             toobig;
MSG             badexec;
MSG             notfound;
MSG             badfile;
/*
MSG             version;
 */
address end[];
d284 3
a286 2
#include        "ctype.h"
#include        "Rsort.h"
@
