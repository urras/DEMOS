head     1.3;
access   ;
symbols  ;
locks    ;
comment  @ * @;


1.3
date     89.04.27.12.03.12;  author ache;  state Exp;
branches ;
next     1.2;

1.2
date     89.04.12.23.30.54;  author ache;  state Exp;
branches ;
next     1.1;

1.1
date     89.04.08.22.38.41;  author ache;  state Exp;
branches ;
next     ;


desc
@@


1.3
log
@Правлен вид диагностики.
@
text
@/*
 * $Header: misc.c,v 1.2 89/04/12 23:30:54 ache Exp $
 * $Log:	misc.c,v $
 * Revision 1.2  89/04/12  23:30:54  ache
 * Проверка стека
 * 
 * Revision 1.1  89/04/08  22:38:41  ache
 * Initial revision
 * 
 */
#include "defs"
#include <ctype.h>
#include <signal.h>

CHARSTAR do_colon();
CHARSTAR do_df();
extern CHARSTAR Shell, Path, Get;

FSTATIC CHARSTAR nextchar=0;
FSTATIC CHARSTAR lastchar=0;

FSTATIC int *nextint=0;
FSTATIC int *lastint=0;
#ifndef SMALL
FSTATIC NAMEBLOCK hashtab[HASHSIZE];
#else
extern  NAMEBLOCK *hashtab;
#endif
FSTATIC int nhashed=0;


/* simple linear hash.  hash function is sum of
   characters mod hash table size.
*/
static
hashloc(s)
CHARSTAR s;
{
	register int i;
	register int hashval;
	register CHARSTAR t;

	hashval = 0;

	for(t=s; *t!=CNULL ; ++t)
		if ((hashval += toascii(*t)) >= HASHSIZE)
			hashval = (hashval % HASHSIZE) + (hashval / HASHSIZE);

	hashval %= HASHSIZE;

	for(i=hashval;
		hashtab[i]!=0 && !equal(s,hashtab[i]->namep);
		i = (i+1)%HASHSIZE ) ;

	return(i);
}


NAMEBLOCK
srchname(s)
register CHARSTAR s;
{
	return( hashtab[hashloc(s)] );
}




NAMEBLOCK
makename(s)
register CHARSTAR s;
{
/* make a name entry; `s' is presumed to already to have been saved */

	register NAMEBLOCK p;

	if(nhashed++ > HASHSIZE-3)
		fatal(ediag("Hash table overflow","Переполнение таблицы имен"));

	p = ALLOC(nameblock);
	p->nextname = firstname;
	p->backname = NULL;

	p->namep = s;
	p->linep = NULL;
	p->done = 0;
	p->septype = 0;
	p->rundep  = 0;
	p->modtime = 0;

	firstname = p;

	hashtab[hashloc(s)] = p;

	return(p);
}







#define TABLESIZE 100

CHARSTAR
copys(s)
register CHARSTAR s;
{
 CHARSTAR t;
 static struct entry                     /* structure will form linked      */
	{                                /* list of strings in alpha-order. */
	 CHARSTAR name;                  /* table is hash-table of 100 els. */
	 struct entry *next;             /* used to make searching faster.  */
	} *table[TABLESIZE],*laste,*newe,*e;

 int found;
 int i;
 int hashval = 0;

 for(t=s; *t != CNULL; ++t)               /* Hash the string - sum of chars */
	if ((hashval += toascii(*t)) >= TABLESIZE)
		hashval = (hashval % TABLESIZE) + (hashval / TABLESIZE);

 hashval %= TABLESIZE;                    /* Mod tablesize */

 e = table[hashval];                      /* initial element */
 laste = table[hashval];
 while(1)
	 if(e == NULL)                    /* No - table[hashval] == NULL */
		{                         /*    or end of linked list    */
		 e = ALLOC(entry);
		 e->name=Myalloc(strlen(s)+1);

		 strcpy(e->name,s);
		 e->next = NULL;

		 if(table[hashval] == NULL)
			table[hashval] = e;
		 else
			laste->next = e;
		 break;
		}
	 else if((i=strcmp(e->name,s)) == 0)
			break;             /* e points to entry */
	 else if(i>0)
		{                          /* create entry  and link */
		 newe = ALLOC(entry);
		 newe->name=Myalloc(strlen(s)+1);

		 strcpy(newe->name,s);

		 newe->next = e;
		 if(laste == table[hashval])
			table[hashval] = newe;
		 else
			laste->next = newe;

		 e = newe;                 /* set up e for return value */
		 break;
		}
	 else 
		{
		 laste = e;
		 e = e->next;
		}

 return(e->name);
}


CHARSTAR
concat(a,b,c)   /* c = concatenation of a and b */
register CHARSTAR a, b;
register CHARSTAR c;
{
	register CHARSTAR t;
	t = c;

	while(*t = *a++) t++;
	while(*t++ = *b++);
	return(c);
}

suffix(a,b,p)  /* is b the suffix of a?  if so, set p = prefix */
register CHARSTAR a, b, p;
{
	CHARSTAR a0, b0;
	a0 = a;
	b0 = b;

	if(!a || !b)
		return(0);

	while(*a++);
	while(*b++);

	if( (a-a0) < (b-b0) )
		return(0);

	while(b>b0)
		if(*--a != *--b)
			return(0);

	while(a0<a)
		*p++ = *a0++;
	*p = CNULL;

	return(1);
}


CHARSTAR
Myalloc(n)
register int n;
{
	register CHARSTAR p;
	extern CHARSTAR malloc();
	PATTERN patp,nextp;
	OPENDIR od;

TryAgain:
	if ((p = malloc(n))!=NULL)
		return(p);
	for(od=firstod;od!=NULL;od=od->nextopendir) {
		for(patp=od->firstpat; patp!=NULL; patp = nextp) {
			nextp = patp->nextpattern;
			free(patp->patval);
			free(patp);
		}
		if (patp!=od->firstpat) {
			od->firstpat = NULL;
			if (IS_ON(DBUG))
				printf("NO MEMORY(%d), %s patterns lost!\n",
					n, od->dirn);
			goto TryAgain;
		}
	}
	fatal(ediag("out of memory","мало памяти"));
	/*NOTREACHED*/
}

/* copy string a into b, substituting for arguments */
extern NAMEBLOCK cur_name;

CHARSTAR
subst(a,b,c)
register CHARSTAR a, b;
int c;
{
	register CHARSTAR s;
	static depth=0;
	char vname[MAXVNAME];
	char closer;
	register char *minb = b;

	if(++depth > 100)
		yyerror (ediag("infinitely recursive macro?",
			    "рекурсивное макро?"));
	if(a!=0)
	{
		while(*a)
		{
			if(b-minb >= c)
				yyerror (ediag("Macro too long",
					"Слишком длинное макро"));
			if(*a != DOLLAR)
				*b++ = *a++;
			else if(*++a==CNULL || *a==DOLLAR)
				*b++ = *a++;
			else
			{
				s = vname;
				if( *a==LPAREN || *a==LCURLY )
				{
					closer=(*a==LPAREN ? RPAREN : RCURLY);
					++a;
					while(*a == BLANK)
						++a;
					while(	*a!=BLANK  &&
						*a!=closer &&
						*a!=CNULL)
						*s++ = *a++;
					while(*a!=closer && *a!=CNULL)
						++a;
					if(*a == closer)
						++a;
				}
				else
					*s++ = *a++;

				*s = CNULL;
				if(amatch(&vname[0], "*:*=*"))
					b = colontrans(b, vname);
				else if(any("@@*<%?", vname[0]) && vname[1])
					b = dftrans(b, vname);
				else
					b = straightrans(b, vname, c-(b-minb));
				s++;
			}
		}
	}

	*b = CNULL;
	--depth;
	return(b);
}


/*
 *	Translate the $(name:*=*) type things.
 */

static
CHARSTAR
colontrans(b, vname)
register CHARSTAR b;
char vname[];
{
	register CHARSTAR p;
	register CHARSTAR q = NULL;
	char dftype = 0;
	CHARSTAR pcolon;
	VARBLOCK vbp;

	for(p = &vname[0]; *p && *p != KOLON; p++);
	pcolon = p;
	*pcolon = CNULL;

	if(any("@@*<%?", vname[0]))
	{
		dftype = vname[1];
		vname[1] = CNULL;
	}
	if((vbp = srchvar(vname)) == NULL)
		return(b);
	p = vbp->varval;
	if(dftype)
	{
		q = Myalloc (strlen(p)+2);
		do_df(q, p, vname[1]);		/* D/F trans gets smaller */
		p = q;
	}
	if(p && *p)
		b = do_colon(b, p, pcolon+1);
	*pcolon = KOLON;
	if(dftype)
		vname[1] = dftype;
	if(q)
		free(q);
	return(b);
}
/*
 *	Translate the $(name:*=*) type things.
 */
static
CHARSTAR
do_colon(to, from, trans)
register CHARSTAR to, from;
CHARSTAR trans;
{
	register int i;
	register CHARSTAR  p;
	register int leftlen;
	int len;
	char left[30], right[70];
	char buf[128];
	CHARSTAR pbuf;
	int lwig = 0;
	int rwig = 0;

/*
 *	Mark off the name (up to colon), the from expression (up to '='),
 *	and the to expresion (up to CNULL).
 */
	i = 0;
	while(*trans != EQUALS)
		left[i++] = *trans++;
	if(left[i-1] == WIGGLE)
	{
		lwig++;
		--i;
	}
	left[i] = CNULL;
	leftlen = i;
	i = 0;
	while(*++trans)
		right[i++] = *trans;
	if(right[i-1] == WIGGLE)
	{
		rwig++;
		--i;
	}
	right[i] = CNULL;

/*
 *	Now, tanslate.
 */

	for(; len=getword(from,buf); from += len)
	{
		pbuf = buf;
		if((i = sindex(pbuf, left)) >= 0 && pbuf[i+leftlen] == CNULL &&
			(lwig?((p=sdot(pbuf))!=NULL):1) )
		{
			pbuf[i] = CNULL;
			if(!lwig && rwig)
				trysccs(pbuf);
			else if(lwig && !rwig) {
				if (IS_ON(RCS))
					p[strlen(p) -2]=CNULL;
				else
					strshift(p, -2);
			}
			to = copstr(to, pbuf);
			to = copstr(to, right);
		}
		else
		{
			to = copstr(to, pbuf);
		}
	}
	return(to);
}

getword(from, buf)
register CHARSTAR from;
register CHARSTAR buf;
{
	register int i = 0;

	if(*from == TAB || *from == BLANK)
	{
		while(*from == TAB || *from == BLANK)
		{
			*buf++ = *from++;
			++i;
		}
		goto out;
	}
	while(*from && *from != TAB && *from != BLANK)
	{
		*buf++ = *from++;
		++i;
	}
out:
	*buf = CNULL;
	return(i);
}

/*
 *	Do the $(@@D) type translations.
 */
static
CHARSTAR
dftrans(b, vname)
register CHARSTAR b;
CHARSTAR vname;
{
	register char c1;
	VARBLOCK vbp;

	c1 = vname[1];
	vname[1] = CNULL;
	vbp = srchvar(vname);
	vname[1] = c1;
	if(vbp != 0 && *vbp->varval != 0)
		b = do_df(b, vbp->varval, c1);
	return(b);
}

#define lastslash(a)		strrchr( (a) , SLASH )
static
CHARSTAR
do_df(b, str, type)
register CHARSTAR b;
CHARSTAR str;
char type;
{
	register CHARSTAR p;
	register int i;
	char buf[128];

	*b = CNULL;
	for(; (i=getword(str, buf)); str += i)
	{
		if(buf[0] == BLANK || buf[0] == TAB)
		{
			b = copstr(b, buf);
			continue;
		}
		p = lastslash(buf);
		if(p)
		{
			*p = CNULL;
			b = copstr(b, type=='D'?(buf[0]==CNULL?"/":buf):p+1);
			*p = SLASH;
		}
		else
			b = copstr(b, type=='D'?".":buf);
	}
	return(b);
}

/*
 *	Standard trnaslation, nothing fancy.
 */

static
CHARSTAR
straightrans(b, vname, c)
register CHARSTAR b;
char vname[];
int c;
{
	register VARBLOCK vbp;
	register CHAIN pchain;
	register NAMEBLOCK pn;

	vbp = srchvar(vname);
	if( vbp != 0)
	{
		if(vbp->v_aflg == YES && vbp->varval)
		{
			pchain = (CHAIN)vbp->varval;
			for(; pchain; pchain = pchain->nextchain)
			{
				pn = (NAMEBLOCK)pchain->datap;
				if(pn->alias)
					b=copstr(b, pn->alias);
				else
					b=copstr(b,pn->namep);
				*b++ = BLANK;
			}
			vbp->used = YES;
		}
		else if(*vbp->varval)
		{
			b = subst(vbp->varval, b, c);
			vbp->used = YES;
		}
	}
	return(b);
}



/* copy s into t, return the location of the next free character in s */
CHARSTAR
copstr(s, t)
register CHARSTAR s, t;
{
	if(t == 0)
		return(s);
	while (*t)
		*s++ = *t++;
	*s = CNULL;
	return(s);
}

setvar(v,s)
register CHARSTAR v, s;
{
	register VARBLOCK p;

	if ((p = srchvar(v))==NULL)
		p = varptr(v);
	s = s?s:Nullstr;
	if (p->noreset == NO)
	{
		if(IS_ON(EXPORT))
			p->envflg = YES;
		p->varval = s;
		if(IS_ON(INARGS) || IS_ON(ENVOVER))
			p->noreset = YES;
		else
			p->noreset = NO;
if(IS_ON(DBUG))printf("set: %s = %s noreset = %d envflg = %d Mflags = 0%o\n",
	v, p->varval, p->noreset, p->envflg, Mflags);

		if(p->used && !amatch(v, "[@@*<?!%]") )
			if(IS_ON(DBUG)) {
				fflush (stdout);
				fprintf(stderr, "Warning: %s changed after being used\n",v);
			}
	}
}


eqsign(a)
register CHARSTAR a;
{
	register CHARSTAR p;

	for(p = ":;=$\n\t"; *p; p++)
		if(any(a, *p))
		{
			callyacc(a);
			return(YES);
		}
	return(NO);
}


VARBLOCK
varptr(v)
register CHARSTAR v;
{
	register VARBLOCK vp;

	if((vp = srchvar(v)) != NULL)
		return(vp);

	vp = ALLOC(varblock);
	vp->nextvar = firstvar;
	vp->varname = copys(v);
	vp->varval = Nullstr;
	vp->noreset = vp->used = vp->envflg = vp->v_aflg = 0;
	firstvar = vp;
	return(vp);
}

VARBLOCK
srchvar(vname)
register CHARSTAR vname;
{
	register VARBLOCK vp;

	for(vp=firstvar; vp != 0 ; vp = vp->nextvar)
		if(equal(vname, vp->varname))
			return(vp);
	return NULL;
}

/*VARARGS*/
fatal1(s,t1,t2,t3)
CHARSTAR s;
{
	char buf[100];

	sprintf(buf, s, t1,t2,t3);
	fatal(buf);
}



fatal(s)
CHARSTAR s;
{
	fflush (stdout);
	if(s && *s)
		fprintf(stderr, ediag(
"Make: %s.  Stop.\n",
"Make: %s.  Конец.\n"), s);
	else
		fprintf(stderr, ediag("\nStop.\n","\nКонец.\n"));
#ifdef unix
	exit(1);
#endif
#ifdef gcos
	exit(0);
#endif
}



yyerror(s)
CHARSTAR s;
{
	char buf[100];
	extern int yylineno;

	sprintf(buf, ediag("line %d: %s","строка %d: %s"), yylineno, s);
	fatal(buf);
}



CHAIN
appendq(head,tail)
register CHAIN head;
register CHARSTAR tail;
{
	register CHAIN p;

	p = ALLOC(chain);
	p->nextchain = NULL;
	p->datap = tail;
	while(head->nextchain)
		head = head->nextchain;
	head->nextchain = p;
}





CHARSTAR
mkqlist(p)
register CHAIN p;
{
	register CHARSTAR qbufp, s;
#ifndef SMALL
	static char qbuf[QBUFMAX];
#else
	extern CHARSTAR qbuf;
#endif
	register CHAIN sp = p;

	qbufp = qbuf;

	for( ; p ; p = p->nextchain)
	{
		s = p->datap;
		if(qbufp != qbuf)
			*qbufp++ = BLANK;
		if(qbufp+strlen(s) > &qbuf[QBUFMAX-3])
		{
			fflush (stdout);
			fprintf(stderr, ediag("$? list too long\n",
				"слишком длинный список $?\n"));
			break;
		}
		while (*s)
			*qbufp++ = *s++;
	}
	*qbufp = CNULL;
	for (p = sp; p; p = sp) {
		sp = p->nextchain;
		free ((CHARSTAR) p);
	}
	return qbuf;
}

sindex(s1,s2)
CHARSTAR s1;
CHARSTAR s2;
{
	register CHARSTAR p1;
	register CHARSTAR p2;
	register int flag;
	int ii;

	p1 = &s1[0];
	p2 = &s2[0];
	flag = -1;
	for(ii = 0; ; ii++)
	{
		while(*p1 == *p2)
		{
			if(flag < 0)
				flag = ii;
			if(*p1++ == CNULL)
				return(flag);
			p2++;
		}
		if(*p2 == CNULL)
			return(flag);
		if(flag >= 0)
		{
			flag = -1;
			p2 = &s2[0];
		}
		if(*s1++ == CNULL)
			return(flag);
		p1 = s1;
	}
}


#include <sys/types.h>
#include <sys/stat.h>

/*
 *	findfl(name)	(like execvp, but does path search and finds files)
 */
CHARSTAR execat();

CHARSTAR
findfl(name)
register CHARSTAR name;
{
	register CHARSTAR p;
	register VARBLOCK cp;
	char fname[128];

	if(name[0] == SLASH)
		return copys(name);
	cp = varptr("VPATH");
	if(*cp->varval == CNULL)
		p = ":";
	else
		p = cp->varval;

	do
	{
		p = execat(p, name, fname);
		if(access(fname, 4) == 0)
			return copys(fname);
	} while (p);
	return NULL;
}

static
CHARSTAR
execat(s1, s2, si)
register CHARSTAR s1, s2;
CHARSTAR si;
{
	register CHARSTAR s;

	s = si;
	while (*s1 && *s1 != KOLON && *s1 != MINUS)
		*s++ = *s1++;
	if (si != s)
		*s++ = SLASH;
	while (*s2)
		*s++ = *s2++;
	*s = CNULL;
	return(*s1? ++s1: 0);
}


/*
 *	change xx to s.xx or /x/y/z to /x/y/s.z
 */
CHARSTAR
trysccs(str)
register CHARSTAR str;
{
	register CHARSTAR sstr;
	register int i = 2;

	if (IS_ON(RCS)) {
		strcat (str, ",v");
		return str;
	}
	sstr = str;
	for(; *str; str++);
	str[2] = CNULL;
	str--;
	for(;str >= sstr; str--)
	{
		if(*str == SLASH)
			if(i == 2)
			{
				i = 0;
				*(str+2) = DOT;
				*(str+1) = 's';
			}
		*(str+i) = *str;
	}
	if(i == 2)
	{
		*(str+2) = DOT;
		*(str+1) = 's';
	}
	return(sstr);
}


is_sccs(filename)
register CHARSTAR filename;
{
	register CHARSTAR p;

	if (IS_ON(RCS)) {
		register n = strlen(filename);

		return (n > 2 && filename[n-1]=='v' && filename[n-2]==',');
	}
	for(p = filename; *p; p++)
		if(*p == 's')
			if(p == filename && p[1] == DOT)
				return(YES);
			else if(p[-1] == SLASH && p[1] == DOT)
				return(YES);
	return(NO);
}

CHARSTAR
sdot(p)
register  CHARSTAR p;
{
	register CHARSTAR ps = p;

	if (!is_sccs(p))
		return NULL;
	if (IS_ON(RCS)) {
		if ((ps=strrchr(p,SLASH))!=NULL)
			return ps+1;
		return p;
	}
	for(; *p; p++)
		if(*p == 's')
			if(p == ps && p[1] == DOT)
				return(p);
			else if(p[-1] == SLASH && p[1] == DOT)
				return(p);
	return NULL;
}
/*
 *	change pfx to /xxx/yy/*zz.* or *zz.*
 */
CHARSTAR
addstars(pfx)
register CHARSTAR pfx;
{
	register CHARSTAR p1, p2;

	if (IS_ON(RCS)) {
		strcat(pfx,".*");
		return pfx;
	}
	for(p1 = pfx; *p1; p1++);
	p2 = p1 + 3;			/* 3 characters, '*', '.', and '*'. */
	p1--;

	*p2-- = CNULL;
	*p2-- = STAR;
	*p2-- = DOT;
	while(p1 >= pfx)
	{
		if(*p1 == SLASH)
		{
			*p2 = STAR;
			return(pfx);
		}
		*p2-- = *p1--;
	}
	*p2 = STAR;
	return(p2);
}

CHARSTAR
addRCS(p)
register CHARSTAR p;
{
	register CHARSTAR pp;

	if ((pp = sdot(p)) == NULL)
		return NULL;
	strshift(pp,4);
	strncpy(pp,"RCS/",4);
	return p;
}


extern CHARSTAR *environ;

/*
 *	This routine is called just before and exec.
 */

setenv()
{
	register CHARSTAR *ea;
	register int nenv = 0;
	register CHARSTAR p,pp;
	CHARSTAR *es,*ee;
	VARBLOCK vp;
	int length;

	varptr (Shell);       /* Alloc mem, because of vfork */
	varptr (Path);

	for(vp=firstvar; vp != NULL; vp=vp->nextvar)
		if (vp->envflg)
			nenv++;

	if(IS_ON(DBUG))
		printf("setenv: %d\n", nenv);

	if (nenv == 0)
		return;

	es=ea=Myalloc((nenv + 1) * sizeof *ea);

	for(vp=firstvar; vp != NULL; vp=vp->nextvar)
		if(vp->envflg)
		{
			for (ee=environ;*ee;ee++) {
				for(pp=vp->varname,p= *ee; *p && *p!=EQUALS; p++,pp++)
					if (*pp != *p)
						goto TryOther;
				if (*pp || *p != EQUALS)
					continue;
				p++;
				if (!equal(vp->varval,p))
					break;
				*ea++ = *ee;
				goto VarDone;
			TryOther: ;
			}
			if (IS_ON(DBUG))
				printf("Env %s changed.\n",vp->varname);
			length = strlen(vp->varname) + strlen(vp->varval) + 2;
			*ea=Myalloc(length);
			p = copstr(*ea++, vp->varname);
			p = copstr(p, "=");
			p = copstr(p, vp->varval);
		VarDone: ;
		}
	*ea = NULL;
	environ = es;
}


/*
 *	Called in main
 *	If a string like "CC=" occurs then CC is not put in environment.
 *	This is because there is no good way to remove a variable
 *	from the environment within the shell.
 */

readenv()
{
	register CHARSTAR *ea;
	register CHARSTAR p;

	ea=environ;
	for(;*ea; ea++)
	{
		for(p = *ea; *p && *p != EQUALS; p++)
			;
		if(*p == EQUALS)
			if(*(p+1))
				eqsign(*ea);
	}
}

#if 0
sccstrip(pstr)
register CHARSTAR pstr;
{
	register CHARSTAR p2;
	register CHARSTAR sstr;

	sstr = pstr;
	for(; *pstr ; pstr++)
		if(*pstr == RCURLY)
		{
			if(isdigit(pstr[1]) &&
			   pstr != sstr &&
			   pstr[-1] != DOLLAR)
			{
				for(p2 = pstr; *p2 && *p2 != LCURLY; p2++)
					;
				if(*p2 == CNULL)
					break;
				strshift(pstr, -(int)(p2-pstr+1) );
			}
		}
}
#endif
/*
 *	Shift a string `pstr' count places. negative is left, pos is right
 *	Negative shifts cause char's at front to be lost.
 *	Positive shifts assume enough space!
 */
static
CHARSTAR
strshift(pstr, count)
register CHARSTAR pstr;
register int count;
{
	register CHARSTAR sstr;

	sstr = pstr;
	if(count < 0)
	{
		for(count = -count; *pstr=pstr[count]; pstr++);
		*pstr = CNULL;
		return(sstr);
	}
	for(; *pstr; pstr++);
	do
	{
		pstr[count] = *pstr;
	} while (pstr-- > sstr);

	return(sstr);

}


/*
 *	execlp(name, arg,...,0)	(like execl, but does path search)
 *	execvp(name, argv)	(like execv, but does path search)
 */
#include <errno.h>

extern	errno;
#if 0
execlp(name, argv)
CHARSTAR name, argv;
{
	return(execvp(name, &argv));
}
#endif
execvp(name, argv)
CHARSTAR name, *argv;
{
	register etxtbsy = 1;
	register eacces = 0;
	register CHARSTAR cp;
	CHARSTAR pathstr;
	CHARSTAR shell;
	char fname[128];

	pathstr = varptr(Path)->varval;
	if(pathstr == NULL || *pathstr == CNULL)
		pathstr = ":/bin:/usr/bin";
	shell = varptr(Shell)->varval;
	if(shell == NULL || *shell == CNULL)
		shell = SHELLCOM;
	cp = any(name, SLASH)? "": pathstr;

	do
	{
		cp = execat (cp, name, fname);
	retry:
		execv (fname, argv);
		switch(errno)
		{
		case ENOEXEC:
			*argv = fname;
			*--argv = "sh";
			execv(shell, argv);
			return(-1);
		case ETXTBSY:
			if (++etxtbsy > 5)
				return(-1);
			sleep(etxtbsy);
			goto retry;
		case EACCES:
			eacces++;
			break;
		case ENOMEM:
		case E2BIG:
			return(-1);
		}
	} while (cp);
	if (eacces)
		errno = EACCES;
	return(-1);
}

/*
 *	get() does an SCCS get on the file ssfile.
 *	For the get command, get() uses the value of the variable "GET".
 *	If ssfile has a slash in it, get() does a "chdir" to the appropriate
 *	directory if the cdflag is set to CD. This assures
 *	the program finds the ssfile where it belongs when necessary.
 *	If the rlse string variable is set, get() uses it in the
 *	get command sequence.
 *	Thus a possible sequence is:
 *		set -x;
 *		cd ../sys/head;
 *		get -r2.3.4.5 s.stdio.h
 *
 */

/*
 *	The gothead and gotf structures are used to remember
 *	the names of the files `make' automatically gets so
 *	`make' can remove them upon exit.
 */
GOTHEAD gotfiles;

get(ssfile, cdflag, rlse)
register CHARSTAR ssfile;
int cdflag;
CHARSTAR rlse;
{
	register CHARSTAR pr;
	register CHARSTAR pr1;
	register CHARSTAR gfile;
	char gbuf[100];
	char sfile[100];
	char tmp[100];
	int retval;
	GOTF gf;

	strcpy(sfile, ssfile);

	if(!is_sccs(sfile))
		trysccs(sfile);

	strcpy (tmp, sfile);
	gfile = (cdflag == CD) ? sdot(tmp) : tmp;
	if(access(tmp, 4) != 0) {
		if (IS_OFF(GET) && (IS_OFF(RCS) ||
				    access(addRCS(tmp), 4) != 0))
			return(NO);
	}

	pr = gbuf;

	if(IS_OFF(SIL))
		pr = copstr(pr, "set -x;\n");

	if(cdflag == CD && (pr1 = strrchr(sfile, SLASH)) != NULL)
	{
		*pr1 = CNULL;
		pr = copstr(pr, "cd ");
		pr = copstr(pr, sfile);
		pr = copstr(pr, ";\n");
		*pr1 = SLASH;
	}

	pr = copstr(pr, varptr(Get)->varval);
	pr = copstr(pr, " ");
	pr = copstr(pr, varptr("GFLAGS")->varval);
	pr = copstr(pr, " ");

	pr1 = rlse;
	if(pr1 != NULL && pr1[0] != CNULL)
	{
		if(pr1[0] != MINUS)	/* RELEASE doesn't have '-r' */
			pr = copstr(pr, "-r");
		pr = copstr(pr, pr1);
		pr = copstr(pr, " ");
	}

	pr = copstr(pr, gfile);
/*
 *	exit codes are opposite of error codes so do the following:
 */
	retval = (system(gbuf) == 0) ? YES : NO ;
	if(retval == YES)
	{
		if(gotfiles == NULL)
		{
			gotfiles = ALLOC(gothead);
			gf = (GOTF)gotfiles;
			gotfiles->gnamep = gotfiles->gnextp = NULL;
			gotfiles->endp = (GOTF)gotfiles;
		}
		else
		{
			gf = gotfiles->endp;
			gf->gnextp = ALLOC(gotf);
			gf = gf->gnextp;
			gf->gnamep = gf->gnextp = NULL;
		}
		gfile = (cdflag == CD) ? sfile : sdot(sfile);
		if (IS_ON(RCS))
			gfile[strlen(gfile)-2] = CNULL;
		else
			strshift(sdot(gfile), -2);
		gf->gnamep = copys (gfile);    /* `+2' skips `s.' */
		gotfiles->endp = gf;
	}
	return(retval);
}

/*
 *	subroutine to actually remove to gotten files.
 */
static
rm_gots()
{
	register GOTF gf;

	if(IS_ON(GF_KEEP))
		return;
	for(gf = (GOTF)gotfiles; gf ; gf=gf->gnextp)
		if(gf->gnamep)
		{
			if(IS_ON(DBUG))printf("rm_got: %s\n", gf->gnamep);
			unlink(gf->gnamep);
		}
}

static
callyacc(str)
register CHARSTAR str;
{
	CHARSTAR lines[2];
	FILE *finsave;
	CHARSTAR *lpsave;

	finsave = fin;
	lpsave = linesptr;
	fin = 0;
	lines[0] = str;
	lines[1] = 0;
	linesptr = lines;
	yyparse();
	fin = finsave;
	linesptr = lpsave;
}

/*
 *	exit routine for removing the files `make' automatically
 *	got.
 */
exit(arg)
{
	if (arg != 2)           /* Not yet ignored. */
		enbint(SIG_IGN);
	rm_gots();
	_cleanup();
	_exit(arg);
}

#ifdef  CHKSTK
checkstack () {
	int topstack;

	if ((unsigned) (&topstack) <= (unsigned) sbrk (0) + 128)
		fatal (ediag ("Stack overflow", "Переполнение стека"));
}
#endif  CHKSTK
@


1.2
log
@Проверка стека
@
text
@d2 1
a2 1
 * $Header: misc.c,v 1.1 89/04/08 22:38:41 ache Exp $
d4 3
d258 2
a259 2
		fatal(ediag("infinitely recursive macro?",
			    "слишком большая вложенность макро"));
d265 1
a265 1
				fatal(ediag("Macro too long",
@


1.1
log
@Initial revision
@
text
@d2 1
a2 1
 * $Header: misc.c,v 1.1 89/04/07 20:29:03 ache Exp $
d4 3
d1304 9
@
