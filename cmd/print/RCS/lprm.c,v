head     1.5;
access   ;
symbols  ;
locks    ;
comment  @ * @;


1.5
date     87.04.11.19.15.51;  author avg;  state Exp;
branches ;
next     1.4;

1.4
date     87.03.19.22.47.32;  author avg;  state Exp;
branches ;
next     1.3;

1.3
date     87.01.06.10.44.31;  author avg;  state Exp;
branches ;
next     1.2;

1.2
date     86.10.17.22.39.08;  author avg;  state Exp;
branches ;
next     1.1;

1.1
date     86.09.09.21.13.33;  author avg;  state Exp;
branches ;
next     ;


desc
@
Спулинг печати.
Удаление файлов спулинга.
@


1.5
log
@Правлена ошибка: имя ф-ла 205 изображалось как 25.
>
@
text
@/*
 * Стирание файлов/перезапуск печати для указанных файлов
 *
 * Автор: Антонов В.Г.
 *
 * lprm [ключи] [файлы]
 *
 * Ключи:
 *        -r            - перезапустить печать файлов
 *        -uпольз       - все файлы пользователя
 *        -a            - все файлы
 *        -Llp          - все файлы для этого АЦПУ
 *
 * Комбинация -a -u и -L производится как пересечение определенных
 * ими множеств файлов спулинга.
 *
 * $Log:        lprm.c,v $
 * Revision 1.4  87/03/19  22:47:32  avg
 * kill заменен на killpg -- чтобы убивался и фильтр.
 *
 * Revision 1.3  87/01/06  10:44:31  avg
 * Разделено имя физического устройсва печати и логического
 * устройства спулинга.
 *
 * Revision 1.2  86/10/17  22:39:08  avg
 * Теперь если у -u нет аргумента, то сканируются все файлы
 * пользователя по getlogin.
 *
 * Revision 1.1  86/09/09  21:13:33  avg
 * Initial revision
 *
 */

#ifndef lint
static char rcsid[] = "$Header: lprm.c,v 1.4 87/03/19 22:47:32 avg Exp $";
#endif

#include <stdio.h>
#include <ediag.h>
#include <dir.h>
#include <signal.h>
#include "lpspool.h"

char *nconv(), *v0, *cvn(), *getenv();

int   aflg,  rflg;
char *user, *lp, *ruser;
int  lockf;

main( c, v )
char **v;
{
	int     fcnt = 0;
	register i;
	register char *p;

	v0 = v[0];
	if( c == 1 ) {
		fprintf(stderr, ediag(
			"Usage: %s [-r] [-Llpn] [-u[user]] [-a] [fileno...]\n",
			"Вызов: %s [-r] [-Llpn] [-u[польз]] [-a] [Nфайла...]\n" ), v0 );
		exit(0);
	}
	if( chdir( LP_DIR ) == -1 ) {
		error( "can't cd to %s", "не могу перейти в каталог %s", LP_DIR );
		exit(1);
	}

	if( getuid() == 0 )
		ruser = "root";
	else
		if( (ruser = getlogin()) == NULL &&
		    (ruser = getenv( "USER" )) == NULL )
			ruser = "INCOGNITO";
	lockf = open( LP_LOCK, 0 );
	for( i = 1; i < c; i++ ) {
		if( *v[i] == '-' ) {
			p = &v[i][1];
		    Nkey:
			switch( *p ) {
			    case '\0':
				break;

			    case 'a':
			    case 'A':
				aflg++;
				p++;
				goto Nkey;

			    case 'u':
			    case 'U':
				user = ++p;
				break;

			    case 'l':
			    case 'L':
				lp = ++p;
				break;

			    case 'r':
			    case 'R':
				rflg++;
				p++;
				goto Nkey;

			    default:
				error( "bad key %s", "плохой ключ %s", v[i] );
				exit(1);
			}
		} else {
			if( (p = nconv( v[i] )) == NULL ) {
				error( "bad file id %s", "плохой ид. файла %s", v[i] );
				continue;
			}
			fcnt++;
			remove( p );
		}
	}
	if( rflg && (fcnt == 0 || user || lp || aflg) )
		scanlock();
	else if( aflg || user || lp )
		scandir();
	close( lockf );
	exit(0);
}

/*
 * Преобразование номера файла из формы
 *              123bc
 * в форму
 *              H000123BC
 */
char *nconv( s )
char *s;
{
	register char *p, *q;
	static char cva[10];
	register c;

	cva[0] = 'H';
	p = &cva[8];
	strcpy( cva, "H000000AA" );

	q = s;
	while( *q ) q++;

	c = *--q;
	if(      'a'<=c && c<='z' )
		c -= 040;
	else if( 'A'<=c && c<='Z' )
		;
	else if( '0'<=c && c<='9' )
		goto NUM;
	else
		return( NULL );
	*p-- = c;

	c = *--q;
	if(      'a'<=c && c<='z' )
		c -= 040;
	else if( 'A'<=c && c<='Z' )
		;
	else if( '0'<=c && c<='9' )
		goto NUM;
	else
		return( NULL );
	*p = c;
	q--;

NUM:
	p = &cva[6];
	if( q < s )
		return( NULL );
	for(;;) {
		if( q < s )
			return( cva );
		if( p <= &cva[0] )
			return( NULL );
		c = *q--;
		if( c < '0' || c > '9' )
			return( NULL );
		*p-- = c;
	}
}

/*
 * Удаление файла
 */
remove( n )
char *n;
{
	struct LP_QUEUE head;
	int             fd;
	struct LP_SPOOL slot;
	char            b[10];

	/* Прочитать заголовок */
	if( (fd = open( n, 0 )) < 0 ||
	    read( fd, &head, sizeof head ) != sizeof head )  {
		error( "can't remove %s", "не могу уничтожить %s", cvn( n ) );
		close(fd);
		return;
	}
	close(fd);

	if( lockf == -1 && rflg )
		return;

	if( strcmp( ruser, "root" ) && strcmp( ruser, head.lpq_user ) ) {
		error( "you can not remove file %s",
		       "вы не можете удалить файл %s", cvn( n ) );
		return;
	}

	if( !rflg ) {
		strcpy( b, n );
		unlink( n );
		b[0] = 'S';
		unlink( b );    /* Может и не сработать если файла нет */
	}

	/* Читать lock */
	if( lockf > 0 ) {
		lseek( lockf, head.lpq_slot * (long)(sizeof slot), 0 );
		if( read( lockf, &slot, sizeof slot ) != sizeof slot )
			goto NOSLOT;
		if( slot.lps_pid == 0 || strcmp( n, slot.lps_file ) )
			goto NOSLOT;
		if( killpg( slot.lps_pid, SIGTERM ) == -1 )
			error( "printing file %s already done (?)",
			       "печать файла %s уже кончилась (?)", cvn( n ) );
		return;
	}
NOSLOT:
	if( rflg )
		error( "file %s is not printed",
		       "файл %s не печатается", cvn( n ) );
}

/*
 * Сканировать каталог
 */
scandir()
{
	struct direct d;
	FILE         *dp;
	char          nm[16];

	if( (dp = fopen( LP_DIR, "r" )) == NULL ) {
		error( "can't read %s", "не могу прочитать %s", LP_DIR );
		exit(1);
	}
	while( fread( &d, sizeof (struct direct), 1, dp ) ) {
		if( d.d_ino == 0 )
			continue;
		strncpy( nm, d.d_name, DIRSIZ );
		nm[DIRSIZ] = '\0';
		if( *nm == 'H' ) {
			if( aflg == 0 && xcheck( nm ) )
				continue;
			remove( nm );
		}
	}
	fclose( dp );
}

/*
 * Сканировать файл lock
 */
scanlock()
{
	int             dp;
	struct LP_SPOOL s;

	if( (dp = open( LP_LOCK, 0 )) < 0 ) {
		error( "can't read %s", "не могу прочитать %s", LP_LOCK );
		exit(1);
	}
	while( read( dp, &s, sizeof s ) == sizeof s ) {
		if( s.lps_pid == 0 )
			continue;
		if( aflg == 0 && xcheck( s.lps_file ) )
			continue;
		remove( s.lps_file );
	}
	close( dp );
}

/*
 * Прочитать файл заголовка
 */
xcheck( n )
char *n;
{
	struct LP_QUEUE head;
	int             fd;

	if( (fd = open( n, 0 )) < 0 )
		return(1);
	if( read( fd, &head, sizeof head ) != sizeof head )
		return(1);
	close(fd);
	if( user ) {
		if( user[0] != '\0' && strcmp( user, head.lpq_user ) )
			return(1);
		if( user[0] == '\0' && strcmp( ruser, head.lpq_user ) )
			return(1);
	}
	if( lp && strcmp( lp, head.lpq_printer ) )
		return(1);
	return(0);
}

/*
 * Печатать сообщение об ошибке
 */
error( e, r, a )
{
	fprintf( stderr, "%s: ", v0 );
	fprintf( stderr, ediag(e,r), a );
	fprintf( stderr, "\n" );
}

/*
 * Преобразование имени файла
 *      H000123BC    ---->    123bc
 */
char *cvn( n )
register char *n;
{
	register char *p;
	static char b[10];

	p = b;
	n++;
	while( *n && *n == '0' ) n++;
	while( *n )
		*p++ = *n++;
	*p-- = '\0';
	if( *--p == 'A' ) {
		if( (*p = p[1]) == 'A' )
			*p = '\0';
		else {
			*p++ |= 040;
			*p    = '\0';
		}
	} else {
		*p++ |= 040;
		*p   |= 040;
	}
	return( b );
}
@


1.4
log
@kill заменен на killpg -- чтобы убивался и фильтр.
@
text
@d18 3
d35 1
a35 1
static char rcsid[] = "$Header: lprm.c,v 1.3 87/01/06 10:44:31 avg Exp $";
d335 4
a338 5
	while( *++n ) {
		if( *n == '0' )
			continue;
		*p++ = *n;
	}
@


1.3
log
@Разделено имя физического устройсва печати и логического
устройства спулинга.
@
text
@d18 4
d32 1
a32 1
static char rcsid[] = "$Header: lprm.c,v 1.2 86/10/17 22:39:08 avg Exp $";
d226 1
a226 1
		if( kill( slot.lps_pid, SIGTERM ) == -1 )
@


1.2
log
@Теперь если у -u нет аргумента, то сканируются все файлы
пользователя по getlogin.
@
text
@d18 4
d28 1
a28 1
static char rcsid[] = "$Header: lprm.c,v 1.1 86/09/09 21:13:33 avg Exp $";
d302 1
a302 1
	if( lp && strcmp( lp, rindex( head.lpq_printer, '/' ) + 1 ) )
@


1.1
log
@Initial revision
@
text
@d17 4
a20 1
 * $Log$
d24 1
a24 1
static char rcsid[] = "$Header$";
d49 2
a50 2
			"Usage: %s [-r] [-Llpn] [-uuser] [-a] [fileno...]\n",
			"Вызов: %s [-r] [-Llpn] [-uпольз] [-a] [Nфайла...]\n" ), v0 );
d61 2
a62 1
		if( (ruser = getenv( "USER" )) == NULL )
d292 6
a297 2
	if( user && strcmp( user, head.lpq_user ) )
		return(1);
@
