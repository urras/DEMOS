head     1.6;
access   ;
symbols  ;
locks    ;
comment  @ * @;


1.6
date     89.03.04.22.35.37;  author avg;  state Exp;
branches ;
next     1.5;

1.5
date     88.01.26.14.55.34;  author avg;  state Exp;
branches ;
next     1.4;

1.4
date     87.02.06.21.15.01;  author avg;  state Exp;
branches ;
next     1.3;

1.3
date     87.01.06.10.41.18;  author avg;  state Exp;
branches ;
next     1.2;

1.2
date     86.07.16.20.58.06;  author avg;  state Exp;
branches ;
next     1.1;

1.1
date     86.05.17.22.00.07;  author avg;  state Exp;
branches ;
next     ;


desc
@
Найти описание АЦПУ по его имени.
@


1.6
log
@Добавлены ключи opt и noopt.
@
text
@/*
 * Выдать описание АЦПУ по имени из /etc/lptab
 *
 * Автор: Антонов В.Г.
 *
 * $Log:        getlp.c,v $
 * Revision 1.5  88/01/26  14:55:34  avg
 * Правлена обработка tstr и istr.
 *
 * Revision 1.4  87/02/06  21:15:01  avg
 * Добавлен новый тип 'O' для устройств с нестандартным интерфейсом.
 *
 * Revision 1.3  87/01/06  10:41:18  avg
 * Разделено имя физического устройсва печати и логического
 * устройства спулинга.
 *
 * Revision 1.2  86/07/16  20:58:06  avg
 * Не закрывался файл lpf при удачном поиске lp.
 *
 * Revision 1.1  86/05/17  22:00:07  avg
 * Initial revision
 *
 */

#ifndef lint
static char rcsid[] = "$Header: getlp.c,v 1.5 88/01/26 14:55:34 avg Exp $";
#endif

#include <stdio.h>
#include <sys/ioctl.h>
#include "getlp.h"

static FILE *lpf = NULL;
static char Tstring[256];

int     lpslot;

/*
 * Возвращает структуру getlp.
 * Возвращает в lpslot номер в lptab найденной печаталки
 * (если lpname == NULL, то первой печаталки с допустимым классом)
 * Возвращает NULL по ошибке.
 */
struct getlp *getlp( lpname )
char    *lpname;
{
	struct getlp *GETMS();
	register char *p, *q;

	lpslot = 0;
	if( (lpf = fopen(LPTAB, "r")) == NULL )
		return( NULL );
	while( fgets(Tstring, 255, lpf) != NULL ) {
		lpslot++;
		if( *Tstring != LPC_LOCAL  &&
		    *Tstring != LPC_REMOTE &&
		    *Tstring != LPC_TTY  &&
		    *Tstring != LPC_OTHER )
			continue;
		if( lpname == NULL ) {
			fclose( lpf );
			return( GETMS( Tstring ) );
		}
		p = Tstring+1;
		q = lpname;
		while( *p == *q ) p++, q++;
		if( *p != ':' || *q != '\0' )
			continue;
		fclose( lpf );
		return( GETMS( Tstring ) );
	}
	fclose(lpf);

	/* Not found */
	return( NULL );
}


static struct MDS {
	char    *name;
	short    set;
	short    reset;
} MTB[] = {
	"raw",          LPRAW,          0,
	"-raw",         0,              LPRAW,
	"cap",          LPCAP,          LPBAR+LPZNAK,
	"-cap",         0,              LPCAP+LPZNAK+LPSISO,
	"eject",        LPEJECT,        0,
	"-eject",       0,              LPEJECT,
	"siso",         LPSISO+LPCYRILL+LPCAP, LPBAR+LPRAW,
	"-siso",        0,              LPSISO,
	"cyrill",       LPCYRILL,       LPRAW,
	"-cyrill",      0,              LPCYRILL+LPSISO,
	"bar",          LPBAR,          LPCAP,
	"-bar",         0,              LPBAR,
	"znak",         LPZNAK,         0,
	"-znak",        0,              LPZNAK,
	0
};


/*
 * Разбирает строку режимов ПУ
 */
static struct getlp *GETMS( s )
register char *s;
{
	static struct getlp R;
	static char  lpn[64];
	static char  devn[64];
	register char *q;
	register i;
	struct MDS *t;
	short Sets = 0;
	char    cc;

	if( *Tstring == LPC_TTY )
		defmodes( &R );

	R.lp_istr = NULL;
	R.lp_tstr = NULL;
	R.lp_class = *s++;

	q = lpn;
	while( *s != '\n' && *s != '\0' && *s != ':' )
		*q++ = *s++;
	s++;
	*q = 0;
	R.lp_name = lpn;

	q = devn;
	while( *s != '\n' && *s != '\0' && *s != ':' )
		*q++ = *s++;
	s++;
	*q = 0;
	R.lp_dev = devn;

	q = s;
	while( *s != '\n' && *s != '\0' && *s != ':' )
		s++;
	*s++ = '\0';
	R.lp_type = q;

	i = 0;
	while( *s != '\n' && *s != '\0' && *s != ':' )
		if( '0' <= *s && *s <= '9' )
			i = i*10 + (*s++ - '0' );
	s++;
	R.lp_width = i;

	i = 0;
	while( *s != '\n' && *s != '\0' && *s != ':' )
		if( '0' <= *s && *s <= '9' )
			i = i*10 + (*s++ - '0' );
	s++;
	R.lp_length = i;

	q = s;
	if( *Tstring == LPC_OTHER ) {
		while( (cc = *s) != ':' && cc != '\0' && cc != '\n' ) s++;
		q = ++s;
		goto Fil;
	}
	do {
		cc = *++s;
		if( cc == '\\' ) {
			cc = *++s;
			if( cc != '\0' && cc != '\n' )
				continue;
		} else if( cc != ',' && cc != '\0' && cc != '\n' && cc != ':' )
			continue;
		*s = '\0';

		/* find mode */
		if( *Tstring == LPC_TTY ||
		    !strcmp(q, "opt") || !strcmp(q, "noopt") ||
		    !strncmp(q, "istr=", 5) || !strncmp(q, "tstr=", 5) ) {
			setmode( q, &R );
		} else {
			for( t = MTB ; t->name ; t++ ) {
				if( !strcmp( t->name, q ) ) {
					Sets   &= ~(t->reset);
					Sets   |= t->set;
					break;
				}
			}
		}
		s++;
		q = s;
	} while( cc != '\n' && cc != '\0' && cc != ':' );
	if( *Tstring != LPC_TTY )
		R.lp_flags = Sets;
Fil:
	R.lp_filter = NULL;
	if( cc == ':' ) {
		while( *s != '\n' && *s != '\0' )
			s++;
		*s = 0;
		if( s == q )
			return( &R );
		R.lp_filter = q;
	}
	return( &R );
}
@


1.5
log
@Правлена обработка tstr и istr.
@
text
@d7 3
d26 1
a26 1
static char rcsid[] = "$Header: getlp.c,v 1.4 87/02/06 21:15:01 avg Exp $";
d175 3
a177 2
		if( *Tstring == LPC_TTY || !strcmp(q, "istr=", 5)
					|| !strcmp(q, "tstr=", 5) ) {
@


1.4
log
@Добавлен новый тип 'O' для устройств с нестандартным интерфейсом.
@
text
@d7 3
d23 1
a23 1
static char rcsid[] = "$Header: getlp.c,v 1.3 87/01/06 10:41:18 avg Exp $";
d117 2
d163 5
a167 1
		if( cc != ',' && cc != '\0' && cc != '\n' && cc != ':' )
d172 2
a173 1
		if( *Tstring == LPC_TTY ) {
@


1.3
log
@Разделено имя физического устройсва печати и логического
устройства спулинга.
@
text
@d7 4
d20 1
a20 1
static char rcsid[] = "$Header: getlp.c,v 1.2 86/07/16 20:58:06 avg Exp $";
d51 2
a52 1
		    *Tstring != LPC_TTY )
a64 1

d151 5
d179 1
a179 1

@


1.2
log
@Не закрывался файл lpf при удачном поиске lp.
@
text
@d7 3
d16 1
a16 1
static char rcsid[] = "$Header: getlp.c,v 1.1 86/05/17 22:00:07 avg Exp $";
d100 1
d111 1
d113 5
a117 1
	*q++ = '/'; *q++ = 'd'; *q++ = 'e'; *q++ = 'v' ; *q++ = '/';
d119 1
d124 1
a124 1
	R.lp_name = lpn;
@


1.1
log
@Initial revision
@
text
@d6 4
a9 1
 * $Log$
d13 1
a13 1
static char rcsid[] = "$Header$";
d46 2
a47 1
		if( lpname == NULL )
d49 1
d55 1
@
