/* ОПРЕДЕЛЯЕТ, ЗАВИСИТ ЛИ ФАЙЛ 'old' ОТ ФАЙЛА 'new'

   возврат:       0   не зависит
		n>0   new - производный файл,  n - длина корня до суффикса
		n<0   old - производный файл, -n - длина корня до суффикса

 */
/*
 * $Log:	depend.cm,v $
Revision 1.5  89/08/19  17:07:33  rygoff
Косметические правки текста

 * Revision 1.4  89/08/19  15:59:31  rygoff
 * Еще одна проверка RCS
 *
 * Revision 1.3  89/08/19  15:56:40  rygoff
 * Проверка RCS
 *
 * Ничего не менял
 *
 * Revision 1.2  89/08/19  15:44:20  rygoff
 * Добавлена звисимость .Z для compress(1)'ированных файлов
 *
 */

#include "comint.h"

%%
/ +_:?|
 + ~2
/ |-?
 .};
/ |?:?|
 # ~2

/+  _?
 + ~2
/+ ? _
 + ~1
/+ ?  _?
 + ~1 ~3
/+ ? ?
 + ~1","~2
/+ ?Ф?
 + ~1~2
/+ ?
 .static char *suffixes[] = {"~1"};
 .static long  depmap[] = {

/# ? _?
 # ~1~3
/# ?
 -0 ~1

/-? ?-
 -=~1*2= ~2
/-? ?>
 -=~1*2+1= ~2
/-?_
 .~1l,

%%

/* ТАБЛИЦА ЗАВИСИМОСТИ СУФФИКСОВ
   Знак '>' показывает, что суффикс в данной колонке зависит от суффикса,
   написанного в начале строки. Ф обозначает отсутствие суффикса. */

/*--------------------------------------------------------------------------------*/
+    :Ф .y .l .c .cm .co .cmo .p .f .F .s .o .e .r .C .Z .b .bak .i .tu .$ .O ,v .m|
/*--------------------------------------------------------------------------------*/
|Ф   :- -  -  -  -   -   -    -  -  -  -  -  -  -  >  >  >  >    -  >   -  -  >  - |
|.y  :- -  -  >  -   -   -    -  -  -  >  >  -  -  -  -  -  -    >  -   -  -  -  - |
|.l  :- -  -  >  -   -   -    -  -  -  >  >  -  -  -  -  -  -    >  -   -  -  -  - |
|.c  :- -  -  -  -   -   -    -  -  -  >  >  -  -  -  -  -  -    >  -   -  -  -  - |
|.cm :- -  -  >  -   -   -    -  -  -  >  >  -  -  -  -  -  -    >  -   -  -  -  - |
|.co :- -  -  >  -   -   -    -  -  -  >  >  -  -  -  -  -  -    >  -   -  -  -  - |
|.cmo:- -  -  >  >   >   -    -  -  -  >  >  -  -  -  -  -  -    >  -   -  -  -  - |
|.p  :- -  -  -  -   -   -    -  -  -  >  >  -  -  -  -  -  -    -  -   -  -  -  - |
|.f  :- -  -  -  -   -   -    -  -  -  >  >  -  -  -  -  -  -    -  -   -  -  -  - |
|.F  :- -  -  -  -   -   -    -  -  -  -  >  -  -  -  -  -  -    -  -   -  -  -  - |
|.s  :- -  -  -  -   -   -    -  -  -  -  >  -  -  -  -  -  -    -  -   -  -  -  - |
|.o  :- -  -  -  -   -   -    -  -  -  -  -  -  -  -  -  -  -    -  -   -  -  -  - |
|.e  :- -  -  -  -   -   -    -  >  -  >  >  -  -  -  -  -  -    -  -   -  -  -  - |
|.r  :- -  -  -  -   -   -    -  >  -  >  >  -  -  -  -  -  -    -  -   -  -  -  - |
|.C  :- -  -  -  -   -   -    -  -  -  -  -  -  -  -  -  -  -    -  -   -  -  -  - |
|.b  :- -  -  -  -   -   -    -  -  -  -  -  -  -  -  -  -  -    -  -   -  -  -  - |
|.bak:- -  -  -  -   -   -    -  -  -  -  -  -  -  -  -  -  -    -  -   -  -  -  - |
|.i  :- -  -  -  -   -   -    -  -  -  -  -  -  -  -  -  -  -    -  -   -  -  -  - |
|.tu :- -  -  -  -   -   -    -  -  -  -  -  -  -  -  -  -  -    -  -   -  -  -  - |
|.$  :- -  -  -  -   -   -    -  -  -  -  -  -  -  -  -  >  >    -  -   -  -  -  - |
|.O  :- -  -  -  -   -   -    -  -  -  -  -  -  -  -  -  >  >    -  -   -  -  -  - |
|,v  :- -  -  -  -   -   -    -  -  -  -  -  -  -  -  -  >  >    -  -   -  -  -  - |
|.m  :- -  -  >  -   -   -    -  -  -  -  >  -  -  -  -  -  -    -  -   -  -  -  - |
|----------------------------------------------------------------------------------|

#define nsuf ( (sizeof suffixes)/(sizeof suffixes[0]) )


int depend( old, new )
    char   *old,*new;
{
    register int lroot;

    if( *old != *new )              return( 0 );            /* эвристика */
    if( lroot = is_boss(old,new) )  return(  lroot );
    if( lroot = is_boss(new,old) )  return( -lroot );
    return( 0 );
}


int is_boss( master, slave )
    char    *master,*slave;
{
    register char *n, *e;
    register int   i;
    char          *s;
    int            l, lmaster, lroot, j;
    long           deb;

    lmaster = strlen(master);
    e       = &master[lmaster];

    for( i=0; i<nsuf; ++i ) {                   /* ищем суффикс у master */
	n = suffixes[i];  l = strlen( n );
	if( l<lmaster && !strcmp(e-l,n)
	&& !strncmp(master,slave,lmaster-l) ) {
	    deb   = depmap[i];                  /* множество суф.у slave */
	    lroot = lmaster - l;                /* длина корня */
	    s     = &slave[lroot];              /* адрес суффикса slave */

	    for( j=0; j<nsuf; ++j ) {           /* проверяем суфф. slave */
		if( (deb&1) && !strcmp(s,suffixes[j]) )  return(lroot);
		deb >>= 1;
	    }
	}
    }
    return( 0 );                 /* нет известного суффикса */
}
