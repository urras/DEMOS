head     1.4;
access   ;
symbols  SM4:1.1;
locks    dvolodin:1.4;
comment  @ * @;


1.4
date     87.04.14.12.56.52;  author dmitry;  state Exp;
branches ;
next     1.3;

1.3
date     87.03.06.15.02.32;  author alex;  state Exp;
branches ;
next     1.2;

1.2
date     87.03.02.14.31.45;  author root;  state Exp;
branches ;
next     1.1;

1.1
date     86.01.10.09.27.03;  author fox;  state Exp;
branches ;
next     ;


desc
@@


1.4
log
@Сделано чтение make.rc из /lib или /usr/lib.
(Егошин)
@
text
@static  char *rcsid = "$Header: main.c,v 1.3 87/03/06 15:02:32 alex Exp $";
/* $Log:	main.c,v $
 * Revision 1.3  87/03/06  15:02:32  alex
 * Исправлена ошибка им. Флерова.
 * 
 * Revision 1.2  87/03/02  14:31:45  root
 * Исправлен код возврата при ключе -k и ошибках. Флеров.
 * 
 * Revision 1.1  86/01/10  09:27:03  fox
 * Initial revision
 *
*/

# include "defs.h"
/*
command make to update programs.
Flags:  'd'  print out debugging comments
	'p'  print out a version of the input graph
	's'  silent mode--don't print out commands
	'f'  the next argument is the name of the description file;
	     "makefile" is the default
	'i'  ignore error codes from the shell
	'S'  stop after any command fails (normally do parallel work)
	'n'   don't issue, just print, commands
	't'   touch (update time of) files but don't issue command
	'q'   don't do anything, but check if object is up to date;
	      returns exit code 0 if up to date, -1 if not
*/

struct nameblock *mainname      = NULL;
struct nameblock *firstname     = NULL;
struct lineblock *sufflist      = NULL;
struct varblock *firstvar       = NULL;
struct pattern *firstpat        = NULL;
struct opendir *firstod         = NULL;

#include <signal.h>
int sigivalue   = 0;
int sigqvalue   = 0;
int waitpid     = 0;

int dbgflag     = NO;
int prtrflag    = NO;
int silflag     = NO;
int noexflag    = NO;
int keepgoing   = NO;
int noruleflag  = NO;
int touchflag   = NO;
int questflag   = NO;
int ndocoms     = NO;
int ignerr      = NO;    /* default is to stop on error */
int okdel       = YES;
int inarglist;
char *prompt    = "";   /* other systems -- pick what you want */
int nopdir      = 0;
int err_doflag  = 0;    /* Флеров */
char junkname[20];
char funny[NSYMB];

main(argc,argv)
int argc;
char *argv[];
{
register struct nameblock *p;
int i, j;
int descset, nfargs;
TIMETYPE tjunk;
char c, *s;
static char onechar[2] = "X";
int intrupt();




#ifdef METERFILE
meter(METERFILE);
#endif

descset = 0;

funny['\0'] = (META | TERMINAL);
for(s = "=|^();&<>*?[]:$`'\"\\\n" ; *s ; ++s)
	funny[((int)*s)&0377] |= META;
for(s = "\n\t :;&>|" ; *s ; ++s)
	funny[((int)*s)&0377] |= TERMINAL;


inarglist = 1;
for(i=1; i<argc; ++i)
	if(argv[i]!=0 && argv[i][0]!='-' && eqsign(argv[i]))
		argv[i] = 0;

setvar("$","$");
inarglist = 0;

for(i=1; i<argc; ++i)
    if(argv[i]!=0 && argv[i][0]=='-')
	{
	for(j=1 ; (c=argv[i][j])!='\0' ; ++j)  switch(c)
		{
		case 'd':
			dbgflag = YES;
			break;

		case 'p':
			prtrflag = YES;
			break;

		case 's':
			silflag = YES;
			break;

		case 'i':
			ignerr = YES;
			break;

		case 'S':
			keepgoing = NO;
			break;

		case 'k':
			keepgoing = YES;
			break;

		case 'n':
			noexflag = YES;
			break;

		case 'r':
			noruleflag = YES;
			break;

		case 't':
			touchflag = YES;
			break;

		case 'q':
			questflag = YES;
			break;

		case 'f':
			if(i >= argc-1)
			  fatal("No description argument after -f flag");
			if( rddescf(argv[i+1]) )
				fatal1("Cannot open %s", argv[i+1]);
			argv[i+1] = 0;
			++descset;
			break;

		default:
			onechar[0] = c; /* to make lint happy */
			fatal1("Unknown flag argument %s", onechar);
		}

	argv[i] = 0;
	}

if( !descset )
	if( rddescf("makefile") )  rddescf("Makefile");

if(prtrflag) printdesc(NO);

if( srchname(".IGNORE") ) ++ignerr;
if( srchname(".SILENT") ) silflag = 1;
if(p=srchname(".SUFFIXES")) sufflist = p->linep;
if( !sufflist ) fprintf(stderr,"No suffix list.\n");

sigivalue = (int) signal(SIGINT, SIG_IGN) & 01;
sigqvalue = (int) signal(SIGQUIT, SIG_IGN) & 01;
enbint(intrupt);

nfargs = 0;

for(i=1; i<argc; ++i)
	if((s=argv[i]) != 0)
		{
		if((p=srchname(s)) == 0)
			{
			p = makename(s);
			}
		++nfargs;
		if( doname(p, 0, &tjunk) )  err_doflag = 1;
		if(dbgflag) printdesc(YES);
		}

/*
If no file arguments have been encountered, make the first
name encountered that doesn't start with a dot
*/

if(nfargs == 0)
	if(mainname == 0)
		fatal("No arguments or description file");
	else    {
		if( doname(mainname, 0, &tjunk) )  err_doflag = 1;
		if(dbgflag) printdesc(YES);
		}

exit(err_doflag);
}



intrupt()
{
struct varblock *varptr();
char *p;
TIMETYPE exists();

if(okdel && !noexflag && !touchflag &&
	(p = varptr("@@")->varval) && exists(p)>0 && !isprecious(p) )
		{
		fprintf(stderr, "\n***  %s removed.", p);
		unlink(p);
		}

if(junkname[0])
	unlink(junkname);
fprintf(stderr, "\n");
exit(2);
}




isprecious(p)
char *p;
{
register struct lineblock *lp;
register struct depblock *dp;
register struct nameblock *np;

if(np = srchname(".PRECIOUS"))
	for(lp = np->linep ; lp ; lp = lp->nxtlineblock)
		for(dp = lp->depp ; dp ; dp = dp->nxtdepblock)
			if(! unequal(p, dp->depname->namep))
				return(YES);

return(NO);
}


enbint(k)
int (*k)();
{
if(sigivalue == 0)
	signal(SIGINT,k);
if(sigqvalue == 0)
	signal(SIGQUIT,k);
}


FILE * fin;
int firstrd	= 0;


rddescf(descfile)
char *descfile;
{
FILE * k;

/* read and parse description */

if( !firstrd++ )
	{
	if( !noruleflag && ((k = fopen(DESCFILE,"r")) != NULL )
			  || ((k = fopen(DESCFILE1,"r")) != NULL ) ) {
		rdd1( k );
		fclose(k);
	}
	}
if(! unequal(descfile, "-"))
	return( rdd1(stdin) );

if( (k = fopen(descfile,"r")) != NULL)
	return( rdd1(k) );

return(1);
}




rdd1(k)
FILE * k;
{
extern int yylineno;
extern char *zznextc;

fin = k;
yylineno = 0;
zznextc = 0;

if( yyparse() )
	fatal("Description file error");

fclose(k);
return(0);
}

printdesc(prntflag)
int prntflag;
{
struct nameblock *p;
struct depblock *dp;
struct varblock *vp;
struct opendir *od;
struct shblock *sp;
struct lineblock *lp;

if(prntflag)
	{
	printf("Open directories:\n");
	for (od = firstod; od; od = od->nxtopendir)
		printf("\t%d: %s\n", fileno(od->dirfc), od->dirn);
	}

if(firstvar != 0) printf("Macros:\n");
for(vp = firstvar; vp ; vp = vp->nxtvarblock)
	printf("\t%s = %s\n" , vp->varname , vp->varval);

for(p = firstname; p; p = p->nxtnameblock)
	{
	printf("\n\n%s",p->namep);
	if(p->linep != 0) printf(":");
	if(prntflag) printf("  done=%d",p->done);
	if(p==mainname) printf("  (MAIN NAME)");
	for(lp = p->linep ; lp ; lp = lp->nxtlineblock)
		{
		if( dp = lp->depp )
			{
			printf("\n depends on:");
			for(; dp ; dp = dp->nxtdepblock)
				if(dp->depname != 0)
					printf(" %s ", dp->depname->namep);
			}
	
		if(sp = lp->shp)
			{
			printf("\n commands:\n");
			for( ; sp!=0 ; sp = sp->nxtshblock)
				printf("\t%s\n", sp->shbp);
			}
		}
	}
printf("\n");
fflush(stdout);
}
@


1.3
log
@Исправлена ошибка им. Флерова.
@
text
@d1 1
a1 1
static  char *rcsid = "$Header: main.c,v 1.2 87/03/02 14:31:45 root Exp $";
d3 3
a252 4
extern char *builtin[];

char **linesptr	= builtin;

d266 4
a269 2
	if( !noruleflag )
		rdd1( (FILE *) NULL);
d271 1
d297 1
a297 3
if(fin != NULL)
	fclose(fin);

@


1.2
log
@Исправлен код возврата при ключе -k и ошибках. Флеров.
@
text
@d1 5
a5 2
static  char *rcsid = "$Header: main.c,v 1.1 86/01/10 09:27:03 fox Exp $";
/* $Log:        main.c,v $
d53 1
a53 1
int err_doname  = 0;    /* Флеров */
@


1.1
log
@Initial revision
@
text
@d1 5
a5 2
static  char *rcsid = "$Header: main.c,v 1.1 86/01/09 23:33:49 fox Exp $";
/* $Log:	main.c,v $
d11 1
a11 1
Flags:	'd'  print out debugging comments
d24 6
a29 6
struct nameblock *mainname	= NULL;
struct nameblock *firstname	= NULL;
struct lineblock *sufflist	= NULL;
struct varblock *firstvar	= NULL;
struct pattern *firstpat	= NULL;
struct opendir *firstod		= NULL;
d32 3
a34 3
int sigivalue	= 0;
int sigqvalue	= 0;
int waitpid	= 0;
d36 11
a46 11
int dbgflag	= NO;
int prtrflag	= NO;
int silflag	= NO;
int noexflag	= NO;
int keepgoing	= NO;
int noruleflag	= NO;
int touchflag	= NO;
int questflag	= NO;
int ndocoms	= NO;
int ignerr	= NO;    /* default is to stop on error */
int okdel	= YES;
d48 3
a50 2
char *prompt	= "";	/* other systems -- pick what you want */
int nopdir	= 0;
d145 1
a145 1
			onechar[0] = c;	/* to make lint happy */
d176 1
a176 1
		doname(p, 0, &tjunk);
d188 2
a189 2
	else	{
		doname(mainname, 0, &tjunk);
d193 1
a193 1
exit(0);
@
