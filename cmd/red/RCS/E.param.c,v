head     3.4;
access   ;
symbols  RED_4:3.1.2 DEMOS_2:3.3 COMMON3:3.2 ES:3.1.1;
locks    ;
comment  @ * @;


3.4
date     86.09.19.19.56.34;  author alex;  state Exp;
branches ;
next     3.3;

3.3
date     86.08.04.20.53.20;  author alex;  state Exp;
branches ;
next     3.2;

3.2
date     86.07.24.19.05.48;  author alex;  state Exp;
branches ;
next     3.1;

3.1
date     86.06.04.23.58.17;  author alex;  state Exp;
branches 3.1.1.1;
next     ;

3.1.1.1
date     86.06.05.00.06.41;  author alex;  state Exp;
branches ;
next     3.1.1.2;

3.1.1.2
date     86.06.16.21.54.46;  author alex;  state Stab;
branches ;
next     3.1.1.3;

3.1.1.3
date     86.06.16.22.20.28;  author alex;  state Exp;
branches ;
next     3.1.1.4;

3.1.1.4
date     86.06.19.00.11.00;  author alex;  state Exp;
branches ;
next     3.1.1.5;

3.1.1.5
date     86.07.15.22.14.17;  author alex;  state Stab;
branches ;
next     ;


desc
@  Полиэкранный редактор RED
  Версия 3.
  ИАЭ им. Курчатова, Москва.
@


3.4
log
@Версия для СМ-1700
@
text
@/*
 *      Редактор RED. ИАЭ им. И.В. Курчатова, ОС ДЕМОС
 *
 *      $Header: E.param.c,v 3.3 86/08/04 20:53:20 alex Exp $
 *      $Log:	E.param.c,v $
 * Revision 3.3  86/08/04  20:53:20  alex
 * Bepqh dk LMNQ/DELNQ 2
 * 
 * Revision 3.2  86/07/24  19:05:48  alex
 * Об'единены версии текстов для ЕС и СМ
 * 
 * Revision 3.1.1.5  86/07/15  22:14:17  alex
 * RED 3.3/EC.
 * 
 * Revision 3.1.1.4  86/06/19  00:11:00  alex
 * Отлажен на модели повтор сеанса
 * 
 * Revision 3.1.1.3  86/06/16  22:20:28  alex
 * Первая версия с повтором сеанса (пока грязная)
 * 
 * Revision 3.1.1.1  86/06/05  00:06:41  alex
 * Отлажено_на_модели
 * 
 * Revision 3.1  86/06/04  23:58:17  alex
 * *** empty log message ***
 * 
 * Revision 3.1  86/04/20  23:42:39  alex
 * Базовая версия для ЕС.
 *
 * Revision 1.5  86/04/13  22:01:59  alex
 *
 * r.param.c - Работа с терминалом - ввод аргумента
 *
 */

#include "r.defs.h"

/*
 * Блок ввода аргумента.
 * Включает две внутренние функции и "param".
 */
char paramadd; /* Флаг - параметр увеличивался */
int paramn;    /* Тек. длина параметров        */
#define LPARAM 40 /* Шаг приращения массива */
/*
 * addparam(l,str)
 * ввод очередной порции аргумента
 */
static addparam(ln,str,lnos)
int ln,lnos;
register char *str;
{
    register int i;
    int j;
#ifdef lint
    j = ln;
#endif
    j = paramn;  /* !!! */
    if ( lnos < paramport.redit-paramport.ledit+1 )
			lnos = paramport.redit-paramport.ledit+1;
    for ( i=0; i < lnos; i++)
    {
        if ( paramn >= paraml) exparaml(LPARAM);
        paramv[paramn++] = *str;
	if ( *str == '\0') break;
	if ( *str++ != ' ' ) j = paramn;        /* !!! */
    }
    paramv[(paramn=j)] = 0;/* Затычка!!! для отладки */
    paramadd = 1;
}

/*
 * exparaml(n)
 * удлинить массив под параметр на n символов
 */
static exparaml(l)
int l;
{
    register char *c1, *c2;
    register int i;
    char *cp;
    cp = paramv;
    c1 = paramv = salloc(paraml + l + 1);
    c2 = cp;
    for ( i = 0; i < paraml; i++) *c1++ = *c2++;
    if ( paraml ) free(cp);
    paraml += l;
}

/*
 *  param() - Запрос параметра
 *      Три типа параметров.
 *              paramtype = -1 -- определение области
 *              paramtype = 0  -- пустой аргумент
 *              paramtype = 1  -- строка.
 *              при использовании макро бывает paramtype = -2 - tag defined
 *      Возвращается указатель на введенную строку (paramv).
 *      Длина возвращается в переменной paraml.
 *      Если при очередном вызове paraml не 0, старый paramv
 *      освобождается, так что если старый параметр нужен,
 *      нужно обнулить paraml.
 *      Режим ввода макро пока не реализован.
 */
char *param(macro)
int macro;
{
    register int i;
    struct viewport *w;
    if (paraml != 0 && paramv != 0) free(paramv);
    movecursor(0);
    paramc1 = paramc0 = cursorcol;
    paramr1 = paramr0 = cursorline;
    putch(COCURS,1);
    poscursor(cursorcol,cursorline);
    w = curport;
    telluser(macro?"mac: ":"arg: ",0);
    paraml = paramn = 0; paramadd = 0;
    lread1 = -1;
    paramport.ledit = 4 + LMARG;
back:
    switchport(&paramport);
    poscursor(paramport.ledit,0);
    editwind(&paramport, addparam, 0);
    newedit = 1;
    /*
     * Пока что то было введено, добавляем к параметру.
     * Затем возвращаем результат.
     */
    while ( read1(), lread1 == CCENTER && paramadd  || (macro && lread1 != CCQUIT)  )
    {
	    if ( macro  ) {
	        char line[4];
	        line[0] = lread1; line[1] = 0;
	        addparam(0,line,1);
	        }
        paramadd = 0;
        telluser(DIAG("cont:", "прод:"),0);
	poscursor(paramport.ledit,0);
        lread1 = -1;
    }
    if ( paraml == 0 && ((lread1 >0 && lread1<=BT) || cursorline != 0 ))
    {
        /*
	 * Ввод области "cursor defined"
	 */
        editwind((struct viewport *)0, (int (*)())0, 0);
        switchport(w);
        telluser(DIAG("arg: *** cursor defined ***",
        "arg: *** указание курсором ***"),0);
	if ( lread1 <= BT )
	       poscursor(paramc0, paramr0);
	       else movecursor(0);
	if ( lread1 == RN ) lread1 = -1;
        read1();
        while (CONTROLCHAR && (i=((lread1<=BT)?lread1:0)))
        {
            movecursor(i);
            if (cursorline == paramr0 &&
                cursorcol  == paramc0)  goto back;
            lread1 = -1;
            read1();
        }
        if(cursorcol > paramc0)paramc1 = cursorcol;
        else paramc0 = cursorcol;
        if(cursorline > paramr0)paramr1 = cursorline;
        else paramr0 = cursorline;
        paraml = 0;
        paramv = NULL;
        paramtype = -1;
    }
    else if ( paramn != 0 )
    {
        paramtype = 1;
/*      paraml = paramn;        */
    }   
    else {
        paramtype = 0;
    }
    editwind((struct viewport *)0, (int (*)())0, 0);
    switchport(w);
    putup(paramr0,paramr0);
    poscursor(paramc0,paramr0);
    return (paramv);
}

@


3.3
log
@Bepqh dk LMNQ/DELNQ 2
@
text
@d4 1
a4 1
 *      $Header: E.param.c,v 3.2 86/07/24 19:05:48 alex Exp $
d6 3
@


3.2
log
@Об'единены версии текстов для ЕС и СМ
@
text
@d4 5
a8 2
 *      $Header: r.Eparam.c,v 3.1.1.5 86/07/15 22:14:17 alex Exp $
 *      $Log:	r.Eparam.c,v $
@


3.1
log
@*** empty log message ***
@
text
@d4 17
a20 2
 *      $Header: r.param.c,v 3.1 86/04/20 23:42:39 alex Exp $
 *      $Log:	r.param.c,v $
d43 2
a44 2
static addparam(ln,str)
int ln;
d49 3
d53 3
a55 1
    for ( i=0; i < paramport.redit; i++)
d101 1
a101 4
    register char *c1;
    char *cp,*c2;
    int c;
    register int i,pn;
d104 1
d111 1
a111 1
    paraml = paramn = 0;
a118 4
    if(macro) { 
        paramtype = 0; 
        return(paramv); 
    }
d123 1
a123 1
    while ( read1(), lread1 == CCENTER && paramadd )
d125 5
d135 1
a135 1
    if ( paraml == 0 && (lread1 >0 && lread1<=BT ))
d144 3
a146 1
        poscursor(paramc0, paramr0);
@


3.1.1.1
log
@Отлажено_на_модели
@
text
@d4 2
a5 5
 *      $Header: r.Eparam.c,v 3.1 86/06/04 23:58:17 alex Exp $
 *      $Log:	r.Eparam.c,v $
 * Revision 3.1  86/06/04  23:58:17  alex
 * *** empty log message ***
 * 
@


3.1.1.2
log
@Отлажено на ЕС без режима восстановления и без макро
@
text
@d4 1
a4 1
 *      $Header: r.Eparam.c,v 3.1.1.1 86/06/05 00:06:41 alex Exp $
a5 3
 * Revision 3.1.1.1  86/06/05  00:06:41  alex
 * Отлажено_на_модели
 * 
d84 4
a87 1
    register int i;
a89 1
    movecursor(0);
d96 1
a96 1
    paraml = paramn = 0; paramadd = 0;
d119 1
a119 1
    if ( paraml == 0 && ((lread1 >0 && lread1<=BT) || cursorline != 0 ))
d128 1
a128 3
	if ( lread1 <= BT )
	       poscursor(paramc0, paramr0);
	       else movecursor(0);
@


3.1.1.3
log
@Первая версия с повтором сеанса (пока грязная)
@
text
@@


3.1.1.4
log
@Отлажен на модели повтор сеанса
@
text
@d4 1
a4 1
 *      $Header: r.Eparam.c,v 3.1.1.3 86/06/16 22:20:28 alex Exp $
a5 3
 * Revision 3.1.1.3  86/06/16  22:20:28  alex
 * Первая версия с повтором сеанса (пока грязная)
 * 
d34 2
a35 2
static addparam(ln,str,lnos)
int ln,lnos;
d41 1
a41 3
    if ( lnos < paramport.redit-paramport.ledit+1 )
			lnos = paramport.redit-paramport.ledit+1;
    for ( i=0; i < lnos; i++)
@


3.1.1.5
log
@RED 3.3/EC.
@
text
@d4 1
a4 1
 *      $Header: r.Eparam.c,v 3.1.1.4 86/06/19 00:11:00 alex Exp $
a5 3
 * Revision 3.1.1.4  86/06/19  00:11:00  alex
 * Отлажен на модели повтор сеанса
 * 
a42 3
#ifdef lint
    j = ln;
#endif
d110 4
d118 1
a118 1
    while ( read1(), lread1 == CCENTER && paramadd  || (macro && lread1 != CCQUIT)  )
a119 5
	    if ( macro  ) {
	        char line[4];
	        line[0] = lread1; line[1] = 0;
	        addparam(0,line,1);
	        }
@
