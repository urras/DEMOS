head     1.3;
access   ;
symbols  ;
locks    ;
comment  @ * @;


1.3
date     89.01.31.17.30.59;  author avg;  state Exp;
branches ;
next     1.2;

1.2
date     88.09.16.14.31.05;  author ache;  state Exp;
branches ;
next     1.1;

1.1
date     88.01.05.18.38.39;  author andrew;  state Exp;
branches ;
next     ;


desc
@
adb
@


1.3
log
@Сделан разбор стека ядра в режиме IPK_FASTKOV.
@
text
@#
/*
 *
 *      UNIX debugger
 * $Log:        setup.c,v $
 * Revision 1.2  88/09/16  14:31:05  ache
 * В случае ядра регистры читаются из адреса 0300,
 * размер стека читается из структуры user.
 * Константа 0140000 должна быть unsigned.
 *
 * Revision 1.1  88/01/05  18:38:39  andrew
 * Initial revision
 *
 */

#include "defs.h"


MSG             BADNAM,R_BADNAM;
MSG             DIFMAG,R_DIFMAG;
MSG             BADFIL,R_BADFIL;

MAP             txtmap;
MAP             datmap;
SYMSLAVE        *symvec;
INT             wtflag;
INT             kernel;
INT             fcor;
INT             fsym;
L_INT           maxfile;
L_INT           maxstor;
L_INT           txtsiz;
L_INT           datsiz;
L_INT           bss;
L_INT           datbas;
L_INT           stksiz;
STRING          errflg;
INT             magic;
L_INT           symbas;
L_INT           symnum;
L_INT           entrypt;
L_INT           var[];

long tell();
INT             argcount;
INT             signo;
POS             corhdr[1024];
POS             *uar0 = UAR0;

STRING          symfil  "a.out";
STRING          corfil  "core";

#ifdef  IPK_XOVLY
union {
    XOVLVEC __x;
    OVLVEC  __o;
} _OVH_;
#define ovlseg _OVH_.__o
#define xovlseg _OVH_.__x
int     xoverlay;
L_INT           ovloff[32];
#define XOVLHDRSIZ       (sizeof(xovlseg))
#else
OVLVEC          ovlseg;
L_INT           ovloff[8];
#endif  /*IPK_XOVLY*/
#define OVLHDRSIZ       (sizeof(ovlseg))
L_INT           ovlsiz;
OVTAG           startov;
int             overlay;

#define TXTHDRSIZ       (sizeof(TXTHDR))

#define HBIT    0100

INT             kern_pars[32];          /* OVLY_PARs for kernel */

setsym()
{
	INT             relflg;
	SYMSLAVE        *symptr;
	SYMPTR          symp;
	TXTHDR          txthdr;

	fsym=getfile(symfil,1);
	txtmap.ufd=fsym;
	IF read(fsym, txthdr, TXTHDRSIZ)==TXTHDRSIZ
	THEN    magic=txthdr[0];
		txtsiz = txthdr[1];
		datsiz = txthdr[2];
		bss = txthdr[3];
		symnum = txthdr[4]/SYMTABSIZ;
		entrypt = txthdr[5];
		relflg = txthdr[7];
		symbas = txtsiz+datsiz;
		switch (magic)
		{
			INT ovly;

			case 0407:
				txtmap.b1 = txtmap.b2 = 0;
				txtmap.e1 = txtmap.e2 = txtsiz+datsiz;
				txtmap.f1 = txtmap.f2 = TXTHDRSIZ;
				break;

			case 0410:
				txtmap.b1 = 0;
				txtmap.e1 = txtsiz;
				txtmap.f1 = TXTHDRSIZ;
				txtmap.b2 = round(txtsiz, TXTRNDSIZ);
				txtmap.e2 = txtmap.b2+datsiz;
				txtmap.f2 = txtsiz+TXTHDRSIZ;
				break;

			case 0405:
			case 0411:
				txtmap.b1 = 0;
				txtmap.e1 = txtsiz;
				txtmap.f1 = TXTHDRSIZ;
				txtmap.b2 = 0;
				txtmap.e2 = datsiz;
				txtmap.f2 = txtsiz+TXTHDRSIZ;
				break;

			case 0430:
			case 0431:
#ifdef  IPK_XOVLY
			case 0444:
				IF read(fsym, &xovlseg,
				((magic==0444)?XOVLHDRSIZ:OVLHDRSIZ)) ==
				((magic==0444)?XOVLHDRSIZ:OVLHDRSIZ)
#else
				IF read(fsym, &ovlseg, OVLHDRSIZ) == OVLHDRSIZ
#endif  /*IPK_XOVLY*/
				THEN    txtmap.b1 = 0;
					txtmap.e1 = txtsiz;
#ifdef  IPK_XOVLY
					txtmap.f1 = TXTHDRSIZ+
				((magic==0444)?XOVLHDRSIZ:OVLHDRSIZ);
#else
					txtmap.f1 = TXTHDRSIZ+OVLHDRSIZ;
#endif  /*IPK_XOVLY*/
					txtmap.bo = round(txtsiz, TXTRNDSIZ);
					txtmap.eo = 0;
					txtmap.fo = 0;
#ifdef  IPK_XOVLY
					FOR ovly = 0;
			    ovly < ((magic==0444)?31:7); ovly++
#else
					FOR ovly = 0; ovly < 7; ovly++
#endif  /*IPK_XOVLY*/
					DO      ovloff[ovly] = ovlsiz + txtsiz
#ifdef  IPK_XOVLY
							+TXTHDRSIZ+
				((magic==0444)?XOVLHDRSIZ:OVLHDRSIZ);
#else
							+TXTHDRSIZ+OVLHDRSIZ;
#endif  /*IPK_XOVLY*/
						ovlsiz += ovlseg.ov[ovly];
					OD
#ifdef  IPK_XOVLY
					IF magic == 0430 ORF magic == 0444
#else
					IF magic == 0430
#endif  /*IPK_XOVLY*/
					THEN    txtmap.b2 =
						round(txtmap.bo+(long)ovlseg.max, TXTRNDSIZ);
					ELSE    txtmap.b2 = 0;
					FI
#ifdef  IPK_XOVLY
					txtmap.f2 = TXTHDRSIZ+
				((magic==0444)?XOVLHDRSIZ:OVLHDRSIZ)+
				 txtsiz+ovlsiz;
					symbas += ovlsiz+
				((magic==0444)?XOVLHDRSIZ:OVLHDRSIZ);
					IF magic == 0444
					THEN xoverlay = 1;
					FI
#else
					txtmap.f2 = TXTHDRSIZ+OVLHDRSIZ+txtsiz+ovlsiz;
					symbas += ovlsiz+OVLHDRSIZ;
#endif  /*IPK_XOVLY*/
					txtmap.e2 = txtmap.b2 + datsiz;
					overlay = 1;
					break;
				FI

			default:        magic = 0;
					txtsiz = 0;
					datsiz = 0;
					bss = 0;
					symnum = 0;
					entrypt = 0;
					relflg = 0;
					symbas = 0;
		}
		datbas = txtmap.b2;
		IF relflg!=1 THEN symbas =<< 1; FI
		symbas += TXTHDRSIZ;

		/* set up symvec */
		symvec=sbrk(shorten((1+symnum))*sizeof (SYMSLAVE));
		IF (symptr=symvec)==-1
		THEN    printf("%s\n",ediag(BADNAM,R_BADNAM));
			symptr=symvec=sbrk(sizeof (SYMSLAVE));
		ELSE if (symnum != 0) {
			symset();
			WHILE (symp=symget()) ANDF errflg==0
			DO  symptr->valslave=symp->symv;
			    symptr->typslave=SYMTYPE(symp->symf);
			    symptr->ovlslave = symp->ovnumb;
			    symptr++;
			OD
		    }
		FI
		symptr->typslave=ESYM;
	FI
	IF magic==0 THEN txtmap.e1=maxfile; FI
}


setcor()
{
	fcor=getfile(corfil,2);
	datmap.ufd=fcor;
	IF kernel ANDF (lseek(fcor, 0300L, 0),
	   read(fcor, &corhdr[KR0], (KA6-KR0+1)*sizeof(POS)) ==
				    (KA6-KR0+1)*sizeof(POS)) ORF
	   !kernel ANDF read(fcor, corhdr, 1024) == 1024 ANDF
	   (ctob(((U *)corhdr)->u_usize) <= 1024 ORF
	   read(fcor, &corhdr[512], ctob(((U *)corhdr)->u_usize)-1024)
		   == ctob(((U *)corhdr)->u_usize)-1024)
	THEN
		IF !kernel
		THEN    txtsiz = corhdr->u_tsize << 6;
			datsiz = corhdr->u_dsize << 6;
			stksiz = corhdr->u_ssize << 6;
			datmap.f1 = ctob(((U *)corhdr)->u_usize);
			datmap.b2 = maxstor-stksiz;
			datmap.e2 = maxstor;
		ELSE    datsiz = round(datsiz+bss,64L);
			stksiz = 02000L;
			datmap.f1 = 0;
			datmap.b2 = 0140000L;
			datmap.e2 = 0142000L;
		FI
		switch (magic)
		{
			INT ovly;

			case 0407:
				datmap.b1 = 0;
				datmap.e1 = txtsiz+datsiz;
				IF kernel
				THEN    datmap.f2 = (long)corhdr[KA6] *
						0100L;
				ELSE    datmap.f2 = ctob(((U *)corhdr)->u_usize)+txtsiz+datsiz;
				FI
				break;

			case 0410:
				datmap.b1 = round(txtsiz, TXTRNDSIZ);
				datmap.e1 = datmap.b1+datsiz;
				IF kernel
				THEN    datmap.b1 = 0;
					datmap.f2 = (long)corhdr[KA6] *
						0100L;
				ELSE
					datmap.f2 = datsiz+ctob(((U *)corhdr)->u_usize);
				FI
				break;

			case 0405:
			case 0411:
			case 0431:
				datmap.b1 = 0;
				datmap.e1 = datsiz;
				IF kernel
				THEN datmap.f2 = (long)corhdr[KA6] *
					0100L;
				ELSE datmap.f2 = datsiz+ctob(((U *)corhdr)->u_usize);
				FI
				break;

			case 0430:
#ifdef  IPK_XOVLY
			case 0444:
#endif  /*IPK_XOVLY*/
				datmap.b1 = round(round(txtsiz,
					TXTRNDSIZ)+ovlseg.max,
					TXTRNDSIZ);
				datmap.e1 = datmap.b1+datsiz;
				IF kernel
				THEN    datmap.b1 = 0;
					datmap.f2 = (long)corhdr[KA6] *
						0100L;
				ELSE    datmap.f2 = datsiz+ctob(((U *)corhdr)->u_usize);
				FI
				break;

			default:
				magic = 0;
				datmap.b1 = 0;
				datmap.e1 = maxfile;
				datmap.f1 = 0;
				datmap.b2 = 0;
				datmap.e2 = 0;
				datmap.f2 = 0;
		}
		IF kernel THEN
			char usize;

			lseek (fcor, datmap.f2 +
			      (POS) &((U *)0)->u_usize, 0);
			IF read(fcor, &usize, sizeof(usize)) == sizeof(usize)
			THEN
				stksiz = ctob(usize);
				if (stksiz < 1024) stksiz = 1024;
				else if (stksiz > 2048) stksiz = 2048;
				datmap.e2 = datmap.b2 + stksiz;
			FI

			/* Fill kernel overlay segment register values tab */
			if( magic == 0430 || magic == 0431 || magic == 0444 ) {
				int ovasiz = (magic==0444)?64: 16;

				/*
				 * Read ova from loc 01000
				 */
				lseek(fcor, 01000l, 0);
				if( read(fcor, kern_pars, ovasiz) != ovasiz )
					printf(ediag("can not read ova\n",
						    "не могу прочитать ova\n"));
			}
		FI
		datbas = datmap.b1;
		if (!kernel) {
		    if (magic ANDF magic!=corhdr[0].u_exdata.ux_mag)
			printf("%s\n",ediag(DIFMAG,R_DIFMAG));
		    else if (magic) {
			  register POS ar0;

			  ar0 = ((U *)corhdr)->u_ar0;
			  if ( (ar0 >  ((POS)0140000)                                         ) ANDF
			       (ar0 < (((POS)0140000) + (POS)(ctob(((U *)corhdr)->u_usize)) ) ) ANDF
			      !(ar0&01) )
				uar0 = ar0 - ((POS)0140000) + (POS)corhdr;
			  if (overlay) {
				startov = ((U *)corhdr)->u_ovdata.uo_curov;
				var[VARC] = (long)startov;
				setovmap(startov);
			}
		    }
			/* else dig out __ovno if overlaid? */
		    else printf("%s\n",ediag(BADFIL,R_BADFIL));
		}
	ELSE    datmap.e1 = maxfile;
	FI
}

create(f)
STRING  f;
{	int fd;
	IF (fd=creat(f,0644))>=0
	THEN close(fd); return(open(f,wtflag));
	ELSE return(-1);
	FI
}

getfile(filnam,cnt)
STRING	filnam;
{
	REG INT		fsym;

	IF !eqstr("-",filnam)
	THEN	fsym=open(filnam,wtflag);
		IF fsym<0 ANDF argcount>cnt
		THEN	IF wtflag
			THEN	fsym=create(filnam);
			FI
			IF fsym<0
			THEN printf(ediag("cannot open `%s'\n",
					  "нельзя открыть `%s'\n"),filnam);
			FI
		FI
	ELSE	fsym = -1;
	FI
	return(fsym);
}
@


1.2
log
@В случае ядра регистры читаются из адреса 0300,
размер стека читается из структуры user.
Константа 0140000 должна быть unsigned.
@
text
@d4 7
a10 2
 *	UNIX debugger
 * $Log:	setup.c,v $
d13 1
a13 1
 * 
d23 20
a42 20
MAP		txtmap;
MAP		datmap;
SYMSLAVE	*symvec;
INT		wtflag;
INT		kernel;
INT		fcor;
INT		fsym;
L_INT		maxfile;
L_INT		maxstor;
L_INT		txtsiz;
L_INT		datsiz;
L_INT		bss;
L_INT		datbas;
L_INT		stksiz;
STRING		errflg;
INT		magic;
L_INT		symbas;
L_INT		symnum;
L_INT		entrypt;
L_INT		var[];
d45 2
a46 2
INT		argcount;
INT		signo;
d50 2
a51 2
STRING		symfil	"a.out";
STRING		corfil	"core";
d64 2
a65 2
OVLVEC		ovlseg;
L_INT		ovloff[8];
d67 4
a70 4
#define OVLHDRSIZ	(sizeof(ovlseg))
L_INT		ovlsiz;
OVTAG		startov;
int		overlay;
d72 1
a72 1
#define TXTHDRSIZ	(sizeof(TXTHDR))
d74 1
a74 1
#define HBIT	0100
d76 2
d80 4
a83 4
	INT		relflg;
	SYMSLAVE	*symptr;
	SYMPTR		symp;
	TXTHDR		txthdr;
d88 1
a88 1
	THEN	magic=txthdr[0];
d135 1
a135 1
				THEN	txtmap.b1 = 0;
d152 1
a152 1
					DO	ovloff[ovly] = ovlsiz + txtsiz 
d166 1
a166 1
					THEN	txtmap.b2 =
d168 1
a168 1
					ELSE	txtmap.b2 = 0;
d188 1
a188 1
			default:	magic = 0;
d235 1
a235 1
		THEN	txtsiz = corhdr->u_tsize << 6;
d241 1
a241 1
		ELSE	datsiz = round(datsiz+bss,64L);
d255 1
a255 1
				THEN	datmap.f2 = (long)corhdr[KA6] *
d294 1
a294 1
				THEN	datmap.b1 = 0;
d322 13
d350 1
a350 1
			  	var[VARC] = (long)startov;
d354 1
a354 1
		 	/* else dig out __ovno if overlaid? */
d357 1
a357 1
	ELSE	datmap.e1 = maxfile;
d362 1
a362 1
STRING	f;
@


1.1
log
@Initial revision
@
text
@d5 4
a8 1
 * $Log$
d219 4
a222 1
	IF read(fcor, corhdr, 1024) == 1024 ANDF
d257 7
a263 1
				datmap.f2 = datsiz+ctob(((U *)corhdr)->u_usize);
d274 1
a274 1
			       ELSE datmap.f2 = datsiz+ctob(((U *)corhdr)->u_usize);
d303 13
d324 2
a325 2
			  if ( (ar0 >  0140000                                         ) ANDF
			       (ar0 < (0140000 + (POS)(ctob(((U *)corhdr)->u_usize)) ) ) ANDF
d327 1
a327 1
				uar0 = ar0 - 0140000 + (unsigned)corhdr;
@
