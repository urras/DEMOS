head     1.5;
access   ;
symbols  ;
locks    ;
comment  @ * @;


1.5
date     88.09.17.15.12.51;  author ache;  state Exp;
branches ;
next     1.4;

1.4
date     88.09.16.14.54.34;  author ache;  state Exp;
branches ;
next     1.3;

1.3
date     88.09.15.23.46.01;  author ache;  state Exp;
branches ;
next     1.2;

1.2
date     88.09.14.18.56.26;  author ache;  state Exp;
branches ;
next     1.1;

1.1
date     88.01.05.18.38.27;  author andrew;  state Exp;
branches ;
next     ;


desc
@
adb
@


1.5
log
@Исправлено считывание плавающих регистров.
@
text
@#
/*
 *
 *	UNIX debugger
 * $Log:	runpcs.c,v $
 * Revision 1.4  88/09/16  14:54:34  ache
 * Правлена работа с режимами tty.
 * 
 * Revision 1.3  88/09/15  23:46:01  ache
 * Работа с буфером вывода по новому, sgtty на входной файл.
 * 
 * Revision 1.2  88/09/14  18:56:26  ache
 * Константа 0140000 должна быть unsigned
 * 
 * Revision 1.1  88/01/05  18:38:27  andrew
 * Initial revision
 * 
 */

#include "defs.h"


MSG             NOFORK,R_NOFORK;
MSG             ENDPCS,R_ENDPCS;
MSG             BADWAIT,R_BADWAIT;

CHAR		*lp;
INT		sigint;
INT		sigqit;

/* breakpoints */
BKPTR		bkpthead;

REGLIST		reglist[];

CHAR		lastc;
POS		corhdr[];
POS		*uar0;
int		overlay;
#ifdef  IPK_XOVLY
int             xoverlay;
#endif  /*IPK_XOVLY*/
OVTAG		curov;

INT		fcor;
INT		fsym;
STRING		errflg;
INT		errno;
INT		signo;
INT             infile;

L_INT		dot;
STRING		symfil;
INT		wtflag;
INT		pid;
L_INT		expv;
INT		adrflg;
L_INT		loopcnt;
L_INT		var[];





/* service routines for sub process control */

getsig(sig)
{	return(expr(0) ? shorten(expv) : sig);
}

INT		userpc=1;

runpcs(runmode, execsig)
{
	INT		rc;
	REG BKPTR	bkpt;
	IF adrflg
	THEN userpc=shorten(dot);
	FI
	if (overlay)
		choverlay(((U *)corhdr)->u_ovdata.uo_curov);
	printf(ediag("%s: running\n","%s: запущен\n"), symfil);

	WHILE (loopcnt--)>0
	DO
#ifdef DEBUG
		printf("\ncontinue %d %d\n",userpc,execsig);
#endif
		stty(infile,&usrtty);
		ptrace(runmode,pid,userpc,execsig);
		bpwait(); chkerr(); readregs();

		/*look for bkpt*/
		IF signo==0 ANDF (bkpt=scanbkpt(uar0[PC]-2))
		THEN /*stopped at bkpt*/
		     userpc=uar0[PC]=bkpt->loc;
		     IF bkpt->flag==BKPTEXEC
			ORF ((bkpt->flag=BKPTEXEC, command(bkpt->comm,':')) ANDF --bkpt->count)
		     THEN execbkpt(bkpt); execsig=0; loopcnt++;
			  userpc=1;
		     ELSE bkpt->count=bkpt->initcnt;
			  rc=1;
		     FI
		ELSE rc=0; execsig=signo; userpc=1;
		FI
	OD
	return(rc);
}

endpcs()
{
	REG BKPTR	bkptr;
	IF pid
	THEN ptrace(EXIT,pid,0,0); pid=0; userpc=1;
	     FOR bkptr=bkpthead; bkptr; bkptr=bkptr->nxtbkpt
	     DO IF bkptr->flag
		THEN bkptr->flag=BKPTSET;
		FI
	     OD
	FI
}

setup()
{
	close(fsym); fsym = -1;
	IF (pid = fork()) == 0
	THEN ptrace(SETTRC,0,0,0);
	     signal(SIGINT,sigint); signal(SIGQUIT,sigqit);
	     doexec(); exit(0);
	ELIF pid == -1
	THEN error(ediag(NOFORK,R_NOFORK));
	ELSE
	     register POS ar0;

	     bpwait();
	     fsym=open(symfil,wtflag);
	     IF errflg
	     THEN printf(ediag("%s: cannot execute\n","%s: нельзя выполнить\n"),symfil);
		  endpcs(); error(0);
	     FI
	     ar0 = ptrace(RUREGS, pid, &(((U *)0)->u_ar0), 0);
	     uar0 = ar0 - ((POS)0140000) + (POS)corhdr;
	     readregs(); lp[0]=EOR; lp[1]=0;
	FI
}

execbkpt(bkptr)
BKPTR	bkptr;
{	INT		bkptloc;
#ifdef DEBUG
	printf("exbkpt: %d\n",bkptr->count);
#endif
	bkptloc = bkptr->loc;
	ptrace(WIUSER,pid,bkptloc,bkptr->ins);
	stty(infile,&usrtty);
	ptrace(SINGLE,pid,bkptloc,0);
	bpwait(); chkerr();
	ptrace(WIUSER,pid,bkptloc,BPT);
	bkptr->flag=BKPTSET;
}


doexec()
{
	STRING		argl[MAXARG];
	CHAR		args[LINSIZ];
	STRING		p, *ap, filnam;
	ap=argl; p=args;
	*ap++=symfil;
	REP	IF rdc()==EOR THEN break; FI
		*ap = p;
		WHILE lastc!=EOR ANDF lastc!=SP ANDF lastc!=TB DO *p++=lastc; readchar(); OD
		*p++=0; filnam = *ap+1;
		IF **ap=='<'
		THEN	close(0);
			IF open(filnam,0)<0
			THEN    printf(ediag("%s: cannot open\n","%s: нельзя открыть\n"),filnam); exit(0);
			FI
		ELIF **ap=='>'
		THEN	close(1);
			IF creat(filnam,0666)<0
			THEN    printf(ediag("%s: cannot create\n","%s: нельзя создать\n"),filnam); exit(0);
			FI
		ELSE	ap++;
		FI
	PER lastc!=EOR DONE
	*ap++=0;
	execv(symfil, argl);
}

BKPTR	scanbkpt(adr)
{
	REG BKPTR	bkptr;
	FOR bkptr=bkpthead; bkptr; bkptr=bkptr->nxtbkpt
	DO IF bkptr->flag ANDF bkptr->loc==adr ANDF 
	  (bkptr->ovly == 0 || bkptr->ovly==curov)
	   THEN break;
	   FI
	OD
	return(bkptr);
}

delbp()
{
	REG BKPTR	bkptr;
	FOR bkptr=bkpthead; bkptr; bkptr=bkptr->nxtbkpt
	DO IF bkptr->flag
	   THEN del1bp(bkptr);
	   FI
	OD
}

del1bp(bkptr)
BKPTR bkptr;
{
	if (bkptr->ovly)
		choverlay(bkptr->ovly);
	ptrace(WIUSER,pid,bkptr->loc,bkptr->ins);
}

/* change overlay in subprocess */
choverlay(ovno)
OVTAG ovno;
{
	errno = 0;
#ifdef  IPK_XOVLY
	if (overlay && pid && ovno>0 && ovno<=31 && (xoverlay || ovno<=7))
#else
	if (overlay && pid && ovno>0 && ovno<=7)
#endif  /*IPK_XOVLY*/
		ptrace(WUREGS,pid,&((U *)0->u_ovdata.uo_curov),ovno);
	IF errno
	THEN printf(ediag("cannot change to overlay %d\n",
			  "не могу переключиться на оверлей %d\n"),ovno);
	FI
}

setbp()
{
	REG BKPTR	bkptr;

	FOR bkptr=bkpthead; bkptr; bkptr=bkptr->nxtbkpt
	DO IF bkptr->flag
	   THEN set1bp(bkptr);
	   FI
	OD
}
set1bp(bkptr)
BKPTR bkptr;
{
	REG INT		a;
	a = bkptr->loc;
	if (bkptr->ovly)
		choverlay(bkptr->ovly);
	bkptr->ins = ptrace(RIUSER, pid, a, 0);
	ptrace(WIUSER, pid, a, BPT);
	IF errno
	THEN prints(ediag("cannot set breakpoint: ","не могу установить точку останова: "));
	     psymoff(leng(bkptr->loc),ISYM,"\n");
	FI
}

bpwait()
{
	REG INT w;
	INT stat;

	signal(SIGINT, 1);
	WHILE (w = wait(&stat))!=pid ANDF w != -1 DONE
	signal(SIGINT,sigint);
	if(isatty(infile)) {
	    gtty(infile,&usrtty);
	    stty(infile,&adbtty);
	}
	IF w == -1
	THEN pid=0;
	     errflg=ediag(BADWAIT,R_BADWAIT);
	ELIF (stat & 0177) != 0177
	THEN IF signo = stat&0177
	     THEN sigprint();
	     FI
	     IF stat&0200
	     THEN prints(ediag(" - core dumped"," - память дампирована"));
		  close(fcor);
		  setcor();
	     FI
	     pid=0;
	     errflg=ediag(ENDPCS,R_ENDPCS);
	ELSE signo = stat>>8;
	     IF signo!=SIGTRAP
	     THEN sigprint();
	     ELSE signo=0;
	     FI
	     newline();
	FI
}

readregs()
{
	/*get REG values from pcs*/
	REG POS i;
	FOR i=0; i<NREG; i++
	DO uar0[reglist[i].roffs] =
		    ptrace(RUREGS, pid, (POS)&uar0[reglist[i].roffs]-
			(POS)corhdr, 0);
	OD
	/* if overlaid, get ov */
	IF overlay
	THEN	OVTAG ovno;
		ovno = ptrace(RUREGS, pid,
		    &(((U *)0)->u_ovdata.uo_curov),0);
		var[VARC] = ovno;
		((U *)corhdr)->u_ovdata.uo_curov = ovno;
		setovmap(ovno);
	FI

#ifndef NONFP
	/* REALing poINT		*/
	FOR i=FROFF; i<FRLEN+FROFF; i+=sizeof(*corhdr)
	DO corhdr[i/sizeof(*corhdr)] = ptrace(RUREGS,pid,i,0); OD
#endif
}


@


1.4
log
@Правлена работа с режимами tty.
@
text
@d6 3
d301 1
a301 1
	REG i;
d319 2
a320 2
	FOR i=FROFF; i<FRLEN+FROFF; i++
	DO corhdr[i] = ptrace(RUREGS,pid,i,0); OD
@


1.3
log
@Работа с буфером вывода по новому, sgtty на входной файл.
@
text
@d6 3
d268 4
a271 2
	gtty(infile,&usrtty);
	stty(infile,&adbtty);
@


1.2
log
@Константа 0140000 должна быть unsigned
@
text
@d6 3
d44 1
d75 1
a75 1
		choverlay((U *)corhdr->u_ovdata.uo_curov);
d83 1
a83 1
		stty(0,&usrtty);
d136 1
a136 1
	     uar0 = ar0 - ((POS)0140000) + (unsigned)corhdr;
d149 1
a149 1
	stty(0,&usrtty);
d265 2
a266 2
	gtty(0,&usrtty);
	stty(0,&adbtty);
d286 1
a286 1
	     flushbuf();
d296 2
a297 2
		    ptrace(RUREGS, pid, (int)&uar0[reglist[i].roffs]-
			(int)&corhdr, 0);
d303 1
a303 1
		    &(((struct user *)0)->u_ovdata.uo_curov),0);
@


1.1
log
@Initial revision
@
text
@d5 4
a8 1
 * $Log$
d132 1
a132 1
	     uar0 = ar0 - 0140000 + (unsigned)corhdr;
@
