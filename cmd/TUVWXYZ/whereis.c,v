head     1.2;
access   ;
symbols  ;
locks    root:1.2;
comment  @ * @;


1.2
date     88.09.27.13.32.11;  author root;  state Exp;
branches ;
next     1.1;

1.1
date     88.05.03.19.56.34;  author root;  state Exp;
branches ;
next     ;


desc
@
@


1.2
log
@Правлено под новое расположение каталогов.
@
text
@/*
**
** Эта штука добавляется в исходный файл перед
** запуском rcs               Давидов 04.28.88
**
** $Header: whereis.c,v 1.1 88/05/03 19:56:34 root Exp $
** $Log:        whereis.c,v $
 * Revision 1.1  88/05/03  19:56:34  root
 * Initial revision
 *
*/

# ifndef        lint
/* NOXSTR  */
static char     Rcs_id[] = "$Header: whereis.c,v 1.1 88/05/03 19:56:34 root Exp $";
/* YESXSTR */
# endif         lint

/*
**      Команда: Выдача местоположения компоненты.
**
**      whereis [ -sbmu ] [ -SBM справочник ... -f ] имя...
**
**      Стандартное местоположение в системе:  /usr/bin
**
**      Метод сборки:  cc -O -n -s
**
*/


#include <sys/types.h>
#include <stdio.h>
#include <ctype.h>
#include <sys/dir.h>
#include <whoami.h>

static char *bindirs[] = {
    "/etc",

    "/bin",
    "/usr/bin",
    "/usr/ucb/bin",
    "/usr/local/bin",
    "/usr/new/bin",
    "/usr/old/bin",
    "/usr/games",

    "/lib",
    "/usr/lib",
    "/usr/ucb/lib",
    "/usr/local/lib",
    "/usr/new/lib",
    "/usr/old/lib",

    "/usr/include",
    "/usr/include/sys",
    "/usr/ucb/include",
    "/usr/local/include",
    "/usr/new/include",
    "/usr/old/include",
    0
};
static char *mandirs[] = {
    "/usr/man/man1",
    "/usr/man/man2",
    "/usr/man/man3",
    "/usr/man/man4",
    "/usr/man/man5",
    "/usr/man/man6",
    "/usr/man/man7",
    "/usr/man/man8",
    "/usr/man/mann",
    "/usr/man/manl",
    "/usr/man/manp",
    "/usr/man/manu",
    "/usr/man/cat1",
    "/usr/man/cat2",
    "/usr/man/cat3",
    "/usr/man/cat4",
    "/usr/man/cat5",
    "/usr/man/cat6",
    "/usr/man/cat7",
    "/usr/man/cat8",
    0
};
static char *srcdirs[] = {
    "/usr/src/cmd",
    "/usr/src/cmd/etc",
    "/usr/src/games",
    "/usr/src/libc/gen",
    "/usr/src/libc/stdio",
    "/usr/src/libc/sys",
    "/usr/src/new",
    "/usr/src/old",
    "/usr/src/local",
    "/usr/src/undoc",
    "/usr/src/cmd/RCS",
    "/usr/src/cmd/etc/RCS",
    "/usr/src/games/RCS",
    "/usr/src/libc/gen/RCS",
    "/usr/src/libc/stdio/RCS",
    "/usr/src/libc/sys/RCS",
    "/usr/src/new/RCS",
    "/usr/src/old/RCS",
    "/usr/src/local/RCS",
    "/usr/src/undoc/RCS",
    "/usr/src/unused",
    0
};

char    sflag = 1;
char    bflag = 1;
char    mflag = 1;
char  **Sflag;
int     Scnt;
char  **Bflag;
int     Bcnt;
char  **Mflag;
int     Mcnt;
char    uflag;

main (argc, argv)
int     argc;
char   *argv[];
{

#ifdef CORY
    if (getuid () == 0)
	nice (-20);
    if (((getuid () >> 8) & 0377) > 10)
	setuid (getuid ());
#endif
    argc--, argv++;
    if (argc == 0) {
usage: 
	fprintf (stderr, "whereis [ -sbmu ] [ -SBM dir ... -f ] name...\n");
	exit (1);
    }
    do
	if (argv[0][0] == '-') {
	    register char  *cp = argv[0] + 1;
	    while (*cp)
		switch (*cp++) {

		    case 'f': 
			break;

		    case 'S': 
			getlist (&argc, &argv, &Sflag, &Scnt);
			break;

		    case 'B': 
			getlist (&argc, &argv, &Bflag, &Bcnt);
			break;

		    case 'M': 
			getlist (&argc, &argv, &Mflag, &Mcnt);
			break;

		    case 's': 
			zerof ();
			sflag++;
			continue;

		    case 'u': 
			uflag++;
			continue;

		    case 'b': 
			zerof ();
			bflag++;
			continue;

		    case 'm': 
			zerof ();
			mflag++;
			continue;

		    default: 
			goto usage;
		}
	    argv++;
	}
	else
	    lookup (*argv++);
    while (--argc > 0);
}

getlist (argcp, argvp, flagp, cntp)
char ***argvp;
int    *argcp;
char ***flagp;
int    *cntp;
{

    (*argvp)++;
    *flagp = *argvp;
    *cntp = 0;
    for ((*argcp)--; *argcp > 0 && (*argvp)[0][0] != '-'; (*argcp)--)
	(*cntp)++, (*argvp)++;
    (*argcp)++;
    (*argvp)--;
}


zerof () {

    if (sflag && bflag && mflag)
	sflag = bflag = mflag = 0;
}
int     count;
int     print;


lookup (cp)
register char  *cp;
{
    register char  *dp;

    for (dp = cp; *dp; dp++)
	continue;
    for (; dp > cp; dp--) {
	if (*dp == '.') {
	    *dp = 0;
	    break;
	}
    }
    for (dp = cp; *dp; dp++)
	if (*dp == '/')
	    cp = dp + 1;
    if (uflag) {
	print = 0;
	count = 0;
    }
    else
	print = 1;
again: 
    if (print)
	printf ("%s:", cp);
    if (sflag) {
	looksrc (cp);
	if (uflag && print == 0 && count != 1) {
	    print = 1;
	    goto again;
	}
    }
    count = 0;
    if (bflag) {
	lookbin (cp);
	if (uflag && print == 0 && count != 1) {
	    print = 1;
	    goto again;
	}
    }
    count = 0;
    if (mflag) {
	lookman (cp);
	if (uflag && print == 0 && count != 1) {
	    print = 1;
	    goto again;
	}
    }
    if (print)
	printf ("\n");
}

looksrc (cp)
char   *cp;
{
    if (Sflag == 0) {
	find (srcdirs, cp);
    }
    else
	findv (Sflag, Scnt, cp);
}

lookbin (cp)
char   *cp;
{
    if (Bflag == 0)
	find (bindirs, cp);
    else
	findv (Bflag, Bcnt, cp);
}

lookman (cp)
char   *cp;
{
    if (Mflag == 0) {
	find (mandirs, cp);
    }
    else
	findv (Mflag, Mcnt, cp);
}

findv (dirv, dirc, cp)
char  **dirv;
int     dirc;
char   *cp;
{

    while (dirc > 0)
	findin (*dirv++, cp), dirc--;
}

find (dirs, cp)
char  **dirs;
char   *cp;
{

    while (*dirs)
	findin (*dirs++, cp);
}

findin (dir, cp)
char   *dir,
       *cp;
{
    register    FILE * d;
    struct direct   direct;

    d = fopen (dir, "r");
    if (d == NULL)
	return;
    while (fread (&direct, sizeof direct, 1, d) == 1) {
	if (direct.d_ino == 0)
	    continue;
	if (itsit (cp, direct.d_name)) {
	    count++;
	    if (print)
		printf (" %s/%.14s", dir, direct.d_name);
	}
    }
    fclose (d);
}

itsit (cp, dp)
register char  *cp,
               *dp;
{
    register int    i = 14;

    if (dp[0] == 's' && dp[1] == '.' && itsit (cp, dp + 2))
	return (1);
    while (*cp && *dp && *cp == *dp)
	cp++, dp++, i--;
    if (*cp == 0 && *dp == 0)
	return (1);
    while (isdigit (*dp))
	dp++;
    if (*cp == 0 && *dp++ == '.') {
	--i;
	while (i > 0 && *dp)
	    if (--i, *dp++ == '.')
		return (*dp++ == 'C' && *dp++ == 0);
	return (1);
    }
    return (0);
}
@


1.1
log
@Initial revision
@
text
@d6 5
a10 2
** $Header$
** $Log$
d15 1
a15 1
static char     Rcs_id[] = "$Header$";
d39 1
d42 4
d47 1
a48 1
    "/usr/ucb",
d50 11
a60 3
    "/usr/local",
    "/usr/new",
    "/usr/old",
d72 4
d107 1
@
