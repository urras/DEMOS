head     1.1;
access   ;
symbols  ;
locks    ;
comment  @ * @;


1.1
date     88.05.03.20.20.46;  author root;  state Exp;
branches ;
next     ;


desc
@
@



1.1
log
@Initial revision
@
text
@/*
**
** Эта штука добавляется в исходный файл перед
** запуском rcs               Давидов 04.28.88
**
** $Header$
** $Log$
*/

# ifndef        lint
/* NOXSTR  */
static char     Rcs_id[] = "$Header$";
/* YESXSTR */
# endif         lint
 
/*
 *      arrt  - программа, обслуживающая работу с архивом на дисках
 *              типа rx или rk, записанном в формате RT-11.
 *
 *      Вызов - arrt {txrd}[[0-5]cvkD] [имена файлов]
 *
 *      Параметры, взятые в квадратные скобки могут быть опущены.
 *
 *      Операции:
 *
 *              t - получение каталога файлов архива;
 *              x - чтение файлов из архива;
 *              r - запись файлов в архив;
 *              d - уничтожение файлов.
 *
 *      Модификаторы операций:
 *
 *              c - создание нового архива, используется только в ре-
 *                  жиме 'r';
 *              k - задание диска типа rk. По умолчанию, используется
 *                  rx;
 *              v - в этом режиме arrt  выдает более подробную информацию
 *                  о своей работе;
 *            0-5 - задание номера устройства, по умолчанию используется
 *                  /dev/rx0.
 *              D - перенаначение устройства по умолчанию
 *                  (может быть обычный файл).
 *                   ....D file
 */

#include <sys/types.h>
#include <sys/stat.h>
#include <sgtty.h>
#include <time.h>
#include <stdio.h>
#include <ediag.h>

extern short _ediag;

struct rt_dat {                 /* Дата создания файла. */
unsigned int     rt_yr:5;       /* Год от 1972.         */
unsigned int     rt_dy:5;       /* день года.           */
unsigned int     rt_mo:5;       /* месяц года.          */
};

struct rt_ent {                 /* Описатель файла.                     */
	char  rt_pad;           /* Неиспользуется.                      */
	char  rt_stat;          /* Тип файла или конец сегмента.        */
	int   rt_name[3];       /* Полное имя файла в коде RADIX-50.    */
	int   rt_len;           /* Длина файла в блоках по 512.         */
	char  rt_chan;          /* Исползуется только для temp файлов.  */
	char  rt_job;           /* Исползуется только для temp файлов.  */
	struct rt_dat rt_date;  /* Дата создания файла.                 */
};

struct rt_head {                /* Заголовок сегмента.                                          */
	int rt_numseg;          /* Число сформированных сегментов.                              */
	int rt_nxtseg;          /* Номер следующего логического сегмента.                       */
	int rt_lstseg;          /* Число открытых сегментов.                                    */
	int rt_entpad;          /* Число дополнительных слов в описателе файла.                 */
	int rt_stfile;          /* Номер блока, с которого начинаются файлы данного сегмента.   */
};

struct  rt_dir {                        /* Структура сегмента.  */
	struct rt_head  rt_axhead;      /* Заголовок сегмента.  */
	struct rt_ent   rt_ents[72];    /* Описатели файлов.    */
	char    _dirpad[6];             /* Неиспользуется.      */
};


			/* Типы файлов.         */
#define RT_TEMP 1       /* temporary файл.      */
#define RT_NULL 2       /* Пустой файл.         */
#define RT_FILE 4       /* Обычный файл.        */
#define RT_PROT 132     /* Фаил с кодом защиты  */
#define RT_ESEG 8       /* Конец сегмента.      */

#define RT_BLOCK        512     /* Стандартный размер блока.    */
#define RT_DIRSIZE      31      /* Максимальное число сегментов.*/
#define RT_DIR          sizeof (struct rt_dir)
#define RT_ENT          sizeof (struct rt_ent)
#define RT_HEAD         sizeof (struct rt_head)

extern struct rt_dir    rt_dir[RT_DIRSIZE];     /* Файловая система RT-11. */
extern char             *rt_endseg[RT_DIRSIZE]; /* Заполнение сегментов.   */
extern int              rt_entsiz;              /* Размер описателя файла. */
extern int              rt_lstent;              /* Конец сегмента.         */
extern int              russ;                   /* Признак русской диагностики  */
extern int              disk;                   /* Дискриптор устройства.  */
extern char             *val;                   /* Символы кода RADIX-50.  */
extern char             table[256];             /* Таблица перекодировки.  */
extern char             *defdev;                /* Имя устройтва.          */
extern char             *pname;                 /* Имя программы.          */
extern int              modify;                 /* Признак изменения fs.   */

typedef struct fldope {                 /* Описатель файла.             */
	int     nseg;                   /* Номер сегмента.              */
	int     startad;                /* Адрес начала файла.          */
	struct  rt_ent  *rtdope;        /* Полный описатель файла.      */
}
FLDOPE;

FLDOPE *lookup();

#define SURE    "Are you sure you want to make new filesystem?"
#define RSURE   "Вы уверены, что вы хотите создать новую файловую систему?"
#define DELF    "Are you sure you want to delete this file?"
#define RDELF   "Вы уверены, что вы хотите уничтожить этот файл?"
#define rt(p) ((struct rt_ent *)(p))
#define flag(c) (flg[(c) - 'a'])
#define FSRX    494
#define FSRK    4872
#define Ain1    03100
#define Ain2    050

static char    *opt     =       "[0-5]kcv";
static char    *man     =       "xtrd";
static char    *defdev  =       "/dev/rx0";

static char *val = " abcdefghijklmnopqrstuvwxyz$.@@0123456789";

static char table[] = {
29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29,
29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29,
 0, 29, 29, 29, 27, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29,
30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 29, 29, 29, 29, 29, 29,
29,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15,
16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 29, 29, 29, 29, 29,
29,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15,
16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 29, 29, 29, 29, 29,
29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29,
29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29,
 0, 29, 29, 29, 27, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29,
30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 29, 29, 29, 29, 29, 29,
29,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15,
16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 29, 29, 29, 29, 29,
29,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15,
16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 29, 29, 29, 29, 29
};

struct rt_dir   rt_dir[RT_DIRSIZE];
char            *rt_endseg[RT_DIRSIZE];
int             rt_lstent;
int             rt_entsiz;
int             russ;
int             disk;
int             modify = 0;
char            *pname;

long    lseek();
int     xcmd();
int     tcmd();
int     dcmd();
int     rcmd();
int     (*comfun)();
char    flg[26];
char    **namv;
int     namc;


main(argc, argv)
int argc;
char **argv;
{
	register char *cp;
	register i;
	struct stat inode;
	int fildes;
	fildes = fileno (stderr);
	pname = *argv;
	russ = !_ediag;
	argv++;
	argc--;
	if (argc < 1) usage();
	cp = *argv;
	argv++;
	argc--;
	for( ; *cp; cp++)
		switch(*cp) {
		case 'c':
			{
				char response[128];
				if (flag(*cp)) usage ();
				flag (*cp)++;
				*response = '\0';
				fprintf (stderr,(russ?RSURE:SURE));
				gets (response);
				if(*response != 'y' && *response != 'Y')
					exit(50);
			}
			modify = 1;
			continue;
		case 'v':
			if (flag(*cp)) usage ();
			flag (*cp)++;
			continue;
		case 'x':
			setcom(xcmd);
			continue;
		case 't':
			setcom(tcmd);
			continue;
		case 'r':
			setcom(rcmd);
			flag('r')++;
			continue;
		case 'd':
			setcom(dcmd);
			flag('d')++;
			continue;
		case 'k':
			if (flag ('k')) usage ();
			flag ('k')++;
			defdev[6] = *cp;
			continue;
		case '0':
		case '1':
		case '2':
		case '3':
		case '4':
		case '5':
			if (flag('a')) usage ();
			flag ('a')++;
			defdev[7] = *cp;
			continue;
		case 'D':
			defdev = *argv;
			argv++;
			argc--;
			break;
		default:
			fprintf(stderr, russ ? "%s: неизвестный параметр '%c'.\n":
				"%s: bad option `%c'\n",pname, *cp);
			exit(1);
		}
	namv = argv;
	namc = argc;
	if(comfun == 0) {
		fprintf(stderr, russ ? "%s: необходимо задание хотя бы одного из режимов [%s].\n":
			"%s: one of [%s] must be specified\n",pname, man);
		exit(1);
	}
	for (i = 0; i < namc; i++)
		if ((stat (namv[i],&inode)) == 0 && (inode.st_mode&S_IFREG) != S_IFREG) namv[i] = 0;
	rt_init ();
	(*comfun)();
	if (modify) rt_sync ();
	close (disk);
	exit(notfound ());
}

setcom(fun)
int (*fun)();
{
	if(comfun != 0) {
		fprintf(stderr, russ ? "%s: недотустимо двойное задание режимов [%s].\n":
			"%s: only one of [%s] allowed\n",pname, man);
		exit(1);
	}
	comfun = fun;
}

usage()
{
	fprintf(stderr, russ ? "Используйте: %s {%s}[%s] [файлы].\n":
		"usage: %s {%s}[%s] [files] ...\n",pname, man, opt);
	exit(1);
}

notfound()
{
	register i, n;
	n = 0;
	for(i=0; i<namc; i++)
		if(namv[i]) {
			fprintf(stderr, russ ? "%s: файл '%s' не обнаружен.\n":
				"%s: file '%s' isn't found\n",pname, namv[i]);
			n++;
		}
	return(n);
}

tcmd()
{
	FLDOPE *lookup(), *dope;
	int free, files, blocks;
	register char *de;
	register i;
	register struct rt_ent *rde;
	if(!namc) {
		for (i = 0; i != -1; i = rt_dir[i].rt_axhead.rt_nxtseg - 1) {
			files = free = blocks = 0;
			for (de = ((char *)&rt_dir[i].rt_ents[0]);
			     rt(de)->rt_stat != RT_ESEG; de += rt_entsiz) {
				rtls(rt(de));
				if (rt(de)->rt_stat == RT_NULL) free += rt(de)->rt_len;
				else {
					files++;
					blocks += rt(de)->rt_len;
				}
			}
			printf ("\n%d files, %d blocks \n",files,blocks);
			printf ("%d free blocks in directory segment %d.\n\n",free,i+1);
		}
	}
	else    for(i = 0; i < namc; i++) {
			if (namv[i]) if(dope = lookup(namv[i])) {
				rde = dope->rtdope;
				rtls(rde);
				namv[i] = 0;
				}
		}
}

rtls(de)
register struct rt_ent *de;
{
	register int ftype;
	char name[12];
	char filetype;

	filetype = ' ';
	ftype = de->rt_stat & 0377;
	if(flag('v'))
		switch (ftype) {
		case RT_PROT:
		case RT_TEMP:
			filetype = 'P';
			if (ftype == RT_TEMP) filetype = 'T';
		case RT_FILE:
			sunrad50(name,de->rt_name);
			printf("%-11.11s %c %02d.%02d.%02d  %d\n",name,
				filetype,
				de->rt_date.rt_dy,
				de->rt_date.rt_mo,
				(de->rt_date.rt_yr + 72),
				de->rt_len);
			break;
		case RT_NULL:
			printf("%-23.9s %d\n","<UNUSED>",de->rt_len);
			break;
		case RT_ESEG:
			return(0);
		}
	else {
		switch (ftype) {
		case RT_TEMP:
		case RT_PROT:
		case RT_FILE:
			sunrad50(name,de->rt_name);
			printf ("%s\n",name);
			break;
		case RT_ESEG:
			return(0);
		case RT_NULL:
			break;
		}
	}
	return(1);
}

xcmd()
{
	register char *de;
	char name[12];
	register int i;
	if(!namc)
		for (i = 0; i != -1; i = rt_dir[i].rt_axhead.rt_nxtseg - 1) {
			for (de = ((char*)&rt_dir[i].rt_ents[0]);
			     rt(de)->rt_stat != RT_ESEG; de += rt_entsiz) {
				sunrad50(name,rt(de)->rt_name);
				rtx(name);
			}
		}
	else    for (i = 0; i < namc; i++) {
			if (namv[i]) if (rtx (namv[i])) namv[i] = 0;
	}
}

rtx(name)
char *name;
{
	register FLDOPE *dope;
	FLDOPE *lookup();
	int startad, count;
	int file; 
	char buff[RT_BLOCK];
	if(dope = lookup(name)) {
		printf ("x - ");
		rtls(dope->rtdope);
		file = creat(name, 0666);
		if(file < 0) {
			fprintf (stderr,russ ? "%s: файл '%s' не удатся создать.\n":
				"%s: file '%s' cannot create.\n",pname,name);
			return (1);
		}
		startad = dope->startad;
		for (count = dope->rtdope->rt_len; count > 0; count--) {
			lread(startad,RT_BLOCK,buff);
			write(file,buff,RT_BLOCK);
			startad ++;
		}
		close(file);
		return(1);
	}
	return(0);
}

rt_init()
{
	register char *de;
	register i, dirnum;
	int fssize;
	int mode;
	if (flag('d') || flag('r')) mode = 2;
	else mode = 0;
	if((disk = open(defdev, mode)) < 0) {
		fprintf (stderr,russ ? "%s: %s не удается открыть.\n":
			"%s: %s cannot opened.\n",pname,defdev);
		exit(1);
	} 
	if (flag('c')) {
		if (flag('k')) {
			fssize = FSRK;
			rt_dir[0].rt_axhead.rt_numseg = 16;
			rt_dir[0].rt_axhead.rt_stfile = 23;
		}
		else {
			fssize = FSRX;
			rt_dir[0].rt_axhead.rt_numseg = 4;
			rt_dir[0].rt_axhead.rt_stfile = 15;
		}
		rt_dir[0].rt_axhead.rt_nxtseg = 0;
		rt_dir[0].rt_axhead.rt_lstseg = 1;
		rt_dir[0].rt_axhead.rt_entpad = 0;
		rt_dir[0].rt_ents[0].rt_stat = RT_NULL;
		rt_dir[0].rt_ents[0].rt_len = fssize - rt_dir[0].rt_axhead.rt_stfile;
		rt_dir[0].rt_ents[1].rt_stat = RT_ESEG;
		rt_entsiz = RT_ENT;
		rt_lstent = (RT_DIR-RT_HEAD)/rt_entsiz*rt_entsiz;
		rt_endseg[0] = (char *)&rt_dir[0].rt_ents[1];
		return;
	}
	lread(6,RT_DIR,&rt_dir[0]);
	dirnum = rt_dir[0].rt_axhead.rt_numseg;
	if (dirnum > RT_DIRSIZE || dirnum < 1) {
		fprintf (stderr,russ ? "%s: %s не является файловой системой RT-11.\n":
			"%s: %s not RT-11 file system.\n",pname,defdev);
		exit(1);
	}
	for (i=1; i<dirnum; i++) lread((6+i*2),RT_DIR,&rt_dir[i]);
	rt_entsiz = 2*rt_dir[0].rt_axhead.rt_entpad + RT_ENT;
	rt_lstent = (RT_DIR-RT_HEAD)/rt_entsiz*rt_entsiz;
	for (i=0; i != -1; i = rt_dir[i].rt_axhead.rt_nxtseg - 1) {
		for(de = ((char *)&rt_dir[i].rt_ents[0]);
		    rt(de)->rt_stat != RT_ESEG; de += rt_entsiz)
			switch ((rt(de)->rt_stat & 0377)) {
			case RT_FILE:
			case RT_PROT:
			case RT_TEMP:
			case RT_NULL:
				     continue;
			default:
				fprintf (stderr,russ ? "%s: %s не является файловой системой RT-11.\n":
					"%s: %s not RT-11 file system.\n",pname,defdev);
				exit (1);
			}
		rt_endseg[i] = de;
	}
}

rt_sync ()
{
	register char *de , *workp;
	register i;
	for (i=0; i != -1; i = rt_dir[i].rt_axhead.rt_nxtseg - 1) {
		for (de = (char *)&rt_dir[i].rt_ents[0];
		     rt(de)->rt_stat != RT_ESEG; de += rt_entsiz) {
			    if (rt(de)->rt_stat==RT_NULL &&
			    rt(de+rt_entsiz)->rt_stat==RT_NULL) {
				rt(de+rt_entsiz)->rt_len += rt(de)->rt_len;
				for (workp = de; rt(workp)->rt_stat != RT_ESEG; workp += rt_entsiz)
					*rt(workp) = *rt(workp+rt_entsiz);
				de -= rt_entsiz;
			}
		}
		lwrite((6+i*2),RT_DIR,&rt_dir[i]);
	}
}

static FLDOPE result;

FLDOPE *lookup(name)
char * name;
{
	unsigned int rname[3];
	register char *de;
	int i;
	register index;
	srad50(name,rname);
/*
 *  Поиск файла по имени.
 */
	for (i = 0; i != -1; i = rt_dir[i].rt_axhead.rt_nxtseg - 1) {
		index = 0;
		for(de = ((char*)&rt_dir[i].rt_ents[0]);
		    rt(de)->rt_stat != RT_ESEG; de += rt_entsiz) {
			switch((rt(de)->rt_stat & 0377)) {
				case RT_FILE:
				case RT_PROT:
				case RT_TEMP:
					if(samename(rname,rt(de)->rt_name))
						goto found;
				case RT_NULL:
					index += rt(de)->rt_len;
			}
		}
	}
	return((FLDOPE *) 0);
found:	
	result.nseg = i;
	result.startad = rt_dir[i].rt_axhead.rt_stfile + index;
	result.rtdope = rt(de);
	return(&result);
}

static
samename(a,b)
unsigned int a[3],b[3];
{
	return( a[0]==b[0] && a[1]==b[1] && a[2]==b[2] );
}

rad50(cp,out)
register char *cp;
unsigned int *out;
{
	register index;
	register temp;
	for(index = 0;*cp; index++) {
		temp = Ain1 * table[*cp++ & 0377];
		if(*cp!=0) {
			temp += Ain2 * table[*cp++ & 0377];
			if(*cp!=0) 
				temp += table[*cp++ & 0377];
		}
		out[index] = temp;
	}
}

#define reduce(x,p,q)   (x = v[(unsigned)p/q], p = (unsigned) p%q);

unrad50(count,in,cp)
unsigned int *in;
register char *cp;
{
	register i, temp; 
	register char *v = val;
	for(i = 0; i < count; i++) {
		temp = (unsigned) in[i];
		reduce (*cp++,temp,Ain1);
		reduce (*cp++,temp,Ain2);
		reduce (*cp++,temp,1);
	}
	*cp=0;
}

srad50(name,rname)
register char *name;
unsigned int *rname;
{
	register index; 
	register char *cp;
	char file[7],ext[4];
/*
 * Отсечение pathname в имени файла.
 */
	for(cp = name; *cp++; );
	while(cp >= name && *--cp != '/');
	cp++;
/*
 * Перевод имени в код RADIX-50.
 *
 */
	for(index = 0; *cp; ){
		file[index++] = *cp++;
		if(*cp=='.') {
			cp++;
			break;
		}
		if(index>=6) {
			break;
		}
	}
	file[index] = 0;
	for(index = 0; *cp; ){
		ext[index++] = *cp++;
		if(*cp=='.' || index>=3) {
			break;
		}
	}
	ext[index]=0;
	rname[0] = 0;
	rname[1] = 0;
	rname[2] = 0;
	rad50(file,rname);
	rad50(ext,rname+2);
}

sunrad50(name,rname)
unsigned int rname[3];
register char *name;
{
	register char *cp, *cp2;
	char ext[4];
	unrad50(2,rname,name);
	unrad50(1,rname + 2,ext);
	/* Jam name and extension together with a dot
		   deleting white space */
	for(cp = name; *cp++;);
	--cp;  
	while(*--cp==' ' && cp>=name);
	*++cp = '.';
	cp++;
	for(cp2=ext; *cp2!=' ' && cp2 < ext + 3;) {
		*cp++ = *cp2++;
	}
	*cp=0;
	if(cp[-1]=='.') cp[-1] = 0;
}

lread(startad,count,obuff)
register int startad,count;
register char * obuff;
{
	extern disk;
	while( (count -= RT_BLOCK) >= 0) {
		lseek(disk,(long)((long)startad*(long)RT_BLOCK), 0);
		if (read(disk, obuff, RT_BLOCK) != RT_BLOCK)
			fprintf(stderr, russ ? "%s: ошибка чтения, блок #%d.\n":
				"%s: read error, block #%d.\n",pname,startad);
		obuff += RT_BLOCK;
		startad ++;
	}
}

lwrite(startad,count,obuff)
register int startad,count;
register char * obuff;
{
	extern disk;
	while( (count -= RT_BLOCK) >= 0) {
		lseek(disk,(long) ((long)startad*(long)RT_BLOCK), 0);
		if ( write(disk,obuff,RT_BLOCK) != RT_BLOCK)
			fprintf(stderr, russ ? "%s: ошибка записи, блок #%d.\n":
				"%s: write error, block #%d.\n",pname,startad);
		obuff += RT_BLOCK;
		startad ++;
	}
}

dcmd()
{
	register int i;
	if(namc)
		for(i = 0; i < namc; i++)
			if (namv[i]) if(rtd (namv[i])) namv[i]=0;
}

rtd(name)
char *name;
{
	register FLDOPE *dope;
	register struct rt_ent *de;
	FLDOPE *lookup();
	if(dope = lookup(name)) {
		de = dope->rtdope;
		printf("d - ");
		rtls (de);
		if ((de->rt_stat & 0377) == RT_PROT) {
			char response[128];
			*response = '\0';
			fprintf (stderr,(russ?RDELF:DELF));
			gets (response);
			if(*response != 'y' && *response != 'Y')
				return (1);
		}
		de->rt_stat = RT_NULL;
		de->rt_name[0] = 0;
		de->rt_name[1] = 0;
		de->rt_name[2] = 0;
		* ((unsigned int *) & (de->rt_date)) = 0;
		modify = 1;
		return(1);
	}
	return(0);
}

rcmd()
{
	register int i;
	if (namc>0)
		for(i = 0; i < namc; i++) {
			if (namv[i]) rtr(namv[i]);
			namv[i]=0;
		}
}

rtr(name)
char *name;
{
	register FLDOPE *dope;
	register char *de;
	struct stat buf;
	register struct rt_ent *rde;
	register struct stat *bufp = &buf;
	int i, fileis, nseg;
	if(stat (name,bufp) < 0) {
		perror(name);
		return(1);
	}
	fileis = 0;
	if(dope = lookup(name)) {
		rde = dope->rtdope;
		if(bufp->st_size <= (long)((long)rde->rt_len * (long)RT_BLOCK)) {
			printf("r - ");
			rtls (rde);
			nseg = dope->nseg;
			goto makefile;
		}
		else fileis = 1;
	}
	else {
		for (i=0; i != -1; i = rt_dir[i].rt_axhead.rt_nxtseg - 1) {
			for(de = (char *)&rt_dir[i].rt_ents[0];
			    rt(de)->rt_stat != RT_ESEG; de += rt_entsiz)
				switch(rt(de)->rt_stat) {
					case RT_NULL:
						if(bufp->st_size <= (long)((long)rt(de)->rt_len*(long)RT_BLOCK)) {
							printf("a - ");
							if (fileis) rtd(name);
							rde = rt(de);
							nseg = i;
							goto makefile;
						}
					default:
						continue;
				}
		}
	}
	fprintf(stderr, russ ? "%s: нет места для файла '%s'.\n":
		"%s: no space for file '%s'.\n",pname,name);
	return;
makefile:
	if (mkent(rde,nseg,bufp,name)) {
		rtls (rde);
		todisk (name);
		return;
	}
	fprintf (stderr,russ ? "%s: сегмент #%d заполнен.\n":
		"%s: directory segment #%d full.\n",pname,(nseg+1));
}

mkent(rde,nseg,bufp,name)
register struct rt_ent *rde;
int nseg;
register struct stat *bufp;
char *name;
{
	struct tm *localtime(); 
	register struct tm *timp;
	int count;
	char *de;
	count = (int)((bufp->st_size + (long)((long)RT_BLOCK - (long)1))/(long)RT_BLOCK);
	if (count == rde->rt_len) goto makefile;
	if (rt_endseg[nseg] == (char *)(&rt_dir[nseg].rt_ents[0]) + rt_lstent) {
		if ((nseg+1) == rt_dir[0].rt_axhead.rt_lstseg &&
		    rt_dir[0].rt_axhead.rt_lstseg < rt_dir[0].rt_axhead.rt_numseg) {
			rt_dir[nseg+1].rt_axhead = rt_dir[nseg].rt_axhead;
			rt_dir[0].rt_axhead.rt_lstseg++;
			rt_dir[nseg].rt_axhead.rt_nxtseg = nseg + 2;
			de = (char *)&rt_dir[nseg+1].rt_ents[0];
			*rt(de) = *rt(rt_endseg[nseg]-rt_entsiz);
			*rt(de+rt_entsiz) = *rt(rt_endseg[nseg]);
			rt_endseg[nseg+1] = de + rt_entsiz;
			if (rt(rt_endseg[nseg]-rt_entsiz) == rde) {
				*rt(rt_endseg[nseg]-rt_entsiz) = *rt(rt_endseg[nseg]);
				rt_endseg[nseg] -= rt_entsiz;
				rde = rt(de);
				nseg++;
				goto newsegment;
			}
			for (de = rt_endseg[nseg]-rt_entsiz;
			     rt(de) != rde; de -= rt_entsiz)
				*rt(de) = *rt(de-rt_entsiz);
				goto unused;
		}
		return (0);
	}
newsegment:
	rt_endseg[nseg] += rt_entsiz;
	for (de = rt_endseg[nseg]; rt(de) != rde; de -= rt_entsiz)
		*rt(de) = *rt(de-rt_entsiz);
unused:
	rt(de+rt_entsiz)->rt_stat = RT_NULL;
	rt(de+rt_entsiz)->rt_len = rde->rt_len - count;
	rt(de+rt_entsiz)->rt_name[0] = 0;
	rt(de+rt_entsiz)->rt_name[1] = 0;
	rt(de+rt_entsiz)->rt_name[2] = 0;
	* ((unsigned int *) & (rt(de+rt_entsiz)->rt_date)) = 0;
	rde->rt_len = count;
makefile:
	modify = 1;
	srad50 (name,rde->rt_name);
	timp = localtime(&bufp->st_mtime);
	rde->rt_date.rt_dy = timp->tm_mday;
	rde->rt_date.rt_mo = timp->tm_mon + 1;
	rde->rt_date.rt_yr = timp->tm_year - 72;
	rde->rt_stat = RT_FILE;
	rde->rt_pad = 0;
	rde->rt_chan = 0;
	rde->rt_job = 0;
	return (1);
}

todisk(name)
char *name;
{
	register file, n;
	FLDOPE *dope;
	int startad;
	int count;
	char buff[RT_BLOCK];
	if (!(dope = lookup (name))) {
		fprintf (stderr,"%s: nonsense.\n",pname);
		return;
	}
	file = open(name,0);
	if(file < 0) {
		fprintf(stderr, russ ? "%s: файл '%s' не удается открыть.\n":
			"%s: file '%s' cannot opened.\n",pname,name);
		exit(1);
	}
	startad = dope->startad;
	count = dope->rtdope->rt_len;
	for( ; count > 1; count--) {
		read(file,buff,RT_BLOCK);
		lwrite(startad,RT_BLOCK,buff);
		startad ++;
	}
	count = read(file,buff,RT_BLOCK);
	close(file);
	for(n = count; n < RT_BLOCK; n++) buff[n] = 0;
	lwrite(startad,RT_BLOCK,buff);
}
@
