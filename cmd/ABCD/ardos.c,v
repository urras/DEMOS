head     1.1;
access   ;
symbols  ;
locks    ;
comment  @ * @;


1.1
date     88.05.03.20.20.25;  author root;  state Exp;
branches ;
next     ;


desc
@
@



1.1
log
@Initial revision
@
text
@/*
**
** Эта штука добавляется в исходный файл перед
** запуском rcs               Давидов 04.28.88
**
** $Header$
** $Log$
*/

# ifndef        lint
/* NOXSTR  */
static char     Rcs_id[] = "$Header$";
/* YESXSTR */
# endif         lint
 
/*
 *      ardos - программа, обслуживающая работу с архивом на мл,
 *              записанном в формате dos.
 *
 *      Вызов - ardos {txr}[0123cn] [число файлов]
 *                      [имена файлов]
 *      Параметры, взятые в квадратные скобки могут быть опущены.
 *
 *      Операции:
 *
 *              t - получение каталога файлов архива;
 *              x - чтение файлов из архива;
 *              r - запись файлов в архив.
 *
 *      Модификаторы операций:
 *
 *              c - создание нового архива, используется только в ре-
 *                  жиме 'r';
 *              n - задание числа обрабатываемых файлов. Используется
 *                  только в режимах 't' и 'x'. По умолчанию, обраба-
 *                  тываются все файлы, до конца ленты;
 *           0123 - задание номера устройства, по умолчанию используется
 *                  /dev/nrmt0.
 */

#include <sys/types.h>
#include <sys/stat.h>
#include <sgtty.h>
#include <time.h>
#include <stdio.h>
#include <ediag.h>

#define IOCTL

#ifdef IOCTL
#include <sys/mtio.h>
#include <sys/ioctl.h>
#endif

#ifndef NDEV
#define NDEV    "/dev/nrmt0"
#endif

#define WRIT    2               /* Признак записи.                      */
#define READ    0               /* Признак чтения.                      */
#define DSIZ    8192            /* Размер блока при чтении.             */
#define DSIZW   512             /* Размер блока при записи.             */
#define MODE    0644            /* Права доступа вновь созданных файлов.*/
#define HEADER  14              /* Размер заголовка файла.              */

#define flag(c) (flg[(c)-'a'])  /* Доступ к флагам.                     */

#define Ain1    03100           /* Вспомагательные константы для        */
#define Ain2    050             /* работы с кодом RADIX-50.             */

struct label {                  /* Структура заголовка DOS МЛ.  */
	int nm[3];              /* Имя файла в коде RADIX-50.   */
	char user;              /* Номер пользователя.          */
	char group;             /* Номер группы.                */
	char protect;           /* Код защиты файла.            */
	char junk;              /* Не используется.             */
	int dsdate;             /* Дата создания файла.         */
	int pad;                /* Не используется.             */
};

char *pname;    /* Имя программы.                               */
char *fname;    /* Имя текущего обрабатываемого файла.          */
int tape;       /* Дискриптор канала, подключенного к архиву.   */
int flg[26];    /* Массив флагов.                               */
int russ;       /* Признак терминала с русским алфавитом.       */

char    *dev;
static char    *opt    = "0123cn";
static char    *man    = "xtr";

/*      Символы кода RADIX-50.          */

static char *val = " abcdefghijklmnopqrstuvwxyz$.@@0123456789";

/*      Таблица перекодировки из внутреннего кода системы в RADIX-50.   */

static char table[] = {
29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 
29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 
 0, 29, 29, 29, 27, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29,
30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 29, 29, 29, 29, 29, 29,
29,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15,
16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 29, 29, 29, 29, 29,
29,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15,
16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 29, 29, 29, 29, 29,
29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 
29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 
 0, 29, 29, 29, 27, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29,
30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 29, 29, 29, 29, 29, 29,
29,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15,
16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 29, 29, 29, 29, 29,
29,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15,
16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 29, 29, 29, 29, 29
};

char **namev;   /* Массив имен файлов из командной строки.      */
int  namec;     /* Число файлов, заданных в командной строке.   */
int next;       /* Число файлов, которые необходимо обработать. */

int (*comfun)();
int rcmd();
int xcmd();

/*
 *      Разбор параметров, инициализация ленты, вызов исполнителей
 *      и обработка ошибок задания.
 */

main (ac,av)
int ac;
char **av;
{
	extern char *pname, *dev, **namev, *getenv();
	extern int next, namec, russ;
	extern int (*comfun)(), xcmd(), rcmd();
	register int i;
	struct stat inode;
	register char *s;

	if ((dev = getenv("TAPE")) == NULL)
		dev = NDEV;
	russ = ! _ediag;
	pname = * (av++);
	if (--ac < 1) usage ();
	s = * (av++);
	ac--;
	while (*s) switch (*s++) {
	case '0':
	case '1':
	case '2':
	case '3':
		if (flag('a')) usage ();
		flag ('a')++;
		*(dev+9) = *(s-1);
		continue;
	case 'n':
		if (flag ('n')) usage ();
		flag ('n')++;
		next = atoi (* (av++));
		ac--;
		continue;
	case 'c':
		if (flag ('c')) usage ();
		flag ('c')++;
		continue;
	case 't':
		flag ('t')++;
	case 'x':
		setcom (xcmd);
		continue;
	case 'r':
		setcom (rcmd);
		flag ('r')++;
		continue;
	default:
		usage ();
	}
	namec = ac;
	namev = av;
	if (comfun == 0) {
		fprintf(stderr, russ ? "%s: необходимо задание одного из режимов [%s]\n" :
			"%s: one of [%s] must be specified\n",pname, man);

		exit(1);
	}
	for (i = 0; i < namec; i++)
		if ((stat(namev[i],&inode)) == 0 &&
			(inode.st_mode&S_IFREG) != S_IFREG) namev[i] = 0;
	ds_init ();
	(*comfun)();
	exit (notfound());
}

setcom(fun)
int (*fun)();
{
	extern int (*comfun)(), russ;
	extern char *pname, *man;

	if(comfun != 0) {
		fprintf(stderr, russ ? "%s: недопустимо двойное задание [%s].\n" :
			"%s: only one of [%s] allowed\n",pname, man);
		exit(1);
	}
	comfun = fun;
}

readerror()
{
	extern char *pname, *fname;
	extern int russ;

	fprintf(stderr, russ ? "%s: %s: ошибка чтения.\n":
		"%s: %s: read error.\n",pname, fname);
	exit(1);
}

writerror()
{
	extern char *pname, *fname;
	extern int russ;

	fprintf(stderr, russ ? "%s: %s: ошибка записи.\n":
		"%s: %s: write error.\n",pname, fname);
	exit(1);
}

usage()
{
	extern char *pname, *opt, *man;
	extern int russ;

	fprintf(stderr,russ?"Используйте: %s {%s}[%s] [число файлов] [файлы] ...\n":
		"usage: %s {%s}[%s] [count] [files] ...\n",pname, man, opt);
	exit(1);
}

notfound()
{
	extern char *pname, **namev;
	extern int namec, russ;
	register i, n;

	n = 0;
	for(i=0; i<namec; i++)
		if(namev[i]) {
			fprintf(stderr, russ ? "%s: файл '%s' не найден.\n" :
				"%s: file '%s' not found.\n",pname, namev[i]);
			n++;
		}
	return(n);
}

/*
 *      Пропуск текущего файла на ленте.
 */

ds_skip ()
{
	register int lx;
#ifndef IOCTL
	extern char *pname, *dev;
	extern int russ;
	char buf[DSIZ];

	while ((lx = read (tape,buf,DSIZ)) > 0);
#else
	struct mtop mt_com;

	mt_com.mt_count = 1;
	mt_com.mt_op = MTFSF;
	lx = ioctl (tape,MTIOCTOP,&mt_com);
#endif  IOCTL
	if (lx < 0) fname = dev, readerror ();
	return;
}

/*
 *      Инициализация ленты.
 */

ds_init ()
{
	extern char *pname, *dev;
	extern int russ;
	register int mode, lx;
	char buf[DSIZ];
#ifdef IOCTL
	struct mtop mt_com;
#endif

	if (flag('r')) mode = WRIT;
	else mode = READ;
	tape = open (dev,mode);
	if (tape < 0) {
		fprintf (stderr,russ ? "%s: '%s' не удается открыть.\n":
			"%s: '%s' cannot opened.\n",pname,dev);
		exit (1);
	}
	if (!flag('r') || flag('c')) return;
	while ((lx = read (tape,buf,DSIZ)) > 0) ds_skip();
#ifdef IOCTL
	mt_com.mt_count = 1;
	mt_com.mt_op = MTBSF;
	lx = ioctl (tape,MTIOCTOP,&mt_com);
#endif  IOCTL
	if (lx < 0) fname = dev, readerror ();
}

/*
 *      Чтение файлов или получение каталога.
 */

xcmd ()
{
	extern char *fname, *pname;
	extern int tape, russ;
	register int ans, lr, lx, file;
	char buf[DSIZ];

	while ((ans = ds_xhdr ()) >= 0) {
		if (!ans || flag ('t')) continue;
		file = creat (fname,MODE);
		if (file < 0) {
			fprintf (stderr,russ ? "%s: файл '%s' не удается создать.\n":
				"%s: file '%s' cannot create.\n",
				pname,fname);
			continue;
		}
		close (file);
		file = open (fname,WRIT);
		while ((lx = read (tape,buf,DSIZ)) > 0) {
			if (lx&01 && (buf[lx-1] == 0)) lx--;
			lr = write (file,buf,lx);
			if (lr != lx) writerror ();
		}
		if (lx < 0) readerror ();
		close (file);
	}
}

/*
 *      Запись файлов в архив.
 */

rcmd ()
{
	extern int namec, tape, russ;
	extern char **namev, *fname, *pname;
	register int i, file, lx, lr;
	char buf[DSIZW];
#ifdef IOCTL
	struct mtop mt_com;

	mt_com.mt_count = 1;
	mt_com.mt_op = MTWEOF;
#endif
	for (i = 0; i < namec; i++) {
		fname = namev[i];
		if (fname == 0) continue;
		namev[i] = 0;
		file = open (fname,READ);
		if (file < 0) {
			fprintf (stderr,russ ? "%s: файл '%s' не удается открыть.\n":
				"%s: file '%s' can't open.\n",
				pname,fname);
			continue;
		}
		ds_rhdr ();
		while ((lx = read (file,buf,DSIZW)) > 0) {
			if (lx&01) buf[lx++] = 0;
			lr = write (tape,buf,lx);
			if (lr != lx) writerror ();
		}
		if (lx < 0) readerror ();
#ifndef IOCTL
		close (tape);
		tape = open (dev,WRIT);
		if (tape < 0) {
			fprintf (stderr,russ ?"%s: %s не удается открыть.\n":
				"%s: %s cannot opened.\n",pname,dev);
			exit (1);
		}
#else
		lx = ioctl (tape,MTIOCTOP,&mt_com);
#endif  IOCTL
		close (file);
	}
}

/*
 *      Сравнение имен файлов в коде RADIX-50.
 */

static  samename(a,b)
unsigned int a[3],b[3];
{
	return( a[0]==b[0] && a[1]==b[1] && a[2]==b[2] );
}

/*
 *      Перевод текста а код RADIX.
 */

rad50(cp,out)
register char *cp;
unsigned int *out;
{
	register index;
	register temp;

	for(index = 0;*cp; index++) {
		temp = Ain1 * table[*cp++ & 0377];
		if(*cp!=0) {
			temp += Ain2 * table[*cp++ & 0377];
			if(*cp!=0) 
				temp += table[*cp++ & 0377];
		}
		out[index] = temp;
	}
}

#define reduce(x,p,q)   (x = v[(unsigned)p/q], p = (unsigned) p%q);

/*
 *      Перевод произвольного числа слов из кода RADIX в текст.
 */

unrad50(count,in,cp)
unsigned int *in;
register char *cp;
{
	register i, temp; 
	register char *v = val;

	for(i = 0; i < count; i++) {
		temp = (unsigned) in[i];
		reduce (*cp++,temp,Ain1);
		reduce (*cp++,temp,Ain2);
		reduce (*cp++,temp,1);
	}
	*cp=0;
}

/*
 *      Получение приемлемого имени файла для архива в формате DOS,
 *      из имени файла UNIX.
 */

srad50(name,rname)
register char *name;
unsigned int *rname;
{
	register index; 
	register char *cp;
	char file[7],ext[4];

/*
 *      Отсечение pathname в имени файла.
 */
	for(cp = name; *cp++; );
	while(cp >= name && *--cp != '/');
	cp++;
/*
 *      Усечение имени файла.
 */
	for(index = 0; *cp; ){
		file[index++] = *cp++;
		if(*cp=='.') {
			cp++;
			break;
		}
		if(index>=6) {
			break;
		}
	}
	file[index] = 0;
	for(index = 0; *cp; ){
		ext[index++] = *cp++;
		if(*cp=='.' || index>=3) {
			break;
		}
	}
	ext[index]=0;
	rname[0] = 0;
	rname[1] = 0;
	rname[2] = 0;
	rad50(file,rname);
	rad50(ext,rname+2);
}

/*
 *      Приведение имени файла, полученного из кода RADIX,
 *      к нормальному виду: "имяфайла.дополнение".
 */

sunrad50(name,rname)
unsigned int rname[3];
register char *name;
{
	register char *cp, *cp2;
	char ext[4];

	unrad50(2,rname,name);
	unrad50(1,rname + 2,ext);
	for(cp = name; *cp++;);
	--cp;  
	while(*--cp==' ' && cp>=name);
	*++cp = '.';
	cp++;
	for(cp2=ext; *cp2!=' ' && cp2 < ext + 3;) {
		*cp++ = *cp2++;
	}
	*cp=0;
	if(cp[-1]=='.') cp[-1] = 0;
}

/*
 *      Запись заголовка файла.
 */

ds_rhdr ()
{
	extern struct tm *localtime();
	struct label *hdr;
	char buf[HEADER], name[11];
	struct tm *time;
	struct stat inode;
	register int lr;

	stat (fname,&inode);
	hdr = buf;
	srad50 (fname,hdr->nm);
	hdr->user = inode.st_uid;
	hdr->group = inode.st_gid;
	hdr->junk = 0;
	hdr->pad = 0;
	hdr->protect = 0233;
	time = localtime (&inode.st_mtime);
	hdr->dsdate = time->tm_yday + (time->tm_year - 70)*1000 + 1;
	lr = write (tape,buf,HEADER);
	if (lr != HEADER) writerror ();
	sunrad50 (name,hdr->nm);
	printf ("r - %-12.10s [%03d,%03d] <%03o> %02d.%02d.%02d (%s)\n",
		name,(int)(hdr->user)&0377,(int)(hdr->group)&0377,
		(int)(hdr->protect)&0377,time->tm_mday,(time->tm_mon+1),
		time->tm_year,fname);
	return;
}

/*
 *      Чтение заголовка файла.
 *      Файлы, которые не начинаюся с заголовка типа DOS или имена,
 *      которых не совпадают с заказанными - пропускаются.
 *      Подпограмма сигнализирует о завершении операции:
 *              - при появлении tape marker;
 *              - при обнаружении всех заказанных файлов;
 *              - при исчерпании заказанного диапазона файлов.
 */

ds_xhdr ()
{
	extern char *fname, *pname, *dev;
	extern int next, namec, tape, russ;
	register int lx, ans;
	char buf[DSIZ], name[11];
	struct label *hdr;
#ifdef IOCTL
	struct mtop mt_com;
#endif

	if (flag('n') && next <= 0) return (-1);
	else next--;
	lx = read (tape,buf,DSIZ);
	if (!lx) {
		fprintf (stderr,russ ? "%s: конец тома.\n":
			"%s: end of tom.\n",pname);
#ifdef IOCTL
		mt_com.mt_count = 1;
		mt_com.mt_op = MTBSF;
		ioctl (tape,MTIOCTOP,&mt_com);
#endif
		return (-1);
	}
	else if (lx < 0) fname = dev, readerror ();
	else if (lx != HEADER) {
		fprintf (stderr,russ?"%s: %s: это не формат DOS.\n":
			"%s: %s: this is not DOS format.\n",pname,dev);
		ds_skip ();
		return (0);
	}
	hdr = buf;
	if (namec > 0) {
		ans = lookup(&hdr->nm);
		if (ans <= 0) {
			if (ans == 0)
				ds_skip ();
#ifdef IOCTL
			else {
				mt_com.mt_count = 1;
				mt_com.mt_op = MTBSR;
				ioctl (tape,MTIOCTOP,&mt_com);
			}
#endif
			return (ans);
		}
	}
	sunrad50 (name,hdr->nm);
	if (!flag('t')) printf ("x - ");
	printf ("%-12.10s [%03d,%03d] <%3o> ",
		name, (int)(hdr->user)&0377,(int)(hdr->group)&0377,
		(int)(hdr->protect)&0377);
	prds_junk (hdr->dsdate);
	if (namec > 0) printf (" (%s)\n",fname);
	else { 
		printf ("\n"); 
		fname = name; 
	}
	if (flag('t')) ds_skip ();
	return (1);
}

/*
 *      Поиск имени текущего файла среди заказанных.
 *      Подпрограмма возвращает следующие значения:
 *              0 - файл с таким именем не заказан;
 *              1 - данный файл требуется;
 *             -1 - все файла обнаружены, искать нечего.
 */

lookup (rname)
unsigned int rname[3];
{
	extern char **namev, *fname;
	extern int namec;
	register int n, i;
	unsigned int rn[3];

	n = 0;
	for (i = 0; i < namec; i++) {
		if (namev[i]) {
			srad50(namev[i],rn);
			if (samename(rname,rn)) {
				fname = namev[i];
				namev[i] = 0;
				return (1);
			}
			n++;
		}
	}
	if (n) return (0);
	else return (-1);
}

/*
 *      Перевод даты создания файла из юлианского
 *      календаря в григорианский.
 */

prds_junk (date)
int date;
{
	register int dy, yr, mn, day;
	static int mon[] = {31,0,31,30,31,30,31,31,30,31,30,31};

	yr = date/1000+1970;
	dy = date%1000;
	if (!(yr%4) && (yr%100) || !(yr%400)) mon[1] = 29;
	else mon[1] = 28;
	while (dy > 0) {
		day = dy;
		dy -= mon[mn];
		mn++;
	}
	printf ("%02d.%02d.%02d",day,mn,(yr-1900));
	return;
}
@
