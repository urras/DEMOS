head     1.3;
access   ;
symbols  ;
locks    ; strict;
comment  @ * @;


1.3
date     88.09.07.12.03.15;  author abs;  state Exp;
branches ;
next     1.2;

1.2
date     88.09.06.21.41.28;  author abs;  state Exp;
branches ;
next     1.1;

1.1
date     88.09.06.19.08.48;  author abs;  state Exp;
branches ;
next     ;


desc
@
программа построения сплайнов Безье
(сглаживание графика).
@


1.3
log
@добавил + в getdouble
@
text
@/* сплайны Безье */
#include <stdio.h>
#include <ctype.h>

#define MAXIN 200
#define MCPS  500
struct point { double x,y; };
double combi[ MCPS+1];

bezier ( a, mcp, b, mip )
struct point *a,*b;  /* входной и выходной массивы точек */
int    mcp, mip;     /* их размеры */
{
	register int n,i;
	double t, sumX, sumY, prod, deltaT, quot;

	mcp--;
	deltaT = 1.0 / ( mip - 1.0 );
	combi[ 0]   = 1.0;
	combi[ mcp] = 1.0;
	for( n= 0; n < mcp-1 ; n++ ){
		combi[ n+1] =
		    (mcp-n) * combi[ n ] / (n + 1.0);
	}
	for( i=0; i < mip ; i++ ){
		t = i * deltaT;
		if( t <= 0.5 ){
			prod = 1.0 - t;
			quot = prod;
			for( n=1; n <mcp ; n++ ) prod *= quot;
			quot = t/quot;
			sumX = a[ mcp].x;
			sumY = a[ mcp].y;
			for( n=mcp-1; n >=0; --n ){
				sumX = combi[ n] * a[n].x + quot * sumX;
				sumY = combi[ n] * a[n].y + quot * sumY;
			}
		}else{
			prod = t;
			quot = prod;
			for( n=1; n <mcp ; n++ ) prod *= quot;
			quot = ( 1.0 - t ) / quot;
			sumX = a[ 0].x;
			sumY = a[ 0].y;
			for( n = 1; n <= mcp; n++ ){
				sumX = combi[ n] * a[n].x + quot * sumX;
				sumY = combi[ n] * a[n].y + quot * sumY;
			}
		}
		b[ i].x = sumX * prod;
		b[ i].y = sumY * prod;
	}
}

static double X0, Y0, XH, YH;
rspace( x0, y0, x1, y1 ) double x0,y0,x1,y1;
{
	space( 0,0,1023,1023);
	X0= x0;
	Y0= y0;
	XH = 1024.0 / ( x1 - x0 );
	YH = 1024.0 / ( y1 - y0 );
}

rmove( x,y ) double x,y ;
{
	move ( (short)( (x-X0 )*XH ),
	       (short)( (y-Y0 )*YH )
	);
}

rline( x1,y1, x2,y2 ) double x1,y1,x2,y2;
{
	line (   (short) ( (x1-X0)*XH ),
		 (short) ( (y1-Y0)*YH ),
		 (short) ( (x2-X0)*XH ),
		 (short) ( (y2-Y0)*YH )
	);
}

struct point in [ MAXIN+1 ],
	     out[ MCPS +1 ];

int eof=0;   /* end of file */

getdouble( d ) double *d;
{
	static char buf[ 40];
	int c,i;

	i=0;
	while( (c=getchar()) == '-' || c=='.' || isdigit(c)|| c=='+' )
	       buf[i++ ]=c;
	buf[ i] ='\0';
	if( c == EOF || i == 0 ){ eof=1; return; }
	sscanf( buf, "%lf", d );

	/* игнорировать мусор */
	while( (c=getchar()) != '-' && c!= '.' && ! isdigit(c)
				    && c!= '+' && c != EOF );
	if( c== EOF ) eof=1;
	ungetc( c, stdin );

}

main( argc, argv ) char **argv;
{
	int r, approx;
	int dotflg=0, aprflg=0, verbose=0, plotflag=0;
	register i;
	double maxx, maxy, minx, miny;
	char text[ 30];

	argv++;
	while( *argv ){
		if( **argv == '-' ){
			if( (*argv)[1] == 'd' )dotflg =1;
			else if( isdigit( (*argv)[1] )){
				aprflg = 1;
				approx = atoi( *argv+1 );
			}else if( (*argv)[1]=='v' ){
				verbose++;
			}else if( (*argv)[1]== 'p' ){
				plotflag=1;
			}else fprintf( stderr,"-???\n");
		}else fprintf( stderr, "???\n");
		argv++;
	}

	r=0;
	while( !eof && r < MAXIN ){
		getdouble( &in[ r].x );
		if( eof )break;
		getdouble( &in[ r].y );
		r++;
	}
	fclose( stdin );

	if( !aprflg ) approx = 3*r+1;
	if( approx <= 0 || approx >MCPS ) approx = MCPS;

	bezier( in, r, out, approx );

	if( plotflag ){
	      /* То вывести числа для программы graph */
	      for( i=0; i < approx; i++ )
		  printf( "%g %g\n", out[ i].x , out[i].y );
	      exit(0);
	}

	/* ищем max и min по X и Y */

	minx = maxx = in[ 0].x;
	miny = maxy = in[ 0].y;

	for( i = 1; i < r ; i++ ){
		if( minx > in[ i].x ) minx = in[ i].x;
		if( maxx < in[ i].x ) maxx = in[ i].x;
		if( miny > in[ i].y ) miny = in[ i].y;
		if( maxy < in[ i].y ) maxy = in[ i].y;
	}

       for( i = 0; i < approx ; i++ ){
		if( minx > out[ i].x ) minx = out[ i].x;
		if( maxx < out[ i].x ) maxx = out[ i].x;
		if( miny > out[ i].y ) miny = out[ i].y;
		if( maxy < out[ i].y ) maxy = out[ i].y;
	}

	/* иначе рисуем картинку */
	rspace( 0.75*minx, 0.75*miny, 1.25*maxx, 1.25*maxy );
	openpl();
	erase();

	linemod( "dotted");

	for( i = 0; i < r-1 ; i++ ){
		if( dotflg ) rline( in[ i].x, in[ i].y ,  in[ i+1].x , in[ i+1].y );
		rmove( in[ i].x , in[ i].y );
		label( "*" );
		if( verbose ){
			sprintf( text, "(%g,%g)", in[i].x, in[i].y );
			label( text );
		}
	}

	rmove( in[ r-1 ].x , in[ r-1].y );
	label( "*" );
	if( verbose ){
		sprintf( text, "(%g,%g)", in[r-1].x, in[r-1].y );
		label( text );
	}

	linemod( "solid");
	for( i = 0; i < approx-1; i++ )
		rline( out[ i].x , out[ i].y ,    out[ i+1].x , out[ i+1].y );
	closepl();

}
@


1.2
log
@добавлен флаг -p для работы через graph
@
text
@d92 1
a92 1
	while( (c=getchar()) == '-' || c=='.' || isdigit(c) )
d99 2
a100 1
	while( (c=getchar()) != '-' && c!='.' && ! isdigit(c) && c != EOF );
@


1.1
log
@Initial revision
@
text
@d108 1
a108 1
	int dotflg=0, aprflg=0, verbose=0;
d122 2
d143 7
d169 1
d173 1
@
