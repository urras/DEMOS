head     1.1;
access   ;
symbols  ;
locks    ;
comment  @ * @;


1.1
date     88.05.14.13.50.09;  author root;  state Exp;
branches ;
next     ;


desc
@
@



1.1
log
@Initial revision
@
text
@/*
**
** üÔÁ ÛÔÕËÁ ÄÏÂÁ×ÌÑÅÔÓÑ × ÉÓÈÏÄÎÙÊ ÆÁÊÌ ĞÅÒÅÄ
** ÚÁĞÕÓËÏÍ rcs               äÁ×ÉÄÏ× 04.28.88
**
** $Header$
** $Log$
*/

# ifndef        lint
/* NOXSTR  */
static char     Rcs_id[] = "$Header$";
/* YESXSTR */
# endif         lint

/*
 * slappend() saves a null-terminated key string somewhere and inserts a
 * pointer to the key at the tail of list slist. Returns a pointer to
 * the somewhere, or a null pointer if out of memory.
 */
#include "macro.h"
#include "null.h"
#include "slist.h"

char *
slappend(key, slist)
	char *key;                      /* key string */
	SLIST *slist;                   /* pointer to list head block */
{
	char *malloc();                 /* memory allocator */
	char *strcpy();                 /* string copy */
	int strlen();                   /* string length */
	SLBLK *slbptr;                  /* pointer to list block */
	unsigned int klen;              /* key length */

	if (slist == NULL)
		return(NULL);
	klen = strlen(key);
	slist->maxkey = MAX(slist->maxkey, klen);
	if ((slbptr = (SLBLK *) malloc(sizeof(SLBLK))) == NULL ||
	    (slbptr->key = malloc(klen+1)) == NULL)
		{
		warn("out of memory");
		return(NULL);
		}
	strcpy(slbptr->key, key);
	slbptr->x_next = NULL;
	if (slist->x_tail == NULL)
		slist->x_head = slist->x_tail = slbptr;
	else
		slist->x_tail = slist->x_tail->x_next = slbptr;
	slist->nk++;
	return(slbptr->key);
}
@
