head     1.2;
access   ;
symbols  ;
locks    ;
comment  @ * @;


1.2
date     89.05.06.16.34.09;  author ache;  state Exp;
branches ;
next     1.1;

1.1
date     89.01.25.19.27.01;  author ache;  state Exp;
branches ;
next     ;


desc
@
@


1.2
log
@Переделан поиск файла описания.
@
text
@/*
 * $Header: termcap.c,v 1.1 89/01/25 19:27:01 ache Exp $
 * $Log:	termcap.c,v $
 * Revision 1.1  89/01/25  19:27:01  ache
 * Initial revision
 * 
 */
#ifndef lint
static char RCS_ID[] = "$Header: termcap.c,v 1.1 89/01/25 19:27:01 ache Exp $";
#endif
#define BUFSIZ  1024
#define MAXHOP  32      /* max number of tc= indirections */
#define E_TERMCAP "/etc/termcap"

#include <ediag.h>

#define isdigit(c) ('0' <= (c) && (c) <= '9')

/*
 * termcap - routines for dealing with the terminal capability data base
 *
 * BUG:         Should use a "last" pointer in tbuf, so that searching
 *              for capabilities alphabetically would not be a n**2/2
 *              process when large numbers of capabilities are given.
 * Note:        If we add a last pointer now we will screw up the
 *              tc capability. We really should compile termcap.
 *
 * Essentially all the work here is scanning and decoding escapes
 * in string capabilities.  We don't use stdio because the editor
 * doesn't, and because living w/o it is not hard.
 */

static  char *tbuf;
static  int hopcount;   /* detect infinite loops in termcap, init 0 */
char    *tskip();
char    *tgetstr();
char    *tdecode();
char    *getenv();

/*
 * Get an entry for terminal name in buffer bp,
 * from the termcap file.  Parse is very rudimentary;
 * we just notice escaped newlines.
 */
tgetent(bp, name, useenv)
	char *bp, *name;
	char *useenv;
{
	register char *cp;
	register int c;
	register int i = 0, cnt = 0;
	int skip = 0;
	char ibuf[BUFSIZ];
	char *cp2;
	int tf;

	tbuf = bp;
	tf = -1;
#ifndef V6
	cp = getenv("TERMCAP");
	/*
	 * TERMCAP can have one of two things in it. It can be the
	 * name of a file to use instead of /etc/termcap. In this
	 * case it better start with a "/". Or it can be an entry to
	 * use so we don't have to read the file. In this case it
	 * has to already have the newlines crunched out.
	 */
	if (cp && *cp || *useenv) {
	    if (*useenv == 0) {
		if (*cp!='/') {
			cp2 = getenv("TERM");
			if (cp2==(char *) 0 || strcmp(name,cp2)==0) {
				strcpy(bp,cp);
				return(tnchktc(useenv));
			} else {
				tf = open(E_TERMCAP, 0);
			}
		} else
			tf = open(cp, 0);
	    } else
		tf = open (useenv, 0);
	}
	if (tf < 0)     /* was tf==0 ! bug fixed by @@VG 06.05.89 */
		tf = open(E_TERMCAP, 0);
#else
	tf = open(E_TERMCAP, 0);
#endif
	if (tf < 0)
		return (-1);
	for (;;) {
		cp = bp;
		for (;;) {
			if (i == cnt) {
				cnt = read(tf, ibuf, BUFSIZ);
				if (cnt <= 0) {
					close(tf);
					return (0);
				}
				i = 0;
			}
			c = ibuf[i++];
			if (c == '\n') {
				if (cp > bp && cp[-1] == '\\'){
					cp--;
					skip++;
					continue;
				}
				break;
			}
			if (skip && (c == ' ' || c == '\t'))
				continue;
			skip = 0;
			if (cp >= bp+BUFSIZ) {
				write(2,ediag("Termcap entry too long\n",
					      "Слишком длинный описатель в termcap\n"),
					ediag(23,35));
				break;
			} else
				*cp++ = c;
		}
		*cp = 0;

		/*
		 * The real work for the match.
		 */
		if (tnamatch(name)) {
			close(tf);
			return(tnchktc(useenv));
		}
	}
}

/*
 * tnchktc: check the last entry, see if it's tc=xxx. If so,
 * recursively find xxx and append that entry (minus the names)
 * to take the place of the tc=xxx entry. This allows termcap
 * entries to say "like an HP2621 but doesn't turn on the labels".
 * Note that this works because of the left to right scan.
 */
static
tnchktc(useenv)
	char *useenv;
{
	register char *p, *q;
	char tcname[16];        /* name of similar terminal */
	char tcbuf[BUFSIZ];
	char *holdtbuf = tbuf;
	int l;

	p = tbuf + strlen(tbuf) - 2;    /* before the last colon */
	while (*--p != ':')
		if (p<tbuf) {
			write(2, ediag("Bad termcap entry\n",
				       "Плохой описатель в termcap\n"),
				 ediag(18,27));
			return (0);
		}
	p++;
	/* p now points to beginning of last field */
	if (p[0] != 't' || p[1] != 'c')
		return(1);
	strcpy(tcname,p+3);
	q = tcname;
	while (*q && *q != ':')
		q++;
	*q = 0;
	if (++hopcount > MAXHOP) {
		write(2, ediag("Infinite tc= loop\n",
			       "Бесконечный цикл tc=\n"),
			 ediag(18,21));
		return (0);
	}
	if (tgetent(tcbuf, tcname, useenv) != 1)
		return(0);
	for (q=tcbuf; *q != ':'; q++)
		;
	l = p - holdtbuf + strlen(q);
	if (l > BUFSIZ) {
		write(2,ediag("Termcap entry too long\n",
			      "Слишком длинный описатель в termcap\n"),
			ediag(23,35));
		q[BUFSIZ - (p-tbuf)] = 0;
	}
	strcpy(p, q+1);
	tbuf = holdtbuf;
	return(1);
}

/*
 * Tnamatch deals with name matching.  The first field of the termcap
 * entry is a sequence of names separated by |'s, so we compare
 * against each such name.  The normal : terminator after the last
 * name (before the first field) stops us.
 */
static
tnamatch(np)
	char *np;
{
	register char *Np, *Bp;

	Bp = tbuf;
	if (*Bp == '#')
		return(0);
	for (;;) {
		for (Np = np; *Np && *Bp == *Np; Bp++, Np++)
			continue;
		if (*Np == 0 && (*Bp == '|' || *Bp == ':' || *Bp == 0))
			return (1);
		while (*Bp && *Bp != ':' && *Bp != '|')
			Bp++;
		if (*Bp == 0 || *Bp == ':')
			return (0);
		Bp++;
	}
}

/*
 * Skip to the next field.  Notice that this is very dumb, not
 * knowing about \: escapes or any such.  If necessary, :'s can be put
 * into the termcap file in octal.
 */
static char *
tskip(bp)
	register char *bp;
{

	while (*bp && *bp != ':')
		bp++;
	while (*bp == ':')
		bp++;
	return (bp);
}

/*
 * Return the (numeric) option id.
 * Numeric options look like
 *      li#80
 * i.e. the option string is separated from the numeric value by
 * a # character.  If the option is not found we return -1.
 * Note that we handle octal numbers beginning with 0.
 */
tgetnum(id)
	char *id;
{
	register int i, base;
	register char *bp = tbuf;

	for (;;) {
		bp = tskip(bp);
		if (*bp == 0)
			return (-1);
		if (*bp++ != id[0] || *bp == 0 || *bp++ != id[1])
			continue;
		if (*bp == '@@')
			return(-1);
		if (*bp != '#')
			continue;
		bp++;
		base = 10;
		if (*bp == '0')
			base = 8;
		i = 0;
		while (isdigit(*bp))
			i *= base, i += *bp++ - '0';
		return (i);
	}
}

/*
 * Handle a flag option.
 * Flag options are given "naked", i.e. followed by a : or the end
 * of the buffer.  Return 1 if we find the option, or 0 if it is
 * not given.
 */
tgetflag(id)
	char *id;
{
	register char *bp = tbuf;

	for (;;) {
		bp = tskip(bp);
		if (!*bp)
			return (0);
		if (*bp++ == id[0] && *bp != 0 && *bp++ == id[1]) {
			if (!*bp || *bp == ':')
				return (1);
			else if (*bp == '@@')
				return(0);
		}
	}
}

/*
 * Get a string valued option.
 * These are given as
 *      cl=^Z
 * Much decoding is done on the strings, and the strings are
 * placed in area, which is a ref parameter which is updated.
 * No checking on area overflow.
 */
char *
tgetstr(id, area)
	char *id, **area;
{
	register char *bp = tbuf;

	for (;;) {
		bp = tskip(bp);
		if (!*bp)
			return (0);
		if (*bp++ != id[0] || *bp == 0 || *bp == ':' || *bp++ != id[1])
			continue;
		if (*bp == '@@')
			return(0);
		if (*bp != '=')
			continue;
		bp++;
		return (tdecode(bp, area));
	}
}

/*
 * Tdecode does the grung work to decode the
 * string capability escapes.
 */
static char *
tdecode(str, area)
	register char *str;
	char **area;
{
	register char *cp;
	register int c;
	register char *dp;
	int i;

	cp = *area;
	while ((c = *str++) && c != ':') {
		switch (c) {

		case '^':
			c = *str++ & 037;
			break;

		case '\\':
			dp = "E\033^^\\\\::n\nr\rt\tb\bf\f";
			c = *str++;
nextc:
			if (*dp++ == c) {
				c = *dp++;
				break;
			}
			dp++;
			if (*dp)
				goto nextc;
			if (isdigit(c)) {
				c -= '0', i = 2;
				do
					c <<= 3, c |= *str++ - '0';
				while (--i && isdigit(*str));
			}
			break;
		}
		*cp++ = c;
	}
	*cp++ = 0;
	str = *area;
	*area = cp;
	return (str);
}
@


1.1
log
@Initial revision
@
text
@d2 5
a6 2
 * $Header$
 * $Log$
d9 1
a9 1
static char RCS_ID[] = "$Header$";
d11 3
a13 3
#define	BUFSIZ		1024
#define MAXHOP		32	/* max number of tc= indirections */
#define	E_TERMCAP	"/etc/termcap"
d15 4
a18 1
#include <ctype.h>
a19 3
- 
- 	This copy of termcap modified for use in ctc.
- 
d22 5
a26 5
 * BUG:		Should use a "last" pointer in tbuf, so that searching
 *		for capabilities alphabetically would not be a n**2/2
 *		process when large numbers of capabilities are given.
 * Note:	If we add a last pointer now we will screw up the
 *		tc capability. We really should compile termcap.
d33 6
a38 6
static	char *tbuf;
static	int hopcount;	/* detect infinite loops in termcap, init 0 */
char	*tskip();
char	*tgetstr();
char	*tdecode();
char	*getenv();
d52 1
d58 1
a58 1
	tf = 0;
d68 2
a69 2
	if ((cp && *cp) || *useenv) {
	     if (*useenv == 0) {
a81 1

d83 1
a83 1
	if (tf==0)
d105 1
d110 3
d114 3
a116 1
				write(2,"Termcap entry too long\n", 23);
d140 1
d145 1
a145 1
	char tcname[16];	/* name of similar terminal */
d150 1
a150 1
	p = tbuf + strlen(tbuf) - 2;	/* before the last colon */
d153 3
a155 1
			write(2, "Bad termcap entry\n", 18);
d164 1
a164 1
	while (q && *q != ':')
d168 3
a170 1
		write(2, "Infinite tc= loop\n", 18);
d179 3
a181 1
		write(2, "Termcap entry too long\n", 23);
d195 1
d229 1
a229 1
	if (*bp == ':')
d237 1
a237 1
 *	li#80
d296 1
a296 1
 *	cl=^Z
d311 1
a311 1
		if (*bp++ != id[0] || *bp == 0 || *bp++ != id[1])
@
