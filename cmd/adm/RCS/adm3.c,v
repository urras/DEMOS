head     1.4;
access   ;
symbols  ;
locks    ;
comment  @ * @;


1.4
date     88.12.29.17.05.49;  author avg;  state Exp;
branches ;
next     1.3;

1.3
date     88.10.18.22.39.11;  author dvolodin;  state Exp;
branches ;
next     1.2;

1.2
date     88.06.24.22.00.13;  author ache;  state Exp;
branches ;
next     1.1;

1.1
date     87.03.21.18.31.44;  author yst;  state Exp;
branches ;
next     ;


desc
@
3-часть администратора
@


1.4
log
@Параметр POLZ уменьшен до 1000.
@
text
@/*
 * Администратор - обслуживание бюджетов
 *  Автор: Антонов В.Г. ( ВМК МГУ, ИПК Минавтопрома )
 *  Последнее изменение: 28.06.85
 * $Log:        adm3.c,v $
 * Revision 1.3  88/10/18  22:39:11  dvolodin
 * Made more consistent with English.
 *
 * Revision 1.2  88/06/24  22:00:13  ache
 * nice +-20
 *
 */

#include "adm.h"
#define POLZ 1000

int     TMPcreated = 0;
int     Utmp = -1;
/*
 * Выдача сообщения о фатальной ошибке
 */
fatal( msg )
{
	printf( "%s.\n", msg );
	exit( 1 );
}

/*
 * Чтение ответа на вопрос
 */
int ask( def )
{
	char    bf[10], *p;

	for(;;) {
		if( fgets( bf, 10, stdin ) == NULL )
			return( def );
		p = bf;
		bf[9] = '\n';
		SKIPSPACES( p );
		if( *p == '\n' )
			return( def );
		if( *p == 'y' || *p == 'Y' || *p == 'д' || *p == 'Д' )
			return( YES );
		if( *p == 'n' || *p == 'N' || *p == 'н' || *p == 'Н' )
			return( NO );
		printf( ediag(
			"Answer 'yes' or 'no' > ",
			"Ответьте пожалуйста 'да' или 'нет' > ") );
	}
}

/*
 * Конвертировать время в формат dd.mm.yy
 */
char *Dtime( tim )
long    tim;
{
	static char x[9];
	struct tm *TM;
	long    t;

	t = tim;
	TM = localtime( &t );
	sprintf( x, "%02d.%02d.%02d", TM->tm_mday, TM->tm_mon + 1, TM->tm_year % 100 );
	return( x );
}

/*
 * Конвертировать в маленькие буквы
 */
Tolower( s )
char *s;
{
	register char *r = s;

	if( s == NULL )
		return;
	while( *r ) {
		if( isupper( *r ) )
			*r = tolower( *r );
		*r++;
	}
}

/*
 * Сравнение двух слов
 */
int wordeq( a, b )
char   *a, *b;
{
	register char *p, *q;

	p = a;
	q = b;
	while( *q && *p == *q ) p++, q++;
	return( (*p == ' ' || *p == '\t' || *p == '\n' || *p == 0) && *q == 0 );
}

/*
 * Прочитать utmp; выдать тек. время работы польз.
 */
long CTTYU( xuid )
char    *xuid;
{
	long    tcnt;
	register int i;
	static struct utmp Uarr[32];
	static  ct;
	if( Utmp == -1 ) {
		if( (Utmp = open( UTMPF, 0 )) == -1 )
			return( 0l );
		ct = read( Utmp, Uarr, (sizeof( struct utmp ) )*32 )/16;
		time( &timey );
	}
	tcnt = 0l;
	for( i = 0 ; i<ct ; i++ ) {
		if( Uarr[i].ut_line != 0 &&               /* для демос-2*/
		    strcmp(Uarr[i].ut_name,xuid) == 0 )
			tcnt += (timey-Uarr[i].ut_time)/60l;
	}
	return( tcnt );
}

/*
 * Закрыть utmp
 */
RTTYU()
{
	if( Utmp > 0 )
		close( Utmp );
}

/*
 * Добавить пользователя name в /etc/passwd и /etc/group
 */
adduser( name )
char   *name;
{
	char    fmatrix[POLZ];
	int     nuid, ngid, res;
	char    hdir[80], fio[80], accnt[80], shell[80], gname[20];
	struct  passwd *psw, *getpwent();
	register int i;
	char   *p;
	FILE   *Pswfile;

	savepass();
	setpwent();
	for( i = 0 ; i < POLZ ; i++ )
		fmatrix[i] = 0;
	while( (psw = getpwent()) != NULL )
		if( psw->pw_uid < POLZ && psw->pw_uid >= 100 )
			fmatrix[ psw->pw_uid ] = 1;
	for( i = 100 ; i < POLZ ; i++ )
		if( fmatrix[ i ] == 0 )
			goto found;
	printf( ediag(
		"Too many users.\n",
		"Слишком много пользователей.\n") );
	res = 1; goto Return;
found:
	nuid = i;
	printf( " ...  uid = %d\n", nuid );
	goto a2;
a1:
	printf( ediag( "Bad group name.\n", "Плохое имя группы.\n" ) );
a2:
	printf( ediag( "Group ? ", "Группа ? " ) );
	if( fgets( gname, 20, stdin ) == NULL )
		goto a1;
	gname[19] = 0;
	Tolower( gname );
	if( (p = index( gname, '\n' )) != NULL )
		*p = 0;
	if( strlen( gname ) == 0 )
		goto a1;
	p = gname;
	while( *p ) {
		if( !isalnum( *p ) )
			goto a1;
		p++;
	}
	if( (ngid = matchgroup( gname, name )) == -1 ) {
		res = 1; goto Return;
	}
a3:
	printf( ediag(
		"Home directory ? ",
		"Начальный каталог пользователя ? ") );
	if( fgets( hdir, 80, stdin ) == NULL )
		goto a3;
	hdir[79] = 0;
	if( hdir[0] != '/' ) {
		printf( ediag(
			"Must be prefixed with '/'.\n",
			"Должен отсчитываться от '/'.\n") );
		goto a3;
	}
	if( (p = index( hdir, '\n' )) != NULL )
		*p = 0;
	if( strlen( hdir ) == 0 )
		goto a3;
	if( checkdir( hdir, nuid, ngid ) )
		goto a3;
a4:
	printf( ediag(
		"User's login shell [%s] ? ",
		"Интерпретатор командного языка [%s] ? "), DFLTSHELL );
	if( fgets( shell, 80, stdin ) == NULL )
		goto a4;
	shell[79] = 0;
	if( (p = index( shell, '\n' )) != NULL )
		*p = 0;
a5:
	printf( ediag(
		"User's full name ? ",
		"ФИО пользователя ? " ));
	if( fgets( fio, 80, stdin ) == NULL )
		goto a5;
	fio[79] = 0;
	if( (p = index( fio, '\n' )) != NULL )
		*p = 0;
a6:
	printf( ediag(
		"Other account information ? ",
		"Учетная информация о пользователе ? ") );
	if( fgets( accnt, 80, stdin ) == NULL )
		goto a6;
	accnt[79] = 0;
	if( (p = index( accnt, '\n' )) != NULL )
		*p = 0;
	if( index( accnt, ':' ) ) {
		printf( ediag(
			"Can't contain ':'\n",
			"Это поле не может содержать в себе ':'\n") );
		goto a6;
	}
	if( BEDIT() ) {
		res = 1; goto Return;
	}
	if( (Pswfile = fopen( PASSWD, "a" )) == NULL ) {
		printf( ediag( "Can't change %s.\n",
			       "Не могу изменить %s.\n" ), PASSWD );
		EEDIT();
		res = 1; goto Return;
	}
	fprintf( Pswfile, "%s::%d:%d:%s,%s:%s:%s\n", name, nuid, ngid, fio, accnt, hdir, shell );
	fclose( Pswfile );
	EEDIT();
	printf( " -----\n" );
	res = 0;
Return:
	resetpass();
	return( res );
}

/*
 * Начало редактирования /etc/passwd и /etc/group
 */
BEDIT()
{
	struct stat b;
	int     ctb;

	if( TMPcreated ) {
		if( (admtmp = fopen( TMP, "w+" )) == NULL )
			goto BTMP;
		return( 0 );
	}
	endpwent();
	endgrent();
	sync();
	nice( -20 );
	ctb = 20;
	while( stat( TMP, &b ) >= 0 && ctb-- ) {
		if( ctb == 19 )
			printf( ediag( "Just a minute ..", "Минуточку .." ) );
		printf( "." );
		sleep( 10 );
	}
	if( ctb != 20 )
		printf( "\n" );
	else if( ctb < 0 ) {
		printf( ediag(
			"Sorry. Can't proceed: file locked.\n",
			"Sorry. Не могу выполнить операцию: файл заблокирован.\n") );
		goto BTMP1;
	}
	if( (admtmp = fopen( TMP, "w+" )) == NULL )
		goto BTMP1;
	nice( 20 );
	TMPcreated = 1;
	return( 0 );
BTMP1:
	nice( 20 );
BTMP:
	printf( ediag(
		"Can't create temp file %s.\n",
		"Не могу создать рабочий файл %s.\n"), TMP );
	return( 1 );
}

/*
 * Конец редактирования /etc/passwd и /etc/group
 */
EEDIT()
{
	if( TMPcreated == 0 )
		return;
	if( admtmp != NULL )
		fclose( admtmp );
	unlink( TMP );
	TMPcreated = 0;
}
@


1.3
log
@Made more consistent with English.
@
text
@d5 4
a8 1
 * $Log:	adm3.c,v $
d11 1
a11 1
 * 
d15 1
a15 1
#define POLZ 10000
@


1.2
log
@nice +-20
@
text
@d5 4
a8 2
 *
 * $Log$
d45 1
a45 1
			"Answer, please, 'yes' or 'no' > ",
d193 1
a193 1
			"Must be prefixed by '/'.\n",
d205 1
a205 1
		"User default shell [%s] ? ",
d214 1
a214 1
		"User name and family ? ",
d223 1
a223 1
		"Other accounting information ? ",
d283 1
a283 1
			"Sorry. Can't do something: file locked.\n",
@


1.1
log
@Initial revision
@
text
@d6 1
d269 1
a269 1
	nice( -40 );
d287 1
a287 1
	nice( 40 );
d291 1
a291 1
	nice( 40 );
@
