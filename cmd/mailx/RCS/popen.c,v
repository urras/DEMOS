head     1.2;
access   ;
symbols  ;
locks    ;
comment  @ * @;


1.2
date     88.01.11.12.44.51;  author avg;  state Exp;
branches ;
next     1.1;

1.1
date     87.12.25.16.00.29;  author avg;  state Exp;
branches ;
next     ;


desc
@Почтовая служба Mail
@


1.2
log
@Добавлен NOXSTR у rcsid.
@
text
@#include <stdio.h>
#include <signal.h>
#include <errno.h>
/*
 * $Log:	popen.c,v $
 * Revision 1.1  87/12/25  16:00:29  avg
 * Initial revision
 * 
 */

#define tst(a,b)        (*mode == 'r'? (b) : (a))
#define RDR     0
#define WTR     1
static  int     popen_pid[20];
/*NOXSTR*/
static char rcsid[] = "$Header: popen.c,v 1.1 87/12/25 16:00:29 avg Exp $";
/*YESXSTR*/

# ifndef VMUNIX
# define vfork  fork
# endif VMUNIX
#ifndef SIGRETRO
#define sigchild()
#endif

FILE *
popen(cmd,mode)
char    *cmd;
char    *mode;
{
	int p[2];
	register myside, hisside, pid;

	if(pipe(p) < 0)
		return NULL;
	myside = tst(p[WTR], p[RDR]);
	hisside = tst(p[RDR], p[WTR]);
	if((pid = vfork()) == 0) {
		/* myside and hisside reverse roles in child */
		sigchild();
		close(myside);
		dup2(hisside, tst(0, 1));
		close(hisside);
		execl("/bin/csh", "sh", "-c", cmd, 0);
		_exit(1);
	}
	if(pid == -1)
		return NULL;
	popen_pid[myside] = pid;
	close(hisside);
	return(fdopen(myside, mode));
}

pclose(ptr)
FILE *ptr;
{
	register f, r;
	int status;
	extern int errno;

	f = fileno(ptr);
	fclose(ptr);
# ifdef VMUNIX
	sighold(SIGINT);
	sighold(SIGQUIT);
	sighold(SIGHUP);
# endif VMUNIX
	while((r = wait(&status)) != popen_pid[f] && r != -1 && errno != EINTR)
		;
	if(r == -1)
		status = -1;
# ifdef VMUNIX
	sigrelse(SIGINT);
	sigrelse(SIGQUIT);
	sigrelse(SIGHUP);
# endif VMUNIX
	return(status);
}
@


1.1
log
@Initial revision
@
text
@d5 4
a8 1
 * $Log$
d15 3
a17 1
static char rcsid[] = "$Header$";
@
