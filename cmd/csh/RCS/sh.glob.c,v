head     1.9;
access   ;
symbols  BSD29:1.1.2.9 AVG1:1.4 VAX:0.0.2.0 MNOS12:0.0.1;
locks    ;
comment  @ * @;


1.9
date     89.06.07.18.16.05;  author root;  state Exp;
branches ;
next     1.8;

1.8
date     89.04.09.18.16.52;  author abs;  state Exp;
branches ;
next     1.7;

1.7
date     88.12.02.15.43.51;  author avg;  state Exp;
branches ;
next     1.6;

1.6
date     88.09.18.19.58.24;  author avg;  state Exp;
branches ;
next     1.5;

1.5
date     86.09.26.15.08.44;  author avg;  state Exp;
branches ;
next     1.4;

1.4
date     86.07.20.22.14.09;  author avg;  state Exp;
branches ;
next     1.3;

1.3
date     86.06.02.22.13.33;  author dmitry;  state Exp;
branches ;
next     1.2;

1.2
date     86.06.02.18.29.39;  author dmitry;  state Exp;
branches ;
next     1.1;

1.1
date     86.06.01.20.20.50;  author dmitry;  state Exp;
branches 1.1.2.9;
next     0.0;

0.0
date     86.06.01.19.17.54;  author dmitry;  state Exp;
branches 0.0.1.0 0.0.2.0;
next     ;

0.0.1.0
date     86.06.01.19.41.21;  author dmitry;  state Exp;
branches ;
next     ;

0.0.2.0
date     86.07.20.19.10.25;  author avg;  state Exp;
branches ;
next     ;

1.1.2.9
date     86.09.23.22.35.20;  author avg;  state Exp;
branches ;
next     ;


desc
@@


1.9
log
@Исправлена перерисовка, более аккуратная работа с буфером
@
text
@#ifndef lint
/*NOXSTR*/
static  char rcsid[] = "$Header: sh.glob.c,v 1.8 89/04/09 18:16:52 abs Exp $";
/*YESXSTR*/
#endif  lint

/*
 * $Log:	sh.glob.c,v $
 * Revision 1.8  89/04/09  18:16:52  abs
 * теперь open( "" ) работает как  open( "." )
 *  (зато это убрано в ядре).
 * 
 * Revision 1.7  88/12/02  15:43:51  avg
 * Исправлена обработка диапазонов типа [в-з].
 *
 * Revision 1.6  88/09/18  19:58:24  avg
 * Поправлена сортировка русских имен файлов.
 *
 * Revision 1.5  86/09/26  15:08:44  avg
 * Добавлен ifdef U42 на несколько sigignore.
 *
 * Revision 1.4  86/07/20  22:14:09  avg
 * Слито с версией alex-а из 4.2.
 *
 * Revision 1.3  86/06/02  22:13:33  dmitry
 * *** empty log message ***
 *
 * Revision 1.2  86/06/02  18:29:39  dmitry
 * Слиянием с версией для МНОС 1.2 добавлены русские
 * буквы и диагностики.
 *
 * Revision 1.1  86/06/01  20:20:50  dmitry
 * DEMOS & MNOS 2 version
 *
 */

#include "sh.h"
#ifdef U42
#include <sys/dir.h>
#endif

/*
 * C Shell
 */

int     globcnt;

char    *globchars =    "`{[*?";

char    *gpath, *gpathp, *lastgpathp;
int     globbed;
bool    noglob;
bool    nonomatch;
char    *entp;
char    **sortbas;

char **
glob(v)
	register char **v;
{
	static char  agpath[BUFSIZ];
	static char *agargv[GAVSIZ];

	gpath = agpath; gpathp = gpath; *gpathp = 0;
	lastgpathp = &gpath[sizeof agpath - 2];
	ginit(agargv); globcnt = 0;
#ifdef GDEBUG
	printf("glob entered: "); blkpr(v); printf("\n");
#endif
	noglob = adrof("noglob") != 0;
	nonomatch = adrof("nonomatch") != 0;
	globcnt = noglob | nonomatch;
	while (*v)
		collect(*v++);
#ifdef GDEBUG
	printf("glob done, globcnt=%d, gflag=%d: ", globcnt, gflag); blkpr(gargv); printf("\n");
#endif
	if (globcnt == 0 && (gflag&1)) {
		blkfree(gargv), gargv = 0;
		return (0);
	} else
		return (gargv = copyblk(gargv));
}

ginit(agargv)
	char **agargv;
{

	agargv[0] = 0; gargv = agargv; sortbas = agargv; gargc = 0;
	gnleft = NCARGS - 4;
}

collect(as)
	register char *as;
{
	register int i;

	if (any('`', as)) {
#ifdef GDEBUG
		printf("doing backp of %s\n", as);
#endif
		dobackp(as, 0);
#ifdef GDEBUG
		printf("backp done, acollect'ing\n");
#endif
		for (i = 0; i < pargc; i++)
			if (noglob) {
				Gcat(pargv[i], "");
				sortbas = &gargv[gargc];
			} else
				acollect(pargv[i]);
		if (pargv)
			blkfree(pargv), pargv = 0;
#ifdef GDEBUG
		printf("acollect done\n");
#endif
	} else if (noglob || eq(as, "{") || eq(as, "{}")) {
		Gcat(as, "");
		sort();
	} else
		acollect(as);
}

acollect(as)
	register char *as;
{
	register int ogargc = gargc;

	gpathp = gpath; *gpathp = 0; globbed = 0;
	expand(as);
	if (gargc == ogargc) {
		if (nonomatch) {
			Gcat(as, "");
			sort();
		}
	} else
		sort();
}

sort()
{
	register char **p1, **p2, *c;
	char **Gvp = &gargv[gargc];

	p1 = sortbas;
	while (p1 < Gvp-1) {
		p2 = p1;
		while (++p2 < Gvp)
			if (strlcmp(*p1, *p2) > 0)
				c = *p1, *p1 = *p2, *p2 = c;
		p1++;
	}
	sortbas = Gvp;
}

expand(as)
	char *as;
{
	register char *cs;
	register char *sgpathp, *oldcs;
	struct stat stb;

	sgpathp = gpathp;
	cs = as;
	if (*cs == '~' && gpathp == gpath) {
		addpath('~');
		for (cs++; letter(*cs) || digit(*cs) || *cs == '-';)
			addpath(*cs++);
		if (!*cs || *cs == '/') {
			if (gpathp != gpath + 1) {
				*gpathp = 0;
				if (gethdir(gpath + 1))
					error(ediag("Unknown user: %s",
						    "Неизвестный пользователь: %s"), gpath + 1);
				strcpy(gpath, gpath + 1);
			} else
				strcpy(gpath, value("home"));
			gpathp = strend(gpath);
		}
	}
	while (!any(*cs, globchars)) {
		if (*cs == 0) {
			if (!globbed)
				Gcat(gpath, "");
			else if (stat(gpath, &stb) >= 0) {
				Gcat(gpath, "");
				globcnt++;
			}
			goto endit;
		}
		addpath(*cs++);
	}
	oldcs = cs;
	while (cs > as && *cs != '/')
		cs--, gpathp--;
	if (*cs == '/')
		cs++, gpathp++;
	*gpathp = 0;
	if (*oldcs == '{') {
		execbrc(cs, NOSTR);
		return;
	}
	matchdir(cs);
endit:
	gpathp = sgpathp;
	*gpathp = 0;
}

matchdir(pattern)
	char *pattern;
{
	struct stat stb;
#ifndef U42
	struct direct dirbuf[BUFSIZ / sizeof (struct direct)];
	char d_name[DIRSIZ+1];
	register int dirf, cnt;
#else
	register struct direct *dp;
	DIR *dirp;
	register int cnt;
#endif U42

#ifndef U42
	dirf = open( *gpath ? gpath : ".", 0);
	if (dirf < 0) {
		if (globbed)
			return;
		goto patherr;
	}
	if (fstat(dirf, &stb) < 0)
		goto patherr;
	if (!isdir(stb)) {
		errno = ENOTDIR;
		goto patherr;
	}
	while ((cnt = read(dirf, (char *) dirbuf, sizeof dirbuf)) >= sizeof dirbuf[0]) {
		register struct direct *ep = dirbuf;

		for (cnt /= sizeof (struct direct); cnt > 0; cnt--, ep++) {
			if (ep->d_ino == 0)
				continue;
			copdent(d_name, ep->d_name);
			if (match(d_name, pattern)) {
				Gcat(gpath, d_name);
				globcnt++;
			}
		}
	}
	close(dirf);
	return;
patherr:
#else
	dirp = opendir( *gpath ? gpath : "." );
	if (dirp == NULL) {
		if (globbed)
			return;
		goto patherr2;
	}
	if (fstat(dirp->dd_fd, &stb) < 0)
		goto patherr1;
	if (!isdir(stb)) {
		errno = ENOTDIR;
		goto patherr1;
	}
	while ((dp = readdir(dirp)) != NULL) {
		if (dp->d_ino == 0)
				continue;
		if (match(dp->d_name, pattern)) {
			Gcat(gpath, dp->d_name);
				globcnt++;
			}
		}
	closedir(dirp);
	return;
patherr1:
	closedir(dirp);
patherr2:
#endif U42

	Perror(gpath);
}

#ifndef U42
copdent(to, from)
	register char *to, *from;
{
	register int cnt = DIRSIZ;

	do
		*to++ = *from++;
	while (--cnt);
	*to = 0;
}
#endif U42

execbrc(p, s)
	char *p, *s;
{
	char restbuf[BUFSIZ + 2];
	register char *pe, *pm, *pl;
	int brclev = 0;
	char *lm, savec, *sgpathp;

	for (lm = restbuf; *p != '{'; *lm++ = *p++)
		continue;
	for (pe = ++p; *pe; pe++)
	switch (*pe) {

	case '{':
		brclev++;
		continue;

	case '}':
		if (brclev == 0)
			goto pend;
		brclev--;
		continue;

	case '[':
		for (pe++; *pe && *pe != ']'; pe++)
			continue;
		if (!*pe)
			error(ediag("Missing ]",
				    "Нет ]"));
		continue;
	}
pend:
	if (brclev || !*pe)
		error(ediag("Missing }",
			    "Нет }"));
	for (pl = pm = p; pm <= pe; pm++)
	switch (*pm & 0377) {

	case '{':
		brclev++;
		continue;

	case '}':
		if (brclev) {
			brclev--;
			continue;
		}
		goto doit;

	case QUOTEDS(','):
	case ',':
		if (brclev)
			continue;
doit:
		savec = *pm;
		*pm = 0;
		strcpy(lm, pl);
		strcat(restbuf, pe + 1);
		*pm = savec;
		if (s == 0) {
			sgpathp = gpathp;
			expand(restbuf);
			gpathp = sgpathp;
			*gpathp = 0;
		} else if (amatch(s, restbuf))
			return (1);
		sort();
		pl = pm + 1;
		continue;

	case '[':
		for (pm++; *pm && *pm != ']'; pm++)
			continue;
		if (!*pm)
			error(ediag("Missing ]",
				    "Нет ]"));
		continue;
	}
	return (0);
}

match(s, p)
	char *s, *p;
{
	register int c;
	register char *sentp;
	char sglobbed = globbed;

	if (*s == '.' && *p != '.')
		return (0);
	sentp = entp;
	entp = s;
	c = amatch(s, p);
	entp = sentp;
	globbed = sglobbed;
	return (c);
}

amatch(s, p)
	register char *s, *p;
{
	register int scc;
	int          ok, lc;
	char        *sgpathp;
	struct stat  stb;
	register int c;
	int          cc;

	globbed = 1;
	for (;;) {
		scc = TRIMED(*s++);
		switch (c = (unsigned)*p++) {

		case '{':
			return (execbrc(p - 1, s - 1));

		case '[':
			ok = 0;
			lc = 077777;
			while (cc = (unsigned)*p++) {
				if (cc == ']') {
					if (ok)
						break;
					return (0);
				}
				if (cc == '-') {
					if ( syinsy(lc,scc,(unsigned)*p++))
						ok++;
				} else
					if (scc == (lc = cc))
						ok++;
			}
			if (cc == 0)
				error(ediag("Missing ]",
					    "Нет ]"));
			continue;

		case '*':
			if (!*p)
				return (1);
			if (*p == '/') {
				p++;
				goto slash;
			}
			for (s--; *s; s++)
				if (amatch(s, p))
					return (1);
			return (0);

		case 0:
			return (scc == 0);

		default:
			if (c != scc)
				return (0);
			continue;

		case '?':
			if (scc == 0)
				return (0);
			continue;

		case '/':
			if (scc)
				return (0);
slash:
			s = entp;
			sgpathp = gpathp;
			while (*s)
				addpath(*s++);
			addpath('/');
			if (stat(gpath, &stb) == 0 && isdir(stb))
				if (*p == 0) {
					Gcat(gpath, "");
					globcnt++;
				} else
					expand(p);
			gpathp = sgpathp;
			*gpathp = 0;
			return (0);
		}
	}
}

Gmatch(s, p)
	register char *s, *p;
{
	register int scc;
	int ok, lc;
	int c, cc;

	for (;;) {
		scc = TRIMED(*s++);
		switch (c = (unsigned)*p++) {

		case '[':
			ok = 0;
			lc = 077777;
			while (cc = (unsigned)(*p++)) {
				if (cc == ']') {
					if (ok)
						break;
					return (0);
				}
				if (cc == '-') {
					if ( syinsy(lc,scc,(unsigned)*p++))
						ok++;
				} else
					if (scc == (lc = cc))
						ok++;
			}
			if (cc == 0)
				bferr(ediag("Missing ]",
					    "Нет ]"));
			continue;

		case '*':
			if (!*p)
				return (1);
			for (s--; *s; s++)
				if (Gmatch(s, p))
					return (1);
			return (0);

		case 0:
			return (scc == 0);

		default:
			if (TRIMED(c) != scc)
				return (0);
			continue;

		case '?':
			if (scc == 0)
				return (0);
			continue;

		}
	}
}

Gcat(s1, s2)
	register char *s1, *s2;
{

	gnleft -= strlen(s1) + strlen(s2) + 1;
	if (gnleft <= 0 || ++gargc >= GAVSIZ)
		error(ediag("Arguments too long",
			    "Слишком длинные аргументы"));
	gargv[gargc] = 0;
	gargv[gargc - 1] = strspl(s1, s2);
}

addpath(c)
	char c;
{

	if (gpathp >= lastgpathp)
		error(ediag("Pathname too long",
			    "Сликом длинное полное имя"));
	*gpathp++ = c;
	*gpathp = 0;
}

rscan(t, f)
	register char **t;
	int (*f)();
{
	register char *p, c;

	while (p = *t++) {
		if (f == tglob)
			if (*p == '~')
				gflag |= 2;
			else if (eq(p, "{") || eq(p, "{}"))
				continue;
		while (c = *p++)
			(*f)(c);
	}
}

scan(t, f)
	register char **t;
	int (*f)();
{
	register char *p, c;

	while (p = *t++)
		while (c = *p)
			*p++ = (*f)(c);
}

tglob(c)
	register char c;
{

	if (any(c, globchars))
		gflag |= c == '{' ? 2 : 1;
	return (c);
}

trim(c)
	char c;
{

	return (TRIMED(c));
}

tback(c)
	char c;
{

	if (c == '`')
		gflag = 1;
}

char *
globone(str)
	register char *str;
{
	char *gv[2];
	register char **gvp;
	register char *cp;

	gv[0] = str;
	gv[1] = 0;
	gflag = 0;
	rscan(gv, tglob);
	if (gflag) {
		gvp = glob(gv);
		if (gvp == 0) {
			setname(str);
			bferr(ediag("No match",
				    "Нет таких имен"));
		}
		cp = *gvp++;
		if (cp == 0)
			cp = "";
		else if (*gvp) {
			setname(str);
			bferr(ediag("Ambiguous",
				    "Неоднозначно"));
		} else
			cp = strip(cp);
/*
		if (cp == 0 || *gvp) {
			setname(str);
			bferr(cp ? "Ambiguous" : "No output");
		}
*/
		xfree((char *)gargv); gargv = 0;
	} else {
		scan(gv, trim);
		cp = savestr(gv[0]);
	}
	return (cp);
}

/*
 * Command substitute cp.  If literal, then this is
 * a substitution from a << redirection, and so we should
 * not crunch blanks and tabs, separating words only at newlines.
 */
char **
dobackp(cp, literal)
	char *cp;
	bool literal;
{
	register char *lp, *rp;
	char *ep;
	static char word[BUFSIZ];
	static char *apargv[GAVSIZ + 2];

	if (pargv) {
		abort();
		blkfree(pargv);
	}
	pargv = apargv;
	pargv[0] = NOSTR;
	pargcp = pargs = word;
	pargc = 0;
	pnleft = BUFSIZ - 4;
	for (;;) {
		for (lp = cp; *lp != '`'; lp++) {
			if (*lp == 0) {
				if (pargcp != pargs)
					pword();
#ifdef GDEBUG
				printf("leaving dobackp\n");
#endif
				return (pargv = copyblk(pargv));
			}
			psave(*lp);
		}
		lp++;
		for (rp = lp; *rp && *rp != '`'; rp++)
			if (*rp == '\\') {
				rp++;
				if (!*rp)
					goto oops;
			}
		if (!*rp)
oops:
			error(ediag("Unmatched `",
				    "Нет `"));
		ep = savestr(lp);
		ep[rp - lp] = 0;
		backeval(ep, literal);
#ifdef GDEBUG
		printf("back from backeval\n");
#endif
		cp = rp + 1;
	}
}

backeval(cp, literal)
	char *cp;
	bool literal;
{
	int pvec[2];
	int quoted = (literal || ISQUOTED(cp[0]));
	char ibuf[BUFSIZ];
	register int icnt = 0, c;
	register char *ip;
	bool hadnl = 0;
	char *fakecom[2];
	struct command faket;

	faket.t_dtyp = TCOM;
	faket.t_dflg = 0;
	faket.t_dlef = 0;
	faket.t_drit = 0;
	faket.t_dspr = 0;
	faket.t_dcom = fakecom;
	fakecom[0] = "` ... `";
	fakecom[1] = 0;
	/*
	 * We do the psave job to temporarily change the current job
	 * so that the following fork is considered a separate job.
	 * This is so that when backquotes are used in a
	 * builtin function that calls glob the "current job" is not corrupted.
	 * We only need one level of pushed jobs as long as we are sure to
	 * fork here.
	 */
	psavejob();
	/*
	 * It would be nicer if we could integrate this redirection more
	 * with the routines in sh.sem.c by doing a fake execute on a builtin
	 * function that was piped out.
	 */
	mypipe(pvec);
	if (pfork(&faket, -1) == 0) {
		struct wordent paraml;
		struct command *t;

		close(pvec[0]);
		dmove(pvec[1], 1);
		dmove(SHDIAG, 2);
		initdesc();
		arginp = cp;
		while (*cp)
			*cp = TRIMED(*cp), cp++ ;
		lex(&paraml);
		if (err)
			error(err);
		alias(&paraml);
		t = syntax(paraml.next, &paraml, 0);
		if (err)
			error(err);
		if (t)
			t->t_dflg |= FPAR;
#ifdef U42
		sigignore(SIGTSTP);
		sigignore(SIGTTIN);
		sigignore(SIGTTOU);
#endif U42
		execute(t, -1);
		exitstat();
	}
	xfree(cp);
	close(pvec[1]);
	do {
		int cnt = 0;
		for (;;) {
			if (icnt == 0) {
				ip = ibuf;
				icnt = read(pvec[0], ip, BUFSIZ);
				if (icnt <= 0) {
					c = -1;
					break;
				}
			}
			if (hadnl)
				break;
			--icnt;
			c = TRIMED(*ip++);
			if (c == 0)
				break;
			if (c == '\n') {
				/*
				 * Continue around the loop one
				 * more time, so that we can eat
				 * the last newline without terminating
				 * this word.
				 */
				hadnl = 1;
				continue;
			}
			if (!quoted && (c == ' ' || c == '\t'))
				break;
			cnt++;
			psave(quoted?QUOTED(c):c);
		}
		/*
		 * Unless at end-of-file, we will form a new word
		 * here if there were characters in the word, or in
		 * any case when we take text literally.  If
		 * we didn't make empty words here when literal was
		 * set then we would lose blank lines.
		 */
		if (c != -1 && (cnt || literal))
			pword();
		hadnl = 0;
	} while (c >= 0);
#ifdef GDEBUG
	printf("done in backeval, pvec: %d %d\n", pvec[0], pvec[1]);
	printf("also c = %c <%o>\n", c, c);
#endif
	close(pvec[0]);
	pwait();
	prestjob();
}

psave(c)
	char c;
{

	if (--pnleft <= 0)
		error(ediag("Word too long",
			    "Слишком длинное слово"));
	*pargcp++ = c;
}

pword()
{

	psave(0);
	if (pargc == GAVSIZ)
		error(ediag("Too many words from ``",
			    "Слишком много слов из ``"));
	pargv[pargc++] = savestr(pargs);
	pargv[pargc] = NOSTR;
#ifdef GDEBUG
	printf("got word %s\n", pargv[pargc-1]);
#endif
	pargcp = pargs;
	pnleft = BUFSIZ - 4;
}

syinsy(smin,smy,smax)
unsigned smin,smy,smax;
{
#ifndef Ucode
	smin = (smin>0377)?smin:Ctou(smin);
	smy  = Ctou(smy);
	smax = (smax>0377)?smax:Ctou(smax);
#endif
	return(smy >= smin && smy <= smax);
}
@


1.8
log
@теперь open( "" ) работает как  open( "." )
 (зато это убрано в ядре).
@
text
@d3 1
a3 1
static  char rcsid[] = "$Header: sh.glob.c,v 1.7 88/12/02 15:43:51 avg Exp $";
d8 5
a12 1
 * $Log:        sh.glob.c,v $
d61 2
a62 2
	char agpath[BUFSIZ];
	char *agargv[GAVSIZ];
d666 2
a667 2
	char word[BUFSIZ];
	char *apargv[GAVSIZ + 2];
@


1.7
log
@Исправлена обработка диапазонов типа [в-з].
@
text
@d3 1
a3 1
static  char rcsid[] = "$Header: sh.glob.c,v 1.6 88/09/18 19:58:24 avg Exp $";
d9 3
d220 1
a220 1
	dirf = open(gpath, 0);
d249 1
a249 1
	dirp = opendir(gpath);
@


1.6
log
@Поправлена сортировка русских имен файлов.
@
text
@d3 1
a3 1
static  char rcsid[] = "$Header: sh.glob.c,v 1.5 86/09/26 15:08:44 avg Exp $";
d9 3
d849 1
a849 1
int smin,smy,smax;
d851 2
a852 2
#ifdef Ucode
	smin = Ctou(smin);
d854 2
a855 6
	smax = Ctou(smax);
#else
	smin &= 0377;
	smy  &= 0377;
	smax &= 0377;
#endif Ucode
@


1.5
log
@Добавлен ifdef U42 на несколько sigignore.
@
text
@d3 1
a3 1
static  char rcsid[] = "$Header: sh.glob.c,v 1.4 86/07/20 22:14:09 avg Exp $";
d9 3
d139 1
a139 1
			if (strcmp(*p1, *p2) > 0)
a844 13
#ifndef Ucode
char alex[64] = {
 0375, 0340, 0341, 0366, 0344, 0345, 0364, 0343,
 0365, 0350, 0351, 0352, 0353, 0354, 0355, 0356,
 0357, 0376, 0360, 0361, 0362, 0363, 0346, 0342,
 0373, 0372, 0347, 0370, 0374, 0371, 0367, 0377,

 0335, 0300, 0301, 0326, 0304, 0305, 0324, 0303,
 0325, 0310, 0311, 0312, 0313, 0314, 0315, 0316,
 0317, 0336, 0320, 0321, 0322, 0323, 0306, 0302,
 0333, 0332, 0307, 0330, 0334, 0331, 0327, 0337 };
#endif Ucode

d848 8
a855 4
#ifndef Ucode
 if((smy &0300) == 0300)  smy  = alex[smy  & 077];
 if((smin&0300) == 0300)  smin = alex[smin & 077];
 if((smax&0300) == 0300)  smax = alex[smax & 077];
d857 1
a857 1
   return(smy >= smin && smy <= smax);
@


1.4
log
@Слито с версией alex-а из 4.2.
@
text
@d3 1
a3 1
static  char rcsid[] = "$Header: sh.glob.c,v 1.3 86/06/02 22:13:33 dmitry Exp $";
d9 3
d754 1
d758 1
@


1.3
log
@*** empty log message ***
@
text
@d3 1
a3 3

static  char *rcsid = "$Header: sh.glob.c,v 1.2 86/06/02 18:29:39 dmitry Exp $";

d9 3
d22 3
d91 1
a91 1
			if (noglob)
d93 2
a94 1
			else
d197 1
d201 5
d207 1
d235 28
a263 1
patherr:
d267 1
d278 1
d316 1
a316 1
	switch ((unsigned)*pm) {
d329 1
a330 1
	case QUOTEDS(','):
d469 1
a469 1
	register int c, cc;
d746 1
a746 1
		t = syntax(paraml.next, &paraml);
d751 3
@


1.2
log
@Слиянием с версией для МНОС 1.2 добавлены русские
буквы и диагностики.
@
text
@d4 1
a4 1
static  char *rcsid = "$Header: sh.glob.c,v 1.1 86/06/01 20:20:50 dmitry Exp $";
d11 4
d275 1
a275 1
	switch (*pm & (QUOTE|TRIM)) {
@


1.1
log
@DEMOS & MNOS 2 version
@
text
@d4 1
a4 1
static  char *rcsid = "$Header: sh.glob.c,v 0.0 86/04/20 21:24:27 root Exp $";
d10 4
a13 1
 * $Log$
d148 2
a149 1
					error("Unknown user: %s", gpath + 1);
d262 2
a263 1
			error("Missing ]");
d268 2
a269 1
		error("Missing }");
a283 1
	case ','|QUOTE:
d285 1
d309 2
a310 1
			error("Missing ]");
d337 5
a341 4
	int ok, lc;
	char *sgpathp;
	struct stat stb;
	int c, cc;
d345 2
a346 2
		scc = *s++ & TRIM;
		switch (c = *p++) {
d354 1
a354 1
			while (cc = *p++) {
d361 1
a361 1
					if (lc <= scc && scc <= *p++)
d368 2
a369 1
				error("Missing ]");
d424 1
a424 1
	int c, cc;
d427 2
a428 2
		scc = *s++ & TRIM;
		switch (c = *p++) {
d433 1
a433 1
			while (cc = *p++) {
d440 1
a440 1
					if (lc <= scc && scc <= *p++)
d447 2
a448 1
				bferr("Missing ]");
d463 1
a463 1
			if ((c & TRIM) != scc)
d482 2
a483 1
		error("Arguments too long");
d493 2
a494 1
		error("Pathname too long");
d540 1
a540 1
	return (c & TRIM);
d567 2
a568 1
			bferr("No match");
d575 2
a576 1
			bferr("Ambiguous");
d638 2
a639 1
			error("Unmatched `");
d655 1
a655 1
	int quoted = (literal || (cp[0] & QUOTE)) ? QUOTE : 0;
d696 1
a696 1
			*cp++ &= TRIM;
d701 1
a701 1
		t = syntax(paraml.next, &paraml, 0);
d725 1
a725 1
			c = (*ip++ & TRIM);
d741 1
a741 1
			psave(c | quoted);
d768 2
a769 1
		error("Word too long");
d778 2
a779 1
		error("Too many words from ``");
d787 24
@


1.1.2.9
log
@ORIGINAL 2.9 VERSION
@
text
@d1 12
a12 1
static	char *sccsid = "@@(#)sh.glob.c 4.2 3/11/81";
d19 1
a19 1
int	globcnt;
d21 1
a21 1
char	*globchars =	"`{[*?";
d23 6
a28 6
char	*gpath, *gpathp, *lastgpathp;
int	globbed;
bool	noglob;
bool	nonomatch;
char	*entp;
char	**sortbas;
@


0.0
log
@Basic version
@
text
@d1 12
a12 2
/*      @@(#)sh.glob.c   2.1     SCCS id keyword */
/* Copyright (c) 1980 Regents of the University of California */
d34 1
a34 1
	char agpath[160];
d89 1
a89 1
	} else if (noglob)
d91 2
a92 1
	else
d171 1
a171 1
		execbrc(cs, 0);
d247 1
d253 1
a259 1

d265 1
a265 1
	switch ((*pm) & 0377) {
d270 1
d277 2
a279 1
	case ',' | QUOTE:
d298 1
d531 8
d563 2
a564 1
		}
d571 1
a571 1
		xfree(gargv); gargv = 0;
d639 1
a639 1
	int pvec[2], pid;
a640 1
	int (*oldint)();
d645 2
d648 22
a669 1
	oldint = signal(SIGINT, SIG_IGN);
d671 1
a671 4
	pid = fork();
	if (pid < 0)
		bferr("No more processes");
	if (pid == 0) {
a674 2
		child++;
		signal(SIGINT, oldint);
d691 1
a691 1
		execute(t);
a693 1
	cadd(pid, "``");
a694 1
	signal(SIGINT, oldint);
d744 2
a745 1
	pwait(pid);
@


0.0.2.0
log
@VAX BSD 4.2 version by alex (8-bits)
@
text
@d1 2
a2 2
/* $Header: sh.glob.c,v 2.1 86/03/12 23:47:36 alex Exp $ */

a3 1
#include <sys/dir.h>
d9 1
a9 1
int	globcnt;
d11 1
a11 1
char	*globchars =	"`{[*?";
d13 6
a18 6
char	*gpath, *gpathp, *lastgpathp;
int	globbed;
bool	noglob;
bool	nonomatch;
char	*entp;
char	**sortbas;
d24 1
a24 1
	char agpath[BUFSIZ];
d70 1
a70 1
			if (noglob) {
d72 1
a72 2
				sortbas = &gargv[gargc];
			} else
d79 1
a79 1
	} else if (noglob || eq(as, "{") || eq(as, "{}")) {
d81 1
a81 2
		sort();
	} else
d160 1
a160 1
		execbrc(cs, NOSTR);
d173 3
a175 3
	register struct direct *dp;
	DIR *dirp;
	register int cnt;
d177 2
a178 2
	dirp = opendir(gpath);
	if (dirp == NULL) {
d181 1
a181 1
		goto patherr2;
d183 2
a184 2
	if (fstat(dirp->dd_fd, &stb) < 0)
		goto patherr1;
d187 1
a187 1
		goto patherr1;
d189 11
a199 6
	while ((dp = readdir(dirp)) != NULL) {
		if (dp->d_ino == 0)
			continue;
		if (match(dp->d_name, pattern)) {
			Gcat(gpath, dp->d_name);
			globcnt++;
d202 1
a202 1
	closedir(dirp);
d205 1
a205 3
patherr1:
	closedir(dirp);
patherr2:
d209 11
a235 1

a240 1

d247 1
a257 1

a263 2

	case QUOTEDS(','):
d265 1
a283 1

d322 2
a323 2
		scc = TRIMED(*s++);
		switch (c = (unsigned)*p++) {
d331 1
a331 1
			while (cc = (unsigned)*p++) {
d338 1
a338 1
					if ( syinsy(lc,scc,(unsigned)*p++))
d403 2
a404 2
		scc = TRIMED(*s++);
		switch (c = (unsigned)*p++) {
d409 1
a409 1
			while (cc = (unsigned)*p++) {
d416 1
a416 1
					if ( syinsy(lc,scc,(unsigned)*p++))
d438 1
a438 1
			if (TRIMED(c) != scc)
d513 1
a513 1
	return (TRIMED(c));
a515 8
tback(c)
	char c;
{

	if (c == '`')
		gflag = 1;
}

d540 1
a540 2
		} else
			cp = strip(cp);
d547 1
a547 1
		xfree((char *)gargv); gargv = 0;
d615 3
a617 2
	int pvec[2];
	int quoted = (literal || ISQUOTED(cp[0]));
a621 2
	char *fakecom[2];
	struct command faket;
d623 1
a623 22
	faket.t_dtyp = TCOM;
	faket.t_dflg = 0;
	faket.t_dlef = 0;
	faket.t_drit = 0;
	faket.t_dspr = 0;
	faket.t_dcom = fakecom;
	fakecom[0] = "` ... `";
	fakecom[1] = 0;
	/*
	 * We do the psave job to temporarily change the current job
	 * so that the following fork is considered a separate job.
	 * This is so that when backquotes are used in a
	 * builtin function that calls glob the "current job" is not corrupted.
	 * We only need one level of pushed jobs as long as we are sure to
	 * fork here.
	 */
	psavejob();
	/*
	 * It would be nicer if we could integrate this redirection more
	 * with the routines in sh.sem.c by doing a fake execute on a builtin
	 * function that was piped out.
	 */
d625 4
a628 1
	if (pfork(&faket, -1) == 0) {
d632 2
d640 1
a640 1
			 *cp = TRIMED(*cp), cp++ ;
d650 1
a650 4
		sigignore(SIGTSTP);
		sigignore(SIGTTIN);
		sigignore(SIGTTOU);
		execute(t, -1);
d653 1
d655 1
d671 1
a671 1
			c = TRIMED(*ip++);
d687 1
a687 1
			psave(quoted?QUOTED(c):c);
d705 1
a705 2
	pwait();
	prestjob();
a729 21
}


char alex[64] = {
	0375, 0340, 0341, 0366, 0344, 0345, 0364, 0343,
	0365, 0350, 0351, 0352, 0353, 0354, 0355, 0356,
	0357, 0376, 0360, 0361, 0362, 0363, 0346, 0342,
	0373, 0372, 0347, 0370, 0374, 0371, 0367, 0377,

	0335, 0300, 0301, 0326, 0304, 0305, 0324, 0303,
	0325, 0310, 0311, 0312, 0313, 0314, 0315, 0316,
	0317, 0336, 0320, 0321, 0322, 0323, 0306, 0302,
	0333, 0332, 0307, 0330, 0334, 0331, 0327, 0337 };

syinsy(smin,smy,smax)
int smin,smy,smax;
{
	if((smy &0300) == 0300)  smy  = alex[smy  & 077];
	if((smin&0300) == 0300)  smin = alex[smin & 077];
	if((smax&0300) == 0300)  smax = alex[smax & 077];
	return(smy >= smin && smy <= smax);
@


0.0.1.0
log
@MNOS 1.2 version
@
text
@d1 2
a6 5
 *
 * $Log:	sh.glob.c,v $
 * Revision 1.1  86/02/24  20:23:11  sys
 * Initial revision
 * 
d134 1
a134 2
					error(ediag("Unknown user: %s",
						    "Неизвестный пользователь: %s"), gpath + 1);
d245 1
a245 2
			error(ediag("Missing ]",
				    "Нет ]"));
d251 1
a251 2
		error(ediag("Missing }",
			    "Нет }"));
d265 1
a265 1
	case QUOTEDS(','):
d288 1
a288 2
			error(ediag("Missing ]",
				    "Нет ]"));
d315 4
a318 5
	int          ok, lc;
	char        *sgpathp;
	struct stat  stb;
	register int c;
	int          cc;
d322 2
a323 2
		scc = TRIMED(*s++);
		switch (c = (unsigned)*p++) {
d331 1
a331 1
			while (cc = (unsigned)*p++) {
d338 1
a338 1
					if ( syinsy(lc,scc,(unsigned)*p++))
d345 1
a345 2
				error(ediag("Missing ]",
					    "Нет ]"));
d400 1
a400 1
	register int c, cc;
d403 2
a404 2
		scc = TRIMED(*s++);
		switch (c = (unsigned)*p++) {
d409 1
a409 1
			while (cc = (unsigned)(*p++)) {
d416 1
a416 1
					if ( syinsy(lc,scc,(unsigned)*p++))
d423 1
a423 2
				bferr(ediag("Missing ]",
					    "Нет ]"));
d438 1
a438 1
			if (TRIMED(c) != scc)
d457 1
a457 2
		error(ediag("Arguments too long",
			    "Слишком длинные аргументы"));
d467 1
a467 2
		error(ediag("Pathname too long",
			    "Сликом длинное полное имя"));
d513 1
a513 1
	return (TRIMED(c));
d532 1
a532 2
			bferr(ediag("No match",
				    "Нет таких имен"));
d539 1
a539 2
			bferr(ediag("Ambiguous",
				    "Неоднозначно"));
d600 1
a600 2
			error(ediag("Unmatched `",
				    "Нет `"));
d616 1
a616 1
	int quoted = (literal || ISQUOTED(cp[0]));
d627 1
a627 2
		bferr(ediag("No more processes",
			    "Слишком много процессов"));
d640 1
a640 1
			*cp = TRIMED(*cp), cp++ ;
d645 1
a645 1
		t = syntax(paraml.next, &paraml);
d671 1
a671 1
			c = TRIMED(*ip++);
d687 1
a687 1
			psave(quoted?QUOTED(c):c);
d713 1
a713 2
		error(ediag("Word too long",
			    "Слишком длинное слово"));
d722 1
a722 2
		error(ediag("Too many words from ``",
			    "Слишком много слов из ``"));
a729 24
}

#ifndef МНОС
char alex[64] = {
 0375, 0340, 0341, 0366, 0344, 0345, 0364, 0343,
 0365, 0350, 0351, 0352, 0353, 0354, 0355, 0356,
 0357, 0376, 0360, 0361, 0362, 0363, 0346, 0342,
 0373, 0372, 0347, 0370, 0374, 0371, 0367, 0377,

 0335, 0300, 0301, 0326, 0304, 0305, 0324, 0303,
 0325, 0310, 0311, 0312, 0313, 0314, 0315, 0316,
 0317, 0336, 0320, 0321, 0322, 0323, 0306, 0302,
 0333, 0332, 0307, 0330, 0334, 0331, 0327, 0337 };
#endif

syinsy(smin,smy,smax)
int smin,smy,smax;
{
#ifndef МНОС
 if((smy &0300) == 0300)  smy  = alex[smy  & 077];
 if((smin&0300) == 0300)  smin = alex[smin & 077];
 if((smax&0300) == 0300)  smax = alex[smax & 077];
#endif
   return(smy >= smin && smy <= smax);
@
