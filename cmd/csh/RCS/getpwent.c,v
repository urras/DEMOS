head     1.1;
access   ;
symbols  BSD29:1.1.2.9 MNOS12:0.0.1;
locks    ;
comment  @ * @;


1.1
date     86.06.01.20.14.52;  author dmitry;  state Exp;
branches 1.1.2.9;
next     0.0;

0.0
date     86.06.01.19.15.07;  author dmitry;  state Exp;
branches ;
next     ;

1.1.2.9
date     86.09.23.22.31.10;  author avg;  state Exp;
branches ;
next     ;


desc
@@


1.1
log
@DEMOS & MNOS 2 version
@
text
@#ifndef lint
/*NOXSTR*/

static  char *rcsid = "$Header: getpwent.c,v 0.0 86/04/20 21:23:15 root Exp $";

/*YESXSTR*/
#endif  lint

/*
 * $Log$
 */

#include <pwd.h>

#undef  BUFSIZ
#define BUFSIZ  160

static int pwf = -1;
static char line[BUFSIZ+1];
static struct passwd passwd;

setpwent()
{
	if( pwf == -1 )
		pwf = open( "/etc/passwd", 0 );
	else
		lseek(pwf, 0l, 0);
}

endpwent()
{
	if( pwf != -1 ){
		close( pwf );
		pwf = -1;
	}
}

static char *
pwskip(p)
register char *p;
{
	while( *p && *p != ':' )
		++p;
	if( *p ) *p++ = 0;
	return(p);
}

struct passwd *
getpwent()
{
	register char *p, *q;
	register int i, j;

	if (pwf == -1) {
		if( (pwf = open( "/etc/passwd", 0 )) == -1 )
			return(0);
	}
	i = read(pwf, line, BUFSIZ);
	for (j = 0; j < i; j++)
		if (line[j] == '\n')
			break;
	if (j >= i)
		return(0);
	line[++j] = 0;
	lseek(pwf, (long) (j - i), 1);
	p = line;
	passwd.pw_name = p;
	p = pwskip(p);
/*      passwd.pw_passwd = p; */
	p = q = pwskip(p);
/*      passwd.pw_uid = atoi(p); */
	p = pwskip(p);
	p[-1] = 0;
	passwd.pw_uid = atou(q);
/*      passwd.pw_gid = atoi(p); */
/*      passwd.pw_quota = 0; */
/*      passwd.pw_comment = ""; */
	q = p;
	p = pwskip(p);
	p[-1] = 0;
	passwd.pw_gid = atou(q);
/*      passwd.pw_gecos = p; */
	p = pwskip(p);
	passwd.pw_dir = p;
	p = pwskip(p);
/*      passwd.pw_shell = p; */
/*      while(*p && *p != '\n') p++; */
	*p = '\0';
	return(&passwd);
}

atou(p)
	register char *p;
{
	register int i = 0;

	if (p != 0)
		while (*p)
			i = i * 10 + *p++ - '0';
	return (i);
}
@


1.1.2.9
log
@ORIGINAL 2.9 VERSION
@
text
@d1 2
a2 1
static	char *sccsid = "@@(#)getpwent.c 4.1 10/9/80";
d4 9
d15 2
a16 2
#undef	BUFSIZ
#define	BUFSIZ	160
d69 1
a69 1
/*	passwd.pw_passwd = p; */
d71 1
a71 1
/*	passwd.pw_uid = atoi(p); */
d75 3
a77 3
/*	passwd.pw_gid = atoi(p); */
/*	passwd.pw_quota = 0; */
/*	passwd.pw_comment = ""; */
d82 1
a82 1
/*	passwd.pw_gecos = p; */
d86 2
a87 2
/*	passwd.pw_shell = p; */
/* 	while(*p && *p != '\n') p++; */
@


0.0
log
@Basic version
@
text
@d1 2
a2 14
/*
 * Modified version of getpwent which doesn't use stdio.
 * This is done to keep it (and hence csh) small at a small
 * cost in speed.
 *
 * This version also uses the UCB hashed password file if whoami.h
 * indicates that UCB_PWHASH is available.  In any case if it fails
 * it tries the regular linear search.
 *
 * Define BBGETPW (Bare Bones GETPW) if all you are interested in is
 * the name, uid, and directory fields.  This will make getpwent smaller
 * and a bit faster and is useful for things like csh.
 */
#define BBGETPW
d4 1
a4 2
#include <pwd.h>
#include <whoami.h>
d6 2
a7 3
#ifdef UCB_PWHASH
#define pwf _pw_file                            /* unlikely symbol name */
#endif
d10 1
a10 1
 * predefined strings
a11 2
#undef  BUFSIZ
#define BUFSIZ 160
d13 1
a13 1
int     pwf = -1;                       /* password file pointer */
d15 2
a16 1
char    line[BUFSIZ+1];                 /* input buffer */
d18 3
a20 1
struct passwd   passwd;                 /* password entry */
d69 3
a71 3
#ifndef BBGETPW
	passwd.pw_passwd = p;
#endif
d73 6
a78 1
	passwd.pw_uid = atoi(p);
d80 3
a82 5
#ifndef BBGETPW
	passwd.pw_gid = atoi(p);
	passwd.pw_quota = 0;
	passwd.pw_comment = "";
#endif
a83 4
#ifndef BBGETPW
	passwd.pw_gecos = p;
#endif
	p = pwskip(p);
d86 2
a87 3
#ifndef BBGETPW
	passwd.pw_shell = p;
	while(*p && *p != '\n') p++;
a88 1
#endif
d90 11
@
