head     1.7;
access   ;
symbols  BSD29:1.1.2.9 AVG1:1.3 VAX:0.0.2.0 MNOS12:0.0.1;
locks    ;
comment  @ * @;


1.7
date     89.06.07.18.19.40;  author root;  state Exp;
branches ;
next     1.6;

1.6
date     89.03.22.17.43.24;  author avg;  state Exp;
branches ;
next     1.5;

1.5
date     89.03.16.12.05.08;  author avg;  state Exp;
branches ;
next     1.4;

1.4
date     86.09.28.18.54.45;  author avg;  state Exp;
branches ;
next     1.3;

1.3
date     86.07.20.22.49.56;  author avg;  state Exp;
branches ;
next     1.2;

1.2
date     86.06.02.19.16.40;  author dmitry;  state Exp;
branches ;
next     1.1;

1.1
date     86.06.01.20.22.01;  author dmitry;  state Exp;
branches 1.1.2.9;
next     0.0;

0.0
date     86.06.01.19.18.47;  author dmitry;  state Exp;
branches 0.0.1.0 0.0.2.0;
next     ;

0.0.1.0
date     86.06.01.19.43.32;  author dmitry;  state Exp;
branches ;
next     ;

0.0.2.0
date     86.07.20.19.12.31;  author avg;  state Exp;
branches ;
next     ;

1.1.2.9
date     86.09.23.22.37.07;  author avg;  state Exp;
branches ;
next     ;


desc
@@


1.7
log
@Исправлена перерисовка, более аккуратная работа с буфером
@
text
@#ifndef lint
/*NOXSTR*/
static  char rcsid[] = "$Header: sh.lex.c,v 1.6 89/03/22 17:43:24 avg Exp $";
/*YESXSTR*/
#endif  lint

/*
 * $Log:	sh.lex.c,v $
 * Revision 1.6  89/03/22  17:43:24  avg
 * Правлена работа с .logout.
 * 
 * Revision 1.5  89/03/16  12:05:08  avg
 * Внесены изменения для экранной версии csh.
 *
 * Revision 1.4  86/09/28  18:54:45  avg
 * Плохо выполнялась проверка на переполнение labuf
 * (если lap == 0, то по существу никакой проверки не было).
 *
 * Revision 1.3  86/07/20  22:49:56  avg
 * Слито с версией alex-а из 4.2.
 *
 * Revision 1.2  86/06/02  19:16:40  dmitry
 * Слиянием с версией для МНОС 1.2 добавлены русские буквы и диагностики.
 *
 * Revision 1.1  86/06/01  20:22:01  dmitry
 * DEMOS & MNOS 2 version
 *
 */

#include "sh.h"

/*
 * Эти подпрограммы читают ввод и формируют список слов.
 * Здесь выполняется некоторая обработка , связанная со входной буферизацией
 * и с подстановками "history".
 */

char    *word();

/*
 * Peekc is a peek characer for getC, peekread for readc.
 * There is a subtlety here in many places... history routines
 * will read ahead and then insert stuff into the input stream.
 * If they push back a character then they must push it behind
 * the text substituted by the history substitution.  On the other
 * hand in several places we need 2 peek characters.  To make this
 * all work, the history routines read with getC, and make use both
 * of ungetC and unreadc.  The key observation is that the state
 * of getC at the call of a history reference is such that calls
 * to getC from the history routines will always yield calls of
 * readc, unless this peeking is involved.  That is to say that during
 * getexcl the variables lap, exclp, and exclnxt are all zero.
 *
 * Getdol invokes history substitution, hence the extra peek, peekd,
 * which it can ungetD to be before history substitutions.
 */
char    peekc, peekd;
char    peekread;

char    *exclp;                 /* (Tail of) current word from ! subst */
struct  wordent *exclnxt;       /* The rest of the ! subst words */
int     exclc;                  /* Count of remainig words in ! subst */
char    *alvecp;                /* "Globp" for alias resubstitution */

#ifdef COMMANDEDIT
extern int ScrFlag;
#endif

int closein;

/*
 * Lex returns to its caller not only a wordlist (as a "var" parameter)
 * but also whether a history substitution occurred.  This is used in
 * the main (process) routine to determine whether to echo, and also
 * when called by the alias routine to determine whether to keep the
 * argument list.
 */
bool    hadhist;

#define ungetC(c)       peekc = c
#define ungetD(c)       peekd = c

lex(hp)
	register struct wordent *hp;
{
	register struct wordent *wdp;
	int c;

	lineloc = btell();
	hp->next = hp->prev = hp;
	hp->word = "";
	alvecp = 0, hadhist = 0;
	do
		c = readc(0);
	while (c == ' ' || c == '\t');
	if (c == HISTSUB && intty)
		/* ^lef^rit     from tty is short !:s^lef^rit */
		getexcl(c);
	else
		unreadc(c);
	wdp = hp;
	/*
	 * The following loop is written so that the links needed
	 * by freelex will be ready and rarin to go even if it is
	 * interrupted.
	 */
	do {
		register struct wordent *new = (struct wordent *) calloc(1, sizeof *wdp);

		new->prev = wdp;
		new->next = hp;
		wdp->next = new;
		wdp = new;
		wdp->word = word();
	} while (wdp->word[0] != '\n');
	hp->prev = wdp;
	return (hadhist);
}

prlex(sp0)
	struct wordent *sp0;
{
	register struct wordent *sp = sp0->next;

	for (;;) {
		printf("%s", sp->word);
		sp = sp->next;
		if (sp == sp0)
			break;
		printf(" ");
	}
}

copylex(hp, fp)
	register struct wordent *hp;
	struct wordent *fp;
{
	register struct wordent *wdp;

	wdp = hp;
	fp = fp->next;
	do {
		register struct wordent *new = (struct wordent *) calloc(1, sizeof *wdp);

		new->prev = wdp;
		new->next = hp;
		wdp->next = new;
		wdp = new;
		wdp->word = savestr(fp->word);
		fp = fp->next;
	} while (wdp->word[0] != '\n');
	hp->prev = wdp;
}

freelex(vp)
	register struct wordent *vp;
{
	register struct wordent *fp;

	while (vp->next != vp) {
		fp = vp->next;
		vp->next = fp->next;
		xfree(fp->word);
		xfree((char *)fp);
	}
	vp->prev = vp;
}

char    *WORDMETA =     "# '`\"\t;&<>()|\n";

char *
word()
{
	register char c, c1;
	register char *wp;
	char wbuf[BUFSIZ];
	register bool dolflg;
	register int i;

	wp = wbuf;
	i = BUFSIZ - 4;
loop:
	c = getC(DOALL);
	switch (c) {

	case ' ':
	case '\t':
		goto loop;

	case '`':
	case '\'':
	case '"':
		*wp++ = c, --i, c1 = c;
		dolflg = c == '"' ? DOALL : DOEXCL;
		for (;;) {
			c = getC(dolflg);
			if (c == c1)
				break;
			if (c == '\n') {
				seterrc(ediag("Unmatched ",
					      "Нет "), c1);
				ungetC(c);
				goto ret;
			}
			if (c == '\\') {
				c = getC(0);
				if (c == HIST)
					c = QUOTED(c);
				else {
					if (c == '\n' && c1 != '`')
						c = QUOTED(c);
					ungetC(c), c = '\\';
				}
			}
			if (--i <= 0)
				goto toochars;
			*wp++ = c;
		}
		*wp++ = c, --i;
		goto pack;

	case '&':
	case '|':
	case '<':
	case '>':
		*wp++ = c;
		c1 = getC(DOALL);
		if (c1 == c)
			*wp++ = c1;
		else
			ungetC(c1);
		goto ret;

	case '#':
		if (intty)
			break;
		if (wp != wbuf) {
			ungetC(c);
			goto ret;
		}
		c = 0;
		do {
			c1 = c;
			c = getC(0);
		} while (c != '\n');
		if (c1 == '\\')
			goto loop;
		/* fall into ... */

	case ';':
	case '(':
	case ')':
	case '\n':
		*wp++ = c;
		goto ret;

casebksl:
	case '\\':
		c = getC(0);
		if (c == '\n') {
			if (onelflg == 1)
				onelflg = 2;
			goto loop;
		}
		if (c != HIST)
			*wp++ = '\\', --i;
		c = QUOTED(c);
		break;
	}
	ungetC(c);
pack:
	for (;;) {
		c = getC(DOALL);
		if (c == '\\') {
			c = getC(0);
			if (c == '\n') {
				if (onelflg == 1)
					onelflg = 2;
				goto ret;
			}
			if (c != HIST)
				*wp++ = '\\', --i;
			c = QUOTED(c);
		}
		if (any(c, WORDMETA + intty)) {
			ungetC(c);
			if (any(c, "\"'`"))
				goto loop;
			goto ret;
		}
		if (--i <= 0)
			goto toochars;
		*wp++ = c;
	}
toochars:
	seterr(ediag("Word too long",
		     "Слишком длинное слово"));
	wp = &wbuf[1];
ret:
	*wp = 0;
	return (savestr(wbuf));
}

getC(flag)
	register int flag;
{
	register unsigned c;

top:
	if (c = peekc) {
		peekc = 0;
		return (c);
	}
	if (lap) {
		c = (*lap++);
		if (c == 0) {
			lap = 0;
			goto top;
		}
		if (any(c, WORDMETA + intty))
			c = QUOTED(c);
		return (c);
	}
	if (c = peekd) {
		peekd = 0;
		return (c);
	}
	if (exclp) {
		if (c = *exclp++)
			return (c);
		if (exclnxt && --exclc >= 0) {
			exclnxt = exclnxt->next;
			setexclp(exclnxt->word);
			return (' ');
		}
		exclp = 0;
		exclnxt = 0;
	}
	if (exclnxt) {
		exclnxt = exclnxt->next;
		if (--exclc < 0)
			exclnxt = 0;
		else
			setexclp(exclnxt->word);
		goto top;
	}
	c = readc(0);
	if (c == '$' && (flag & DODOL)) {
		getdol();
		goto top;
	}
	if (c == HIST && (flag & DOEXCL)) {
		getexcl(0);
		goto top;
	}
	return (c);
}

getdol()
{
	register char *np;
	char name[40];
	register int c;
	int sc;
	bool special = 0;

	np = name, *np++ = '$';
	c = sc = getC(DOEXCL);
	if (any(c, "\t \n")) {
		ungetD(c);
		ungetC(QUOTEDS('$'));
		return;
	}
	if (c == '{')
		*np++ = c, c = getC(DOEXCL);
	if (c == '#' || c == '?')
		special++, *np++ = c, c = getC(DOEXCL);
	*np++ = c;
	switch (c) {

	case '<':
	case '$':
		if (special)
			goto vsyn;
		goto ret;

	case '\n':
		ungetD(c);
		np--;
		goto vsyn;

	case '*':
		if (special)
			goto vsyn;
		goto ret;

	default:
		if (digit(c)) {
/*
 * let $?0 pass for now
			if (special)
				goto vsyn;
*/
			while (digit(c = getC(DOEXCL))) {
				if (np < &name[sizeof name / 2])
					*np++ = c;
			}
		} else if (letter(c))
			while (letter(c = getC(DOEXCL))) {
				if (np < &name[sizeof name / 2])
					*np++ = c;
			}
		else
			goto vsyn;
	}
	if (c == '[') {
		*np++ = c;
		do {
			c = getC(DOEXCL);
			if (c == '\n') {
				ungetD(c);
				np--;
				goto vsyn;
			}
			if (np >= &name[sizeof name - 8])
				goto vsyn;
			*np++ = c;
		} while (c != ']');
		c = getC(DOEXCL);
	}
	if (c == ':') {
		*np++ = c, c = getC(DOEXCL);
		if (c == 'g')
			*np++ = c, c = getC(DOEXCL);
		*np++ = c;
		if (!any(c, "htrqxe"))
			goto vsyn;
	} else
		ungetD(c);
	if (sc == '{') {
		c = getC(DOEXCL);
		if (c != '}') {
			ungetC(c);
			goto vsyn;
		}
		*np++ = c;
	}
ret:
	*np = 0;
	addla(name);
	return;

vsyn:
	seterr(ediag("Variable syntax",
		     "Синтаксис переменной"));
	goto ret;
}

addla(cp)
	char *cp;
{
	char buf[BUFSIZ]; /* размер buf не менее размера labuf. @@VG */
	register l = strlen(cp);

	if (lap != 0)
		l += strlen(lap);
	if (l >= sizeof(labuf) - 4) {
		seterr(ediag("Expansion buf ovflo",
			     "Переполнен буфер расширения"));
		return;
	}
	if (lap)
		strcpy(buf, lap);
	strcpy(labuf, cp);
	if (lap)
		strcat(labuf, buf);
	lap = labuf;
}

char    lhsb[32];
char    slhs[32];
char    rhsb[64];
int     quesarg;

getexcl(sc)
	char sc;
{
	register struct wordent *hp, *ip;
	int left, right, dol;
	register int c;

	if (sc == 0) {
		sc = getC(0);
		if (sc != '{') {
			ungetC(sc);
			sc = 0;
		}
	}
	quesarg = -1;
	lastev = eventno;
	hp = gethent(sc);
	if (hp == 0)
		return;
	hadhist = 1;
	dol = 0;
	if (hp == alhistp)
		for (ip = hp->next->next; ip != alhistt; ip = ip->next)
			dol++;
	else
		for (ip = hp->next->next; ip != hp->prev; ip = ip->next)
			dol++;
	left = 0, right = dol;
	if (sc == HISTSUB) {
		ungetC('s'), unreadc(HISTSUB), c = ':';
		goto subst;
	}
	c = getC(0);
	if (!any(c, ":^$*-%"))
		goto subst;
	left = right = -1;
	if (c == ':') {
		c = getC(0);
		unreadc(c);
		if (letter(c) || c == '&') {
			c = ':';
			left = 0, right = dol;
			goto subst;
		}
	} else
		ungetC(c);
	if (!getsel(&left, &right, dol))
		return;
	c = getC(0);
	if (c == '*')
		ungetC(c), c = '-';
	if (c == '-') {
		if (!getsel(&left, &right, dol))
			return;
		c = getC(0);
	}
subst:
	exclc = right - left + 1;
	while (--left >= 0)
		hp = hp->next;
	if (sc == HISTSUB || c == ':') {
		do {
			hp = getsub(hp);
			c = getC(0);
		} while (c == ':');
	}
	unreadc(c);
	if (sc == '{') {
		c = getC(0);
		if (c != '}')
			seterr(ediag("Bad ! form",
				     "Плохой формат !"));
	}
	exclnxt = hp;
}

struct wordent *
getsub(en)
	struct wordent *en;
{
	register char *cp;
	int delim;
	register int c;
	int sc;
	bool global = 0;
	char orhsb[sizeof rhsb];

	exclnxt = 0;
	sc = c = getC(0);
	if (c == 'g')
		global++, c = getC(0);
	switch (c) {

	case 'p':
		justpr++;
		goto ret;

	case 'x':
	case 'q':
		global++;
		/* fall into ... */

	case 'h':
	case 'r':
	case 't':
	case 'e':
		break;

	case '&':
		if (slhs[0] == 0) {
			seterr(ediag("No prev sub",
				     "Нет предыдущей подстановки"));
			goto ret;
		}
		strcpy(lhsb, slhs);
		break;

/*
	case '~':
		if (lhsb[0] == 0)
			goto badlhs;
		break;
*/

	case 's':
		delim = getC(0);
		if (letter(delim) || digit(delim) || any(delim, " \t\n")) {
			unreadc(delim);
bads:
			lhsb[0] = 0;
			seterr(ediag("Bad substitute",
				     "Плохая подстановка"));
			goto ret;
		}
		cp = lhsb;
		for (;;) {
			c = getC(0);
			if (c == '\n') {
				unreadc(c);
				goto bads;
			}
			if (c == delim)
				break;
			if (cp > &lhsb[sizeof lhsb - 2])
				goto bads;
			if (c == '\\') {
				c = getC(0);
				if (c != delim && c != '\\')
					*cp++ = '\\';
			}
			*cp++ = c;
		}
		if (cp != lhsb)
			*cp++ = 0;
		else if (lhsb[0] == 0) {
/*badlhs:*/
			seterr(ediag("No prev lhs",
				     "Нет пред. левой части"));
			goto ret;
		}
		cp = rhsb;
		strcpy(orhsb, cp);
		for (;;) {
			c = getC(0);
			if (c == '\n') {
				unreadc(c);
				break;
			}
			if (c == delim)
				break;
/*
			if (c == '~') {
				if (&cp[strlen(orhsb)] > &rhsb[sizeof rhsb - 2])
					goto toorhs;
				strcpy(cp, orhsb);
				cp = strend(cp);
				continue;
			}
*/
			if (cp > &rhsb[sizeof rhsb - 2]) {
/*toorhs:*/
				seterr(ediag("Rhs too long",
					     "Слишком длинная правая часть"));
				goto ret;
			}
			if (c == '\\') {
				c = getC(0);
				if (c != delim /* && c != '~' */)
					*cp++ = '\\';
			}
			*cp++ = c;
		}
		*cp++ = 0;
		break;

	default:
		if (c == '\n')
			unreadc(c);
		seterrc(ediag("Bad ! modifier: ",
			      "Плохой ! модификатор : "), c);
		goto ret;
	}
	strcpy(slhs, lhsb);
	if (exclc)
		en = dosub(sc, en, global);
ret:
	return (en);
}

struct wordent *
dosub(sc, en, global)
	int sc;
	struct wordent *en;
	bool global;
{
	struct wordent lex;
	bool didsub = 0;
	struct wordent *hp = &lex;
	register struct wordent *wdp;
	register int i = exclc;

	wdp = hp;
	while (--i >= 0) {
		register struct wordent *new = (struct wordent *) calloc(1, sizeof *wdp);

		new->prev = wdp;
		new->next = hp;
		wdp->next = new;
		wdp = new;
		en = en->next;
		wdp->word = global || didsub == 0 ?
		    subword(en->word, sc, &didsub) : savestr(en->word);
	}
	if (didsub == 0)
		seterr(ediag("Modifier failed",
			     "Модификация невозможна"));
	hp->prev = wdp;
	return (&enthist(-1000, &lex, 0)->Hlex);
}

char *
subword(cp, type, adid)
	char *cp;
	int type;
	bool *adid;
{
	char wbuf[BUFSIZ];
	register char *wp, *mp, *np;
	register int i;

	switch (type) {

	case 'r':
	case 'h':
	case 't':
	case 'q':
	case 'x':
		wp = domod(cp, type);
		if (wp == 0)
			return (savestr(cp));
		*adid = 1;
		return (wp);

	default:
		wp = wbuf;
		i = BUFSIZ - 4;
		for (mp = cp; *mp; mp++)
			if (matchs(mp, lhsb)) {
				for (np = cp; np < mp;)
					*wp++ = *np++, --i;
				for (np = rhsb; *np; np++) switch (*np) {

				case '\\':
					if (np[1] == '&')
						np++;
					/* fall into ... */

				default:
					if (--i < 0)
						goto ovflo;
					*wp++ = *np;
					continue;

				case '&':
					i -= strlen(lhsb);
					if (i < 0)
						goto ovflo;
					*wp = 0;
					strcat(wp, lhsb);
					wp = strend(wp);
					continue;
				}
				mp += strlen(lhsb);
				i -= strlen(mp);
				if (i < 0) {
ovflo:
					seterr(ediag("Subst buf ovflo",
						     "Переполнен буфер подстановки"));
					return ("");
				}
				*wp = 0;
				strcat(wp, mp);
				*adid = 1;
				return (savestr(wbuf));
			}
		return (savestr(cp));
	}
}

char *
domod(cp, type)
	char *cp;
	int type;
{
	register char *wp, *xp;
	register int c;

	switch (type) {

	case 'x':
	case 'q':
		wp = savestr(cp);
		for (xp = wp; c = *xp; xp++)
			if ((c != ' ' && c != '\t') || type == 'q')
				*xp = QUOTED(*xp);
		return (wp);

	case 'h':
	case 't':
		if (!any('/', cp))      /* what if :h :t are both the same? */
			return (0);
		wp = strend(cp);
		while (*--wp != '/')
			continue;
		if (type == 'h')
take:
			xp = savestr(cp), xp[wp - cp] = 0;
		else
			xp = savestr(wp + 1);
		return (xp);

	case 'e':
	case 'r':
		wp = strend(cp);
		for (wp--; wp >= cp && *wp != '/'; wp--)
			if (*wp == '.') {
				if (type == 'e')
					xp = savestr(wp + 1);
				else
					xp = savestr(cp), xp[wp - cp] = 0;
				return (xp);
			}
		return (savestr(type == 'e' ? "" : cp));
	}
	return (0);
}

matchs(str, pat)
	register char *str, *pat;
{

	while (*str && *pat && *str == *pat)
		str++, pat++;
	return (*pat == 0);
}

getsel(al, ar, dol)
	register int *al, *ar;
	int dol;
{
	register int c = getC(0);
	register int i;
	bool first = *al < 0;

	switch (c) {

	case '%':
		if (quesarg == -1)
			goto bad;
		if (*al < 0)
			*al = quesarg;
		*ar = quesarg;
		break;

	case '-':
		if (*al < 0) {
			*al = 0;
			*ar = dol - 1;
			unreadc(c);
		}
		return (1);

	case '^':
		if (*al < 0)
			*al = 1;
		*ar = 1;
		break;

	case '$':
		if (*al < 0)
			*al = dol;
		*ar = dol;
		break;

	case '*':
		if (*al < 0)
			*al = 1;
		*ar = dol;
		if (*ar < *al) {
			*ar = 0;
			*al = 1;
			return (1);
		}
		break;

	default:
		if (digit(c)) {
			i = 0;
			while (digit(c)) {
				i = i * 10 + c - '0';
				c = getC(0);
			}
			if (i < 0)
				i = dol + 1;
			if (*al < 0)
				*al = i;
			*ar = i;
		} else
			if (*al < 0)
				*al = 0, *ar = dol;
			else
				*ar = dol - 1;
		unreadc(c);
		break;
	}
	if (first) {
		c = getC(0);
		unreadc(c);
		if (any(c, "-$*"))
			return (1);
	}
	if (*al > *ar || *ar > dol) {
bad:
		seterr(ediag("Bad ! arg selector",
			     "Плохой селектор ! аргументов"));
		return (0);
	}
	return (1);

}

struct wordent *
gethent(sc)
	int sc;
{
	register struct Hist *hp;
	register char *np;
	register int c;
	int event;
	bool back = 0;

	c = sc == HISTSUB ? HIST : getC(0);
	if (c == HIST) {
		if (alhistp)
			return (alhistp);
		event = eventno;
		goto skip;
	}
	switch (c) {

	case ':':
	case '^':
	case '$':
	case '*':
	case '%':
		ungetC(c);
		if (lastev == eventno && alhistp)
			return (alhistp);
		event = lastev;
		break;

	case '-':
		back = 1;
		c = getC(0);
		goto number;

	case '#':                       /* !# is command being typed in (mrh) */
		return(&paraml);

	default:
		if (any(c, "(=~")) {
			unreadc(c);
			ungetC(HIST);
			return (0);
		}
		if (digit(c))
			goto number;
		np = lhsb;
		while (!any(c, ": \t\\\n}")) {
			if (np < &lhsb[sizeof lhsb - 2])
				*np++ = c;
			c = getC(0);
		}
		unreadc(c);
		if (np == lhsb) {
			ungetC(HIST);
			return (0);
		}
		*np++ = 0;
		hp = findev(lhsb, 0);
		if (hp)
			lastev = hp->Hnum;
		return (&hp->Hlex);

	case '?':
		np = lhsb;
		for (;;) {
			c = getC(0);
			if (c == '\n') {
				unreadc(c);
				break;
			}
			if (c == '?')
				break;
			if (np < &lhsb[sizeof lhsb - 2])
				*np++ = c;
		}
		if (np == lhsb) {
			if (lhsb[0] == 0) {
				seterr(ediag("No prev search",
					     "Нет пред. поиска"));
				return (0);
			}
		} else
			*np++ = 0;
		hp = findev(lhsb, 1);
		if (hp)
			lastev = hp->Hnum;
		return (&hp->Hlex);

	number:
		event = 0;
		while (digit(c)) {
			event = event * 10 + c - '0';
			c = getC(0);
		}
		if (back)
			event = eventno + (alhistp == 0) - (event ? event : 0);
		unreadc(c);
		break;
	}
skip:
	for (hp = Histlist.Hnext; hp; hp = hp->Hnext)
		if (hp->Hnum == event) {
			hp->Href = eventno;
			lastev = hp->Hnum;
			return (&hp->Hlex);
		}
	np = putn(event);
	noev(np);
	return (0);
}

struct Hist *
findev(cp, anyarg)
	char *cp;
	bool anyarg;
{
	register struct Hist *hp;

	for (hp = Histlist.Hnext; hp; hp = hp->Hnext)
		if (matchev(hp, cp, anyarg))
			return (hp);
	noev(cp);
	return (0);
}

noev(cp)
	char *cp;
{

	seterr2(cp, ediag(": Event not found",
			  ": Не помню такой команды"));
}

matchev(hp, cp, anyarg)
	register struct Hist *hp;
	char *cp;
	bool anyarg;
{
	register char *dp;
	struct wordent *lp = &hp->Hlex;
	int argno = 0;

	for (;;) {
		lp = lp->next;
		if (lp->word[0] == '\n')
			return (0);
		for (dp = lp->word; *dp; dp++) {
			if (matchs(dp, cp)) {
				if (anyarg)
					quesarg = argno;
				return (1);
			}
			if (!anyarg)
				return (0);
		}
		argno++;
	}
}

setexclp(cp)
	register char *cp;
{

	if (cp[0] == '\n')
		return;
	exclp = cp;
}

unreadc(c)
	char c;
{

	peekread = c;
}

readc(wanteof)
	bool wanteof;
{
	register int c;
	static sincereal;

	if (c = (unsigned)peekread) {
		peekread = 0;
		return (c);
	}
top:
	if (alvecp) {
		if (c = (unsigned)*alvecp++)
			return (c);
		if (*alvec) {
			alvecp = *alvec++;
			return (' ');
		}
	}
	if (alvec) {
		if (alvecp = *alvec) {
			alvec++;
			goto top;
		}
		/* Infinite source! */
		return ('\n');
	}
	if (evalp) {
		if (c = (unsigned)*evalp++)
			return (c);
		if (*evalvec) {
			evalp = *evalvec++;
			return (' ');
		}
		evalp = 0;
	}
	if (evalvec) {
		if (evalvec == (char **)1) {
			doneinp = 1;
			reset();
		}
		if (evalp = *evalvec) {
			evalvec++;
			goto top;
		}
		evalvec = (char **)1;
		return ('\n');
	}
	do {
		if (arginp == (char *) 1 || onelflg == 1) {
			if (wanteof)
				return (-1);
			exitstat();
		}
		if (arginp) {
			if ((c = (unsigned)*arginp++) == 0) {
				arginp = (char *) 1;
				return ('\n');
			}
			return (c);
		}
reread:
		c = bgetc();
		if (c < 0) {
#include <sgtty.h>
			struct sgttyb tty;

			if (wanteof)
				return (-1);
			/* was isatty but raw with ignoreeof yields problems */
			if (ioctl(SHIN, TIOCGETP, &tty)==0 && (tty.sg_flags & RAW) == 0) {
				int ctpgrp;

				if (++sincereal > 25)
					goto oops;
				if (tpgrp != -1 &&
				    ioctl(FSHTTY, TIOCGPGRP, &ctpgrp) == 0 &&
				    tpgrp != ctpgrp) {
					ioctl(FSHTTY, TIOCSPGRP, &tpgrp);
					killpg(ctpgrp, SIGHUP);
printf(ediag("Reset tty pgrp from %d to %d\n",
	     "Группа процессов терминала сменена с %d на %d\n"), ctpgrp, tpgrp);
					goto reread;
				}
				if (adrof("ignoreeof")) {
					if (loginsh)
						printf(ediag("\nUse \"logout\" to logout.\n",
							     "\nДля выхода из системы используйте \"logout\".\n"));
					else
						printf(ediag("\nUse \"exit\" to leave csh.\n",
							     "\nДля выхода из csh используйте \"exit\".\n"));
					reset();
				}
				if (chkstop == 0)
					panystop(1);
			}
oops:
			doneinp = 1;
			reset();
		}
		sincereal = 0;
		if (c == '\n' && onelflg)
			onelflg--;
	} while (c == 0);
	return (c);
}

bgetc()
{
	register int buf, off, c;

#ifdef TELL
	if (cantell) {
		if (fseekp < fbobp || fseekp > feobp) {
			fbobp = feobp = fseekp;
			lseek(SHIN, fseekp, 0);
		}
		if (fseekp == feobp) {
			fbobp = feobp;
			do
				c = read(SHIN, fbuf[0], BUFSIZ);
			while (c < 0 && errno == EINTR);
			if (c <= 0)
				return (-1);
			feobp += c;
		}
		c = fbuf[0][fseekp - fbobp];
		fseekp++;
		return (c&0377);
	}
#endif
again:
	buf = (int) fseekp / BUFSIZ;
	if (buf >= fblocks) {
		register char **nfbuf = (char **) calloc(fblocks+2, sizeof (char **));

		if (fbuf) {
			blkcpy(nfbuf, fbuf);
			xfree((char *)fbuf);
		}
		fbuf = nfbuf;
		fbuf[fblocks] = calloc(BUFSIZ, sizeof (char));
		fblocks++;
		goto again;
	}
	if (fseekp >= feobp) {
		buf = (int) feobp / BUFSIZ;
		off = (int) feobp % BUFSIZ;
		do {
#ifdef COMMANDEDIT
			int     j, p;

			if( ScrFlag && intty && !closein ) {
			    for( j = 0 ; j < BUFSIZ-off &&
					 ((fbuf[buf]+off)[j++]=(p=getcc())) != '\n' &&
					 p > 0 ; );
			    c = (p > 0)?j:p;
			    errno = 0;
			} else
#endif
			c = read(SHIN, fbuf[buf] + off, BUFSIZ - off);
		} while (c < 0 && errno == EINTR);
		if (c <= 0)
			return (-1);
		feobp += c;
		goto again;
	}
	c = fbuf[buf][(int) fseekp % BUFSIZ];
	fseekp++;
	return (0377&c);
}

#ifdef COMMANDEDIT
getold(p)
int p;
{
	if( p >= fbobp && p < feobp )
		return( fbuf[ p / BUFSIZ ] [ p % BUFSIZ] );
	else
		return(1);
}
#endif COMMANDEDIT

bfree()
{
	register int sb, i;

#ifdef TELL
	if (cantell)
		return;
#endif
	if (whyles)
		return;
	sb = (int) (fseekp - 1) / BUFSIZ - 1;
	if (sb > 0) {
		chPsave( sb*BUFSIZ );
		for (i = 0; i < sb; i++)
			xfree(fbuf[i]);
		blkcpy(fbuf, &fbuf[sb]);
		fseekp -= BUFSIZ * sb;
		feobp -= BUFSIZ * sb;
		fblocks -= sb;
	}
}

bseek(l)
long l;
{
	register struct whyle *wp;

	fseekp = l;
#ifdef TELL
	if (!cantell) {
#endif
		if (!whyles)
			return;
		for (wp = whyles; wp->w_next; wp = wp->w_next)
			continue;
		if (wp->w_start > l)
			l = wp->w_start;
#ifdef TELL
	}
#endif
}

/* any similarity to bell telephone is purely accidental */
long
btell()
{

	return (fseekp);
}

btoeof()
{

	lseek(SHIN, 0l, 2);
	fseekp = feobp;
	wfree();
	bfree();
}

#ifdef TELL
settell()
{

	cantell = 0;
	if (arginp || onelflg || intty)
		return;
	if (lseek(SHIN, 0l, 1) < 0 || errno == ESPIPE)
		return;
	fbuf = (char **) calloc(2, sizeof (char **));
	fblocks = 1;
	fbuf[0] = calloc(BUFSIZ, sizeof (char));
	fseekp = fbobp = feobp = tell(SHIN);
	cantell = 1;
}
#endif
@


1.6
log
@Правлена работа с .logout.
@
text
@d3 1
a3 1
static  char rcsid[] = "$Header: sh.lex.c,v 1.5 89/03/16 12:05:08 avg Exp $";
d8 4
a11 1
 * $Log:        sh.lex.c,v $
d1305 1
a1305 1
	sb = (int) (fseekp - 1) / BUFSIZ;
d1307 1
@


1.5
log
@Внесены изменения для экранной версии csh.
@
text
@d3 1
a3 1
static  char rcsid[] = "$Header: sh.lex.c,v 1.4 86/09/28 18:54:45 avg Exp $";
d8 4
a11 1
 * $Log:	sh.lex.c,v $
d15 1
a15 1
 * 
d1172 1
a1172 1
		if (c < 0 || closein) {
@


1.4
log
@Плохо выполнялась проверка на переполнение labuf
(если lap == 0, то по существу никакой проверки не было).
@
text
@d3 1
a3 1
static  char rcsid[] = "$Header: sh.lex.c,v 1.3 86/07/20 22:49:56 avg Exp $";
d8 5
a12 1
 * $Log:        sh.lex.c,v $
d59 6
d1169 1
a1169 1
		if (c < 0) {
d1254 12
a1265 1
		do
d1267 1
a1267 1
		while (c < 0 && errno == EINTR);
d1277 11
@


1.3
log
@Слито с версией alex-а из 4.2.
@
text
@d3 1
a3 1
static  char rcsid[] = "$Header: sh.lex.c,v 1.2 86/06/02 19:16:40 dmitry Exp $";
d9 3
d446 2
a447 1
	char buf[BUFSIZ];
d449 3
a451 1
	if (lap != 0 && strlen(cp) + strlen(lap) >= sizeof (labuf) - 4) {
d453 1
a453 1
			     "Перполнен буфер расширения"));
@


1.2
log
@Слиянием с версией для МНОС 1.2 добавлены русские буквы и диагностики.
@
text
@d3 1
a3 3

static  char *rcsid = "$Header: sh.lex.c,v 1.1 86/06/01 20:22:01 dmitry Exp $";

d9 3
a140 1

d1118 1
a1118 1
		if (c = *evalp++)
d1161 1
a1161 1
				short ctpgrp;
@


1.1
log
@DEMOS & MNOS 2 version
@
text
@d4 1
a4 1
static  char *rcsid = "$Header: sh.lex.c,v 0.0 86/04/20 21:24:40 root Exp $";
d10 4
a13 1
 * $Log$
d19 3
a21 1
 * C shell
a23 6
/*
 * These lexical routines read input and form lists of words.
 * There is some involved processing here, because of the complications
 * of input buffering, and especially because of history substitution.
 */

d140 1
d181 2
a182 1
				seterrc("Unmatched ", c1);
d189 1
a189 1
					c |= QUOTE;
d192 1
a192 1
						c |= QUOTE;
d248 1
a248 1
		c |= QUOTE;
d264 1
a264 1
			c |= QUOTE;
d277 2
a278 1
	seterr("Word too long");
d288 1
a288 1
	register char c;
d296 1
a296 1
		c = *lap++;
d302 1
a302 1
			c |= QUOTE;
d352 1
a352 1
		ungetC('$' | QUOTE);
d435 2
a436 1
	seterr("Variable syntax");
d446 2
a447 1
		seterr("Expansion buf ovflo");
d533 2
a534 1
			seterr("Bad ! form");
d573 2
a574 1
			seterr("No prev sub");
d593 2
a594 1
			seterr("Bad substitute");
d619 2
a620 1
			seterr("No prev lhs");
d644 2
a645 1
				seterr("Rhs too long");
d661 2
a662 1
		seterrc("Bad ! modifier: ", c);
d697 2
a698 1
		seterr("Modifier failed");
d759 2
a760 1
					seterr("Subst buf ovflo");
d787 1
a787 1
				*xp |= QUOTE;
d906 2
a907 1
		seterr("Bad ! arg selector");
d992 2
a993 1
				seterr("No prev search");
d1044 2
a1045 1
	seterr2(cp, ": Event not found");
d1096 1
a1096 1
	if (c = peekread) {
d1102 1
a1102 1
		if (c = *alvecp++)
d1145 1
a1145 1
			if ((c = *arginp++) == 0) {
d1170 2
a1171 1
printf("Reset tty pgrp from %d to %d\n", ctpgrp, tpgrp);
d1176 2
a1177 1
						printf("\nUse \"logout\" to logout.\n");
d1179 2
a1180 1
						printf("\nUse \"exit\" to leave csh.\n");
d1218 1
a1218 1
		return (c);
d1248 1
a1248 1
	return (c);
d1273 1
a1273 1
	long l;
@


1.1.2.9
log
@ORIGINAL 2.9 VERSION
@
text
@d1 2
a2 1
static	char *sccsid = "@@(#)sh.lex.c 4.1 10/9/80";
d4 9
d25 1
a25 1
char	*word();
d44 2
a45 2
char	peekc, peekd;
char	peekread;
d47 4
a50 4
char	*exclp;			/* (Tail of) current word from ! subst */
struct	wordent *exclnxt;	/* The rest of the ! subst words */
int	exclc;			/* Count of remainig words in ! subst */
char	*alvecp;		/* "Globp" for alias resubstitution */
d59 1
a59 1
bool	hadhist;
d61 2
a62 2
#define	ungetC(c)	peekc = c
#define	ungetD(c)	peekd = c
d78 1
a78 1
		/* ^lef^rit	from tty is short !:s^lef^rit */
d150 1
a150 1
char	*WORDMETA =	"# '`\"\t;&<>()|\n";
d359 1
a359 1
	
d454 4
a457 4
char	lhsb[32];
char	slhs[32];
char	rhsb[64];
int	quesarg;
d780 1
a780 1
		if (!any('/', cp))	/* what if :h :t are both the same? */
d936 1
a936 1
	case '#':			/* !# is command being typed in (mrh) */
@


0.0
log
@Basic version
@
text
@d1 12
a12 2
/*      @@(#)sh.lex.c    2.1     SCCS id keyword */
/* Copyright (c) 1980 Regents of the University of California */
d145 1
a145 1
		xfree(fp);
a160 3
/*
	wbuf[0] = wbuf[250] = wbuf[500] = wbuf[750] = wbuf[1000];
*/
d359 2
a360 1
	
d415 1
a415 1
		if (!any(c, "htrqx"))
d563 1
d611 1
a611 1
badlhs:
d629 2
a630 1
				cp = strend(strcpy(cp, orhsb));
d635 1
a635 1
toorhs:
d780 1
a780 1
		if (!any('/', cp))
d792 1
d795 9
a803 6
		for (wp--; wp >= cp && *wp != '.'; wp--)
			if (*wp == '/')
				return (0);
		if (wp < cp)
			return (0);
		goto take;
d940 1
a940 1
		if (any(c, "(=")) {
d1079 1
d1102 21
d1136 1
d1145 22
a1166 6
			if (adrof("ignoreeof") && gtty(SHIN, &tty)==0 && (tty.sg_flags & RAW) == 0) {
				if (loginsh)
					printf("\nUse \"logout\" to logout.\n");
				else
					printf("\nUse \"exit\" to leave csh.\n");
				reset();
d1168 1
d1172 1
d1210 1
a1210 1
			xfree(fbuf);
@


0.0.2.0
log
@VAX BSD 4.2 version by alex (8-bits)
@
text
@d1 2
a2 2
/* $Header: sh.lex.c,v 2.1 86/03/12 23:47:42 alex Exp $ */

d10 3
a12 3
 * Эти подпрограммы читают ввод и формируют список слов.
 * Здесь выполняется некоторая обработка , связанная со входной буферизацией
 * и с подстановками "history".
d15 1
a15 1
char	*word();
d34 2
a35 2
char	peekc, peekd;
char	peekread;
d37 4
a40 4
char	*exclp;			/* (Tail of) current word from ! subst */
struct	wordent *exclnxt;	/* The rest of the ! subst words */
int	exclc;			/* Count of remainig words in ! subst */
char	*alvecp;		/* "Globp" for alias resubstitution */
d49 1
a49 1
bool	hadhist;
d51 2
a52 2
#define	ungetC(c)	peekc = c
#define	ungetD(c)	peekd = c
d68 1
a68 1
		/* ^lef^rit	from tty is short !:s^lef^rit */
d135 1
a135 1
		xfree((char *)fp);
d140 1
a140 1
char	*WORDMETA =	"# '`\"\t;&<>()|\n";
d151 3
d181 1
a181 1
					c = QUOTED(c);
d184 1
a184 1
					c = QUOTED(c);
d240 1
a240 1
		c = QUOTED(c);
d256 1
a256 1
			c = QUOTED(c);
d279 1
a279 1
	register unsigned c;
d293 1
a293 1
			c = QUOTED(c);
d343 1
a343 1
		ungetC(QUOTEDS('$'));
a352 1
	case '<':
d407 1
a407 1
		if (!any(c, "htrqxe"))
d446 4
a449 4
char	lhsb[32];
char	slhs[32];
char	rhsb[64];
int	quesarg;
a554 1
	case 'e':
d602 1
a602 1
/*badlhs:*/
d620 1
a620 2
				strcpy(cp, orhsb);
				cp = strend(cp);
d625 1
a625 1
/*toorhs:*/
d765 1
a765 1
				*xp = QUOTED(*xp);
d770 1
a770 1
		if (!any('/', cp))	/* what if :h :t are both the same? */
a781 1
	case 'e':
d784 6
a789 9
		for (wp--; wp >= cp && *wp != '/'; wp--)
			if (*wp == '.') {
				if (type == 'e')
					xp = savestr(wp + 1);
				else
					xp = savestr(cp), xp[wp - cp] = 0;
				return (xp);
			}
		return (savestr(type == 'e' ? "" : cp));
d922 1
a922 1
	case '#':			/* !# is command being typed in (mrh) */
d926 1
a926 1
		if (any(c, "(=~")) {
a1064 1
	static sincereal;
d1066 1
a1066 1
	if (c = (unsigned)peekread) {
d1072 1
a1072 1
		if (c = (unsigned)*alvecp++)
a1086 21
	if (evalp) {
		if (c = (unsigned)*evalp++)
			return (c);
		if (*evalvec) {
			evalp = *evalvec++;
			return (' ');
		}
		evalp = 0;
	}
	if (evalvec) {
		if (evalvec == (char **)1) {
			doneinp = 1;
			reset();
		}
		if (evalp = *evalvec) {
			evalvec++;
			goto top;
		}
		evalvec = (char **)1;
		return ('\n');
	}
d1094 1
a1094 1
			if ((c = (unsigned)*arginp++) == 0) {
a1099 1
reread:
d1108 6
a1113 22
			if (ioctl(SHIN, TIOCGETP, &tty)==0 && (tty.sg_flags & RAW) == 0) {
				int ctpgrp;

				if (++sincereal > 25)
					goto oops;
				if (tpgrp != -1 &&
				    ioctl(FSHTTY, TIOCGPGRP, &ctpgrp) == 0 &&
				    tpgrp != ctpgrp) {
					ioctl(FSHTTY, TIOCSPGRP, &tpgrp);
					killpg(ctpgrp, SIGHUP);
printf("Reset tty pgrp from %d to %d\n", ctpgrp, tpgrp);
					goto reread;
				}
				if (adrof("ignoreeof")) {
					if (loginsh)
						printf("\nUse \"logout\" to logout.\n");
					else
						printf("\nUse \"exit\" to leave csh.\n");
					reset();
				}
				if (chkstop == 0)
					panystop(1);
a1114 1
oops:
a1117 1
		sincereal = 0;
d1145 1
a1145 1
		return (c&0377);
d1155 1
a1155 1
			xfree((char *)fbuf);
d1175 1
a1175 1
	return (c&0377);
@


0.0.1.0
log
@MNOS 1.2 version
@
text
@d1 2
a6 5
 *
 * $Log:	sh.lex.c,v $
 * Revision 1.1  86/02/24  20:23:28  sys
 * Initial revision
 * 
a8 1

d10 3
a12 3
 * Эти подпрограммы читают ввод и формируют список слов.
 * Здесь выполняется некоторая обработка , связанная со входной буферизацией
 * и с подстановками "history".
a130 4
#ifdef  GOGO
	GG( "Freelex comes\n" );
#endif  GOGO

a137 3
#ifdef  GOGO
	GG( "Freelex goes\n" ) ;
#endif  GOGO
d151 3
d174 1
a174 2
				seterrc(ediag("Unmatched ",
					      "Нет "), c1);
d181 1
a181 1
					c = QUOTED(c);
d184 1
a184 1
						c = QUOTED(c);
d240 1
a240 1
		c = QUOTED(c);
d256 1
a256 1
			c = QUOTED(c);
d269 1
a269 2
	seterr(ediag("Word too long",
		     "Слишком длинное слово"));
d279 1
a279 1
	register unsigned c;
d287 1
a287 1
		c = (*lap++);
d293 1
a293 1
			c = QUOTED(c);
d343 1
a343 1
		ungetC(QUOTEDS('$'));
d352 1
a352 1

d425 1
a425 2
	seterr(ediag("Variable syntax",
		     "Синтаксис переменной"));
d435 1
a435 2
		seterr(ediag("Expansion buf ovflo",
			     "Перполнен буфер расширения"));
d521 1
a521 2
			seterr(ediag("Bad ! form",
				     "Плохой формат !"));
d559 1
a559 2
			seterr(ediag("No prev sub",
				     "Нет предыдущей подстановки"));
d578 1
a578 2
			seterr(ediag("Bad substitute",
				     "Плохая подстановка"));
d603 1
a603 2
			seterr(ediag("No prev lhs",
				     "Нет пред. lhs"));
d626 1
a626 2
				seterr(ediag("Rhs too long",
					     "Длинная правая часть"));
d642 1
a642 2
		seterrc(ediag("Bad ! modifier: ",
			      "Плохой ! модификатор : "), c);
d677 1
a677 2
		seterr(ediag("Modifier failed",
			     "Модификация невозможна"));
d738 1
a738 2
					seterr(ediag("Subst buf ovflo",
						     "Переполнен буфер подстановки"));
d765 1
a765 1
				*xp = QUOTED(*xp);
d880 1
a880 2
		seterr(ediag("Bad ! arg selector",
			     "Плохой селектор ! аргументов"));
d965 1
a965 2
				seterr(ediag("No prev search",
					     "Нет пред. поиска"));
d1016 1
a1016 2
	seterr2(cp, ediag(": Event not found",
			  ": Не помню такой команды"));
a1064 1
	static sincereal;
d1066 1
a1066 1
	if (c = (unsigned)peekread) {
d1072 1
a1072 1
		if (c = (unsigned)*alvecp++)
a1086 22

	if(evalp) {
		if(c = (unsigned)*evalp++)
			return(c);
		if(*evalvec) {
			evalp = *evalvec++;
			return(' ');
		}
		evalp = 0;
	}
	if(evalvec) {
		if(evalvec == (char **)1) {
			doneinp = 1;
			reset();
		}
		if(evalp = *evalvec) {
			evalvec++;
			goto top;
		}
		evalvec = (char **)1;
		return('\n');
	}
d1094 1
a1094 1
			if ((c = (unsigned)*arginp++) == 0) {
d1108 1
a1108 9
			if (adrof("ignoreeof") && gtty(SHIN, &tty)==0 && (tty.sg_flags &
#ifndef МНОС
							CBREAK
#else
							(CBREAK|RAWI)
#endif  МНОС
			) == 0) {
				if (++sincereal > 25)
					goto oops;
d1110 1
a1110 2
					printf(ediag("\nUse \"logout\" to logout.\n",
						     "\nИспользуйте \"logout\" чтобы кончить сеанс.\n"));
d1112 1
a1112 2
					printf(ediag("\nUse \"exit\" to leave csh.\n",
						     "\nИспользуйте \"exit\" чтобы выйти из csh.\n"));
a1114 1
oops:
a1117 1
		sincereal = 0;
d1145 1
a1145 1
		return (c&0377);
d1175 1
a1175 1
	return (0377&c);
d1200 1
a1200 1
long l;
@
