head     1.2;
access   ;
symbols  BSD29:1.1.2.9 VAX:1.1;
locks    ;
comment  @ * @;


1.2
date     88.11.15.23.49.38;  author ache;  state Exp;
branches ;
next     1.1;

1.1
date     86.07.20.19.24.25;  author avg;  state Exp;
branches ;
next     ;


desc
@
VAX-овский имитатор старой библиотеки.
@


1.2
log
@В libjobs.a добавлены из 4.2: sigsetmask, sigblock
изменен в соотв. с 4.2 формат sigpause
@
text
@/* static  char *sccsid = "@@(#)$Header: sh.sig.c,v 1.1 86/07/20 19:24:25 avg Exp $/ Kiae"; */

/*
 * C shell - old jobs library sigrelse meant unblock mask
 *	     AND reinstall handler, so we simulate it here.
 */
#include <signal.h>

#define mask(s) (1L << ((s)-1))

static	int (*actions[NSIG])();
static	int achanged[NSIG];

/*
 * Perform action and save handler state.
 */
sigset(s, a)
	int s, (*a)();
{

	actions[s] = a;
	achanged[s] = 0;
	return ((int)signal(s, a));
}

/*
 * Release any masking of signal and
 * reinstall handler in case someone's
 * done a sigignore.
 */
sigrelse(s)
	int s;
{

	if (achanged[s]) {
		signal(s, actions[s]);
		achanged[s] = 0;
	}
	sigsetmask(sigblock(0L) &~ mask(s));
}

/*
 * Ignore signal but maintain state so sigrelse
 * will restore handler.  We avoid the overhead
 * of doing a signal for each sigrelse call by
 * marking the signal's action as changed.
 */
sigignore(s)
	int s;
{

	if (actions[s] != SIG_IGN)
		achanged[s] = 1;
	signal(s, SIG_IGN);
}
@


1.1
log
@VAX BSD4.2 version by alex (8-bits)
@
text
@d1 1
a1 1
/* static  char *sccsid = "@@(#)$Header: sh.sig.c,v 2.1 86/03/12 23:47:57 alex Exp $/ Kiae"; */
d9 1
a9 1
#define	mask(s)	(1 << ((s)-1))
d39 1
a39 1
	sigsetmask(sigblock(0) &~ mask(s));
@
