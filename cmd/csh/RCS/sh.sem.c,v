head     1.6;
access   ;
symbols  BSD29:1.1.2.9 AVG1:1.3 VAX:0.0.2.0 MNOS12:0.0.1;
locks    ;
comment  @ * @;


1.6
date     89.01.11.18.36.00;  author abs;  state Exp;
branches ;
next     1.5;

1.5
date     89.01.11.16.33.23;  author abs;  state Exp;
branches ;
next     1.4;

1.4
date     86.09.28.17.43.17;  author avg;  state Exp;
branches ;
next     1.3;

1.3
date     86.07.21.19.45.38;  author avg;  state Exp;
branches ;
next     1.2;

1.2
date     86.06.02.21.45.12;  author dmitry;  state Exp;
branches ;
next     1.1;

1.1
date     86.06.01.20.23.48;  author dmitry;  state Exp;
branches 1.1.2.9;
next     0.0;

0.0
date     86.06.01.19.20.10;  author dmitry;  state Exp;
branches 0.0.1.0 0.0.2.0;
next     ;

0.0.1.0
date     86.06.01.19.46.36;  author dmitry;  state Exp;
branches ;
next     ;

0.0.2.0
date     86.07.20.19.14.34;  author avg;  state Exp;
branches ;
next     ;

1.1.2.9
date     86.09.23.22.39.42;  author avg;  state Exp;
branches ;
next     ;


desc
@@


1.6
log
@syntax error
@
text
@#ifndef lint
/*NOXSTR*/
static  char rcsid[] = "$Header: sh.sem.c,v 1.5 89/01/11 16:33:23 abs Exp $";
/*YESXSTR*/
#endif  lint

/*
 * $Log:	sh.sem.c,v $
 * Revision 1.5  89/01/11  16:33:23  abs
 * Теперь можно писать в FIFOфайл даже если установлен noclobber.
 * 
 * Revision 1.4  86/09/28  17:43:17  avg
 * Неправильно обрабатывался sigint в неинтерактивном режиме.
 *
 * Revision 1.3  86/07/21  19:45:38  avg
 * Слита с версией alex-а из 4.2.
 *
 * Revision 1.2  86/06/02  21:45:12  dmitry
 * Слиянием с версией для МНОС 1.2 добавлены русские диагностики.
 *
 * Revision 1.1  86/06/01  20:23:48  dmitry
 * DEMOS & MNOS 2 version
 *
 */

#include "sh.h"
#include "sh.proc.h"
#include <sys/ioctl.h>

/*
 * C shell
 */

/*VARARGS 1*/
execute(t, wanttty, pipein, pipeout)
	register struct command *t;
	int wanttty, *pipein, *pipeout;
{
	bool forked = 0;
	struct biltins *bifunc;
	int pid = 0;
	int pv[2];

	if (t == 0)
		return;
	if ((t->t_dflg & FAND) && wanttty > 0)
		wanttty = 0;
	switch (t->t_dtyp) {

	case TCOM:
		if ((t->t_dcom[0][0] & 0377) == 0200)
			strcpy(t->t_dcom[0], t->t_dcom[0] + 1);
		if ((t->t_dflg & FREDO) == 0)
			Dfix(t);                /* $ " ' \ */
		if (t->t_dcom[0] == 0)
			return;
		/* fall into... */

	case TPAR:
		if (t->t_dflg & FPOU)
			mypipe(pipeout);
		/*
		 * Must do << early so parent will know
		 * where input pointer should be.
		 * If noexec then this is all we do.
		 */
		if (t->t_dflg & FHERE) {
			close(0);
			heredoc(t->t_dlef);
			if (noexec)
				close(0);
		}
		if (noexec)
			break;

		set("status", "0");

		/*
		 * This mess is the necessary kludge to handle the prefix
		 * builtins: nice, nohup, time.  These commands can also
		 * be used by themselves, and this is not handled here.
		 * This will also work when loops are parsed.
		 */
		while (t->t_dtyp == TCOM)
			if (eq(t->t_dcom[0], "nice"))
				if (t->t_dcom[1])
					if (any(t->t_dcom[1][0], "+-"))
						if (t->t_dcom[2]) {
							setname("nice");
							t->t_nice = getn(t->t_dcom[1]);
							lshift(t->t_dcom, 2);
							t->t_dflg |= FNICE;
						} else
							break;
					else {
						t->t_nice = 4;
						lshift(t->t_dcom, 1);
						t->t_dflg |= FNICE;
					}
				else
					break;
			else if (eq(t->t_dcom[0], "nohup"))
				if (t->t_dcom[1]) {
					t->t_dflg |= FNOHUP;
					lshift(t->t_dcom, 1);
				} else
					break;
			else if (eq(t->t_dcom[0], "time"))
				if (t->t_dcom[1]) {
					t->t_dflg |= FTIME;
					lshift(t->t_dcom, 1);
				} else
					break;
			else
				break;
		/*
		 * Check if we have a builtin function and remember which one.
		 */
		bifunc = t->t_dtyp == TCOM ? isbfunc(t) : (struct biltins *) 0;

		/*
		 * We fork only if we are timed, or are not the end of
		 * a parenthesized list and not a simple builtin function.
		 * Simple meaning one that is not pipedout, niced, nohupped,
		 * or &'d.
		 * It would be nice(?) to not fork in some of these cases.
		 */
		if (((t->t_dflg & FTIME) || (t->t_dflg & FPAR) == 0 &&
		     (!bifunc || t->t_dflg & (FPOU|FAND|FNICE|FNOHUP))))
#ifdef VFORK
		    if (t->t_dtyp == TPAR || t->t_dflg&(FREDO|FAND) || bifunc)
#endif
			{ forked++; pid = pfork(t, wanttty); }
#ifdef VFORK
		    else {
			int vffree();
			int ochild, osetintr, ohaderr, odidfds, odidcch;
			int oSHIN, oSHOUT, oSHDIAG, oOLDSTD, otpgrp;

			sighold(SIGCHLD);
			ochild = child; osetintr = setintr;
			ohaderr = haderr; odidfds = didfds; odidcch = didcch;
			oSHIN = SHIN; oSHOUT = SHOUT;
			oSHDIAG = SHDIAG; oOLDSTD = OLDSTD; otpgrp = tpgrp;
			Vsav = Vdp = 0; Vav = 0;
			pid = vfork();
			if (pid < 0) {
				sigrelse(SIGCHLD);
				error(ediag("No more processes",
					    "Слишком много процессов"));
			}
			forked++;
			if (pid) {
				child = ochild; setintr = osetintr;
				haderr = ohaderr; didfds = odidfds;
				didcch = odidcch; SHIN = oSHIN;
				SHOUT = oSHOUT; SHDIAG = oSHDIAG;
				OLDSTD = oOLDSTD; tpgrp = otpgrp;
				xfree(Vsav); Vsav = 0;
				xfree(Vdp); Vdp = 0;
				xfree(Vav); Vav = 0;
				/* this is from pfork() */
				palloc(pid, t);
				sigrelse(SIGCHLD);
			} else {
				/* this is from pfork() */
				int pgrp;
				bool ignint = 0;

				if (setintr)
					ignint =
					    (tpgrp == -1 && (t->t_dflg&FINT))
					    || gointr && eq(gointr, "-");
				pgrp = pcurrjob ? pcurrjob->p_jobid : getpid();
				child++;
				if (setintr) {
					setintr = 0;
/* #ifdef notdef  @@VG */
					sigsys(SIGCHLD, SIG_DFL);
/* #endif */
					sigsys(SIGINT, ignint ? SIG_IGN : vffree);
					sigsys(SIGQUIT, ignint ? SIG_IGN : SIG_DFL);
					if (wanttty >= 0 && setstop) {
						sigsys(SIGTSTP, SIG_DFL);
						sigsys(SIGTTIN, SIG_DFL);
						sigsys(SIGTTOU, SIG_DFL);
					}
					sigsys(SIGTERM, parterm);
				} else if (tpgrp == -1 && (t->t_dflg&FINT)) {
					sigsys(SIGINT, SIG_IGN);
					sigsys(SIGQUIT, SIG_IGN);
				}
				if (wanttty > 0)
					ioctl(FSHTTY, TIOCSPGRP, &pgrp);
				if (wanttty >= 0 && tpgrp >= 0)
					setpgrp(0, pgrp);
				if (tpgrp > 0)
					tpgrp = 0;
				if (t->t_dflg & FNOHUP)
					sigsys(SIGHUP, SIG_IGN);
				if (t->t_dflg & FNICE)
					nice(t->t_nice);
			}

		}
#endif
		if (pid != 0) {
			/*
			 * It would be better if we could wait for the
			 * whole job when we knew the last process
			 * had been started.  Pwait, in fact, does
			 * wait for the whole job anyway, but this test
			 * doesn't really express our intentions.
			 */
			if (didfds==0 && t->t_dflg&FPIN)
				close(pipein[0]), close(pipein[1]);
			if ((t->t_dflg & (FPOU|FAND)) == 0)
				pwait();
			break;
		}
		doio(t, pipein, pipeout);
		if (t->t_dflg & FPOU)
			close(pipeout[0]), close(pipeout[1]);

		/*
		 * Perform a builtin function.
		 * If we are not forked, arrange for possible stopping
		 */
		if (bifunc) {
			func(t, bifunc);
			if (forked)
				exitstat();
			break;
		}
		if (t->t_dtyp != TPAR) {
			doexec(t);
			/*NOTREACHED*/
		}
		/*
		 * For () commands must put new 0,1,2 in FSH* and recurse
		 */
		OLDSTD = dcopy(0, FOLDSTD);
		SHOUT = dcopy(1, FSHOUT);
		SHDIAG = dcopy(2, FSHDIAG);
		close(SHIN), SHIN = -1;
		didcch = 0, didfds = 0;
		wanttty = -1;
		t->t_dspr->t_dflg |= t->t_dflg & FINT;
		execute(t->t_dspr, wanttty);
		exitstat();

	case TFIL:
		t->t_dcar->t_dflg |= FPOU |
		    (t->t_dflg & (FPIN|FAND|FDIAG|FINT));
		execute(t->t_dcar, wanttty, pipein, pv);
		t->t_dcdr->t_dflg |= FPIN |
		    (t->t_dflg & (FPOU|FAND|FPAR|FINT));
		if (wanttty > 0)
			wanttty = 0;            /* got tty already */
		execute(t->t_dcdr, wanttty, pv, pipeout);
		break;

	case TLST:
		if (t->t_dcar) {
			t->t_dcar->t_dflg |= t->t_dflg & FINT;
			execute(t->t_dcar, wanttty);
			/*
			 * In strange case of A&B make a new job after A
			 */
			if (t->t_dcar->t_dflg&FAND && t->t_dcdr &&
			    (t->t_dcdr->t_dflg&FAND) == 0)
				pendjob();
		}
		if (t->t_dcdr) {
			t->t_dcdr->t_dflg |= t->t_dflg & (FPAR|FINT);
			execute(t->t_dcdr, wanttty);
		}
		break;

	case TOR:
	case TAND:
		if (t->t_dcar) {
			t->t_dcar->t_dflg |= t->t_dflg & FINT;
			execute(t->t_dcar, wanttty);
			if ((getn(value("status")) == 0) != (t->t_dtyp == TAND))
				return;
		}
		if (t->t_dcdr) {
			t->t_dcdr->t_dflg |= t->t_dflg & (FPAR|FINT);
			execute(t->t_dcdr, wanttty);
		}
		break;
	}
	/*
	 * Fall through for all breaks from switch
	 *
	 * If there will be no more executions of this
	 * command, flush all file descriptors.
	 * Places that turn on the FREDO bit are responsible
	 * for doing donefds after the last re-execution
	 */
	if (didfds && !(t->t_dflg & FREDO))
		donefds();
}

#ifdef VFORK
vffree()
{
	register char **v;

	if (v = gargv)
		gargv = 0, xfree(gargv);
	if (v = pargv)
		pargv = 0, xfree(pargv);
	_exit(1);
}
#endif

/*
 * Perform io redirection.
 * We may or maynot be forked here.
 */
doio(t, pipein, pipeout)
	register struct command *t;
	int *pipein, *pipeout;
{
	register char *cp;
	register int flags = t->t_dflg;

	if (didfds || (flags & FREDO))
		return;
	if ((flags & FHERE) == 0) {     /* FHERE already done */
		close(0);
		if (cp = t->t_dlef) {
			cp = globone(Dfix1(cp));
			xfree(cp);
			if (open(cp, 0) < 0)
				Perror(cp);
		} else if (flags & FPIN)
			dup(pipein[0]), close(pipein[0]), close(pipein[1]);
		else if ((flags & FINT) && tpgrp == -1)
			close(0), open("/dev/null", 0);
		else
			dup(OLDSTD);
	}
	close(1);
	if (cp = t->t_drit) {
		cp = globone(Dfix1(cp));
		xfree(cp);
		if ((flags & FCAT) && open(cp, 1) >= 0)
			lseek(1, 0l, 2);
		else {
			if (!(flags & FANY) && adrof("noclobber")) {
				if (flags & FCAT)
					Perror(cp);
				chkclob(cp);
			}
			if (creat(cp, 0666) < 0)
				Perror(cp);
		}
	} else if (flags & FPOU)
		dup(pipeout[1]);
	else
		dup(SHOUT);

	close(2);
	dup((flags & FDIAG) ? 1 : SHDIAG);
	didfds = 1;
}

mypipe(pv)
	register int *pv;
{

	if (pipe(pv) < 0)
		goto oops;
	pv[0] = dmove(pv[0], -1);
	pv[1] = dmove(pv[1], -1);
	if (pv[0] >= 0 && pv[1] >= 0)
		return;
oops:
	error(ediag("Can't make pipe",
		    "Не могу создать трубу"));
}

chkclob(cp)
	register char *cp;
{
	struct stat stb;

	if (stat(cp, &stb) < 0)
		return;
	/* в устройства и fifo писать можно ВСЕГДА */
        if((stb.st_mode & S_IFMT) == S_IFCHR ||
           (stb.st_mode & S_IFMT) == S_IFIFO      )return;
	error(ediag("%s: File exists",
		    "%s: Файл существует"), cp);
}
@


1.5
log
@Теперь можно писать в FIFOфайл даже если установлен noclobber.
@
text
@d3 1
a3 1
static  char rcsid[] = "$Header: sh.sem.c,v 1.4 86/09/28 17:43:17 avg Exp $";
d8 4
a11 1
 * $Log:        sh.sem.c,v $
d394 2
a395 2
	if ((stb.st_mode & S_IFMT) == S_IFCHR) ||
	    (stb.st_mode & S_IFMT) == S_IFIFO)       )return;
@


1.4
log
@Неправильно обрабатывался sigint в неинтерактивном режиме.
@
text
@d3 1
a3 1
static  char rcsid[] = "$Header: sh.sem.c,v 1.3 86/07/21 19:45:38 avg Exp $";
d9 3
d390 3
a392 2
	if ((stb.st_mode & S_IFMT) == S_IFCHR)
		return;
@


1.3
log
@Слита с версией alex-а из 4.2.
@
text
@d3 1
a3 1
static  char rcsid[] = "$Header: sh.sem.c,v 1.2 86/06/02 21:45:12 dmitry Exp $";
d9 3
d172 1
a172 1
#ifdef notdef
d174 1
a174 1
#endif
@


1.2
log
@Слиянием с версией для МНОС 1.2 добавлены русские диагностики.
@
text
@d3 1
a3 3

static  char *rcsid = "$Header: sh.sem.c,v 1.1 86/06/01 20:23:48 dmitry Exp $";

d9 3
d169 1
d171 1
@


1.1
log
@DEMOS & MNOS 2 version
@
text
@d4 1
a4 1
static  char *rcsid = "$Header: sh.sem.c,v 0.0 86/04/20 21:25:16 root Exp $";
d10 4
a13 1
 * $Log$
d41 1
a41 1
		if ((t->t_dcom[0][0] & (QUOTE|TRIM)) == QUOTE)
d139 2
a140 1
				error("No more processes");
d370 2
a371 1
	error("Can't make pipe");
d383 2
a384 1
	error("%s: File exists", cp);
@


1.1.2.9
log
@ORIGINAL 2.9 VERSION
@
text
@d1 2
a2 1
static	char *sccsid = "@@(#)sh.sem.c 4.1 10/9/80";
d4 9
d41 1
a41 1
			Dfix(t);		/* $ " ' \ */
d243 1
a243 1
			wanttty = 0;		/* got tty already */
d316 1
a316 1
	if ((flags & FHERE) == 0) {	/* FHERE already done */
@


0.0
log
@Basic version
@
text
@d1 12
a12 2
/*      @@(#)sh.sem.c    2.1     SCCS id keyword */
/* Copyright (c) 1980 Regents of the University of California */
d14 2
d21 2
a22 1
execute(t, pipein, pipeout)
d24 1
a24 1
	int *pipein, *pipeout;
a25 3
	int pid, flags, pv[2];
	register struct command *t1;
	register char *cp;
d27 3
a29 7
	bool shudint, shudhup;
#ifdef VFORK
	int (*savint)(), vffree();
	int ochild, osetintr, ohaderr, otimflg, odidfds, odidcch;
	int oSHIN, oSHOUT, oSHDIAG, oOLDSTD;
	int isvfork = 0;
#endif
d33 2
d38 2
a39 3
		cp = t->t_dcom[0];
		if ((cp[0] & (QUOTE|TRIM)) == QUOTE)
			strcpy(cp, cp + 1);
d47 1
a47 2
		flags = t->t_dflg;
		if (flags & FPOU)
a49 10
		 * A child will be interruptible only under very
		 * certain conditions:
		 *      we must be monkeying with interrupts
		 *      the child must not be &'ed
		 *      we must not have had an "onintr -"
		 */
		shudint = setintr && (flags & FINT) == 0 && (!gointr || !eq(gointr, "-"));
		shudhup = (flags & FAND) == 0;

		/*
d51 2
a52 1
		 * where input pointer should be
d54 4
a57 10
		if (flags & FHERE)
			close(0), heredoc(t->t_dlef);

		/*
		 * If not executing commands then
		 * all we must do is read forward in the input to
		 * account for << redirection if present.
		 */
		if (noexec) {
			if (flags & FHERE)
a58 1
			return;
d60 2
a63 1
		pid = 0;
d66 4
a69 1
		 * Built-in functions
d71 36
a106 8
		if (t->t_dtyp == TCOM && isbfunc(t->t_dcom[0])) {
			/*
			 * If output is piped, or running & and we would
			 * eventually fork for non-builtin commands,
			 * then do it now, so we won't block.
			 */
			if ((flags & (FPOU|FAND)) && (flags & FPAR) == 0)
				pid = dofork(shudint, shudhup), forked++;
a107 29
			/*
			 * If the builtin is actually executed (some, e.g.
			 * time and nice may refuse to execute here)
			 * then either exit (if we forked) or close i/o
			 * and continue execution (if we didn't).
			 */
			if (pid == 0) {
				doio(t, pipein, pipeout);
				if (flags & FPOU) {
					close(pipeout[0]), close(pipeout[1]);
					pipeout[0] = pipeout[1] = -1;
				}
				if (setintr && forked) {
					if (shudint)
						signal(SIGINT, SIG_DFL), signal(SIGQUIT, SIG_DFL);
					signal(SIGTERM, parterm);
					if (flags & FINT)
						setintr = 0;
				}
				if (func(t, pipein, pipeout)) {
					if (forked)
						exitstat();
					if (didfds && !(t->t_dflg & FREDO))
						donefds();
					return;
				}
			}
		}

d109 5
a113 4
		 * Now, we must make a new process since either the
		 * command is non-builtin, a parenthesized list,
		 * or builtin such as time or nice which really
		 * requires a child.
d115 2
a116 1
		if (!forked && (flags & FPAR) == 0)
d118 1
a118 2
			if (t->t_dtyp == TPAR || (flags&FREDO) ||
			    eq(t->t_dcom[0], "nice") || eq(t->t_dcom[0], "nohup"))
d120 1
a120 1
				pid = dofork(shudint, shudhup);
d122 54
a175 13
			else {
				savint = signal(SIGINT, SIG_IGN);
				ochild = child; osetintr = setintr;
				ohaderr = haderr; otimflg = timflg;
				odidfds = didfds; odidcch = didcch;
				oSHIN = SHIN; oSHOUT = SHOUT;
				oSHDIAG = SHDIAG; oOLDSTD = OLDSTD;
				Vsav = Vdp = 0; Vav = 0;
				isvfork++;
				pid = vfork();
				if (pid < 0) {
					signal(SIGINT, savint);
					error("No more processes");
d177 10
a186 16
				if (pid == 0) {
					child++;
					signal(SIGINT, shudint ? SIG_DFL : savint);
					if (!shudhup)
						signal(SIGHUP, SIG_IGN);
				} else {
					child = ochild; setintr = osetintr;
					haderr = ohaderr; timflg = otimflg;
					didfds = odidfds; didcch = odidcch;
					SHIN = oSHIN; SHOUT = oSHOUT;
					SHDIAG = oSHDIAG; OLDSTD = oOLDSTD;
					xfree(Vsav), Vsav = 0;
					xfree(Vdp), Vdp = 0;
					xfree(Vav), Vav = 0;
					signal(SIGINT, savint);
				}
d188 2
d193 5
a197 2
			 * The parent path (or nobody does this if
			 * (flags & FPAR), i.e. date in (set;date))
d199 1
a199 1
			if (didfds == 0 && (flags & FPIN))
d201 3
a203 15
			if (didfds && !(t->t_dflg & FREDO))
				donefds();
			if (flags & FPRS)
				printf("%d\n", pid), set("child", putn(pid));
			/*
			 * Unless output is piped or command is &
			 * wait for it.
			 */
			if (t->t_dtyp == TCOM)
				cadd(pid, t->t_dcom[0]);
			else
				cadd(pid, "()");
			if ((flags & (FPOU|FAND)) == 0)
				pwait(pid);
			return;
a204 9

		/*
		 * Insure that this (child) shell doesn't muck on
		 */
		child++;

		/*
		 * If havent yet, finally set up the file descriptors.
		 */
d206 1
a206 1
		if (flags & FPOU)
d210 2
a211 4
		 * If mucking with interrupts fix interrupt, quit,
		 * and terminate handling ... in any case set setintr
		 * to 0 if we are not interruptible so that no further
		 * interrupt mucking occurs.
d213 5
a217 13
		if (setintr) {
			if (shudint) {
				signal(SIGQUIT, SIG_DFL);
#ifdef VFORK
				if (isvfork)
					signal(SIGINT, vffree);
				else
#endif
					signal(SIGINT, SIG_DFL);
			}
			signal(SIGTERM, parterm);
			if (flags & FINT)
				setintr = 0;
d219 4
a222 1

d226 9
a234 36
		if (t->t_dtyp == TPAR) {
			t1 = t->t_dspr;
			t1->t_dflg |= flags & FINT;
			OLDSTD = dcopy(0, FOLDSTD);
			SHOUT = dcopy(1, FSHOUT);
			SHDIAG = dcopy(2, FSHDIAG);
			close(SHIN), SHIN = -1;
			didcch = 0, didfds = 0;
			execute(t1);
			exitstat();
		}
		if (eq(t->t_dcom[0], "nice")) {
/* sigh...
			nice(20);
			nice(-10);
*/
			cp = t->t_dcom[1];
			if (any(cp[0], "+-"))
				nice(getn(cp)), lshift(t->t_dcom, 2);
			else
				nice(4), lshift(t->t_dcom, 1);
			t->t_dflg = FPAR | FREDO;
			execute(t);
			exitstat();
		}
		if (eq(t->t_dcom[0], "nohup")) {
			if (setintr == 0)
				signal(SIGHUP, SIG_IGN);
			signal(SIGTERM, SIG_IGN);
			lshift(t->t_dcom, 1);
			t->t_dflg = FPAR | FREDO;
			execute(t);
			exitstat();
		}
		doexec(t);
		/* no return */
d237 9
a245 8
		flags = t->t_dflg;
		t1 = t->t_dcar;
		t1->t_dflg |= FPOU | (flags & (FPIN|FINT|FPRS|FDIAG));
		execute(t1, pipein, pv);
		t1 = t->t_dcdr;
		t1->t_dflg |= FPIN | (flags & (FPOU|FINT|FAND|FPRS|FPAR));
		execute(t1, pv, pipeout);
		return;
d248 15
a262 6
		flags = t->t_dflg & FINT;
		if (t1 = t->t_dcar)
			t1->t_dflg |= flags, execute(t1);
		if (t1 = t->t_dcdr)
			t1->t_dflg |= t->t_dflg & (FINT|FPAR), execute(t1);
		return;
d266 3
a268 3
		flags = t->t_dflg & FINT;
		if (t1 = t->t_dcar) {
			t1->t_dflg |= flags, execute(t1);
d272 5
a276 3
		if (t1 = t->t_dcdr)
			t1->t_dflg |= t->t_dflg & (FINT|FPAR), execute(t1);
		return;
d278 10
d303 4
a312 1
	char *dp;
d316 14
a329 17
	if (flags & FHERE)
		goto skipin;
	close(0);
	if (cp = t->t_dlef) {
		cp = globone(dp = Dfix1(cp));
		xfree(dp);
		xfree(cp);
		if (open(cp, 0) < 0)
			Perror(cp);
	} else if (flags & FPIN)
		dup(pipein[0]), close(pipein[0]), close(pipein[1]);
	else if (flags & FINT)
		close(0), open("/dev/null", 0);
	else
		dup(OLDSTD);

skipin:
d332 1
a332 2
		cp = globone(dp = Dfix1(cp));
		xfree(dp);
a341 4
#ifdef V6
			if (creat(cp, 0644) < 0)
				Perror(cp);
#else
a343 1
#endif
d345 4
a348 2
	} else
		dup((flags & FPOU) ? pipeout[1] : SHOUT);
a352 21
}

dofork(shudint, shudhup)
	bool shudint, shudhup;
{
	register int pid, (*savint)();

	savint = signal(SIGINT, SIG_IGN);
	pid = fork();
	if (pid < 0) {
		signal(SIGINT, savint);
		error("No more processes");
	}
	if (pid == 0) {
		child++;
		signal(SIGINT, shudint ? SIG_DFL : savint);
		if (!shudhup)
			signal(SIGHUP, SIG_IGN);
	} else
		signal(SIGINT, savint);
	return (pid);
@


0.0.2.0
log
@VAX BSD 4.2 version by alex (8-bits)
@
text
@d1 2
a2 2
/* $Header: sh.sem.c,v 2.1 86/03/12 23:47:53 alex Exp $ /Kiae */

a3 2
#include "sh.proc.h"
#include <sys/ioctl.h>
d9 1
a9 2
/*VARARGS 1*/
execute(t, wanttty, pipein, pipeout)
d11 1
a11 1
	int wanttty, *pipein, *pipeout;
d13 3
d17 7
a23 3
	struct biltins *bifunc;
	int pid = 0;
	int pv[2];
a26 2
	if ((t->t_dflg & FAND) && wanttty > 0)
		wanttty = 0;
d30 3
a32 2
		if ((t->t_dcom[0][0] & (0377)) == 0200)
			strcpy(t->t_dcom[0], t->t_dcom[0] + 1);
d34 1
a34 1
			Dfix(t);		/* $ " ' \ */
d40 2
a41 1
		if (t->t_dflg & FPOU)
d44 10
d55 1
a55 2
		 * where input pointer should be.
		 * If noexec then this is all we do.
d57 10
a66 4
		if (t->t_dflg & FHERE) {
			close(0);
			heredoc(t->t_dlef);
			if (noexec)
d68 1
a69 2
		if (noexec)
			break;
d72 1
d75 1
a75 4
		 * This mess is the necessary kludge to handle the prefix
		 * builtins: nice, nohup, time.  These commands can also
		 * be used by themselves, and this is not handled here.
		 * This will also work when loops are parsed.
d77 8
a84 36
		while (t->t_dtyp == TCOM)
			if (eq(t->t_dcom[0], "nice"))
				if (t->t_dcom[1])
					if (any(t->t_dcom[1][0], "+-"))
						if (t->t_dcom[2]) {
							setname("nice");
							t->t_nice = getn(t->t_dcom[1]);
							lshift(t->t_dcom, 2);
							t->t_dflg |= FNICE;
						} else
							break;
					else {
						t->t_nice = 4;
						lshift(t->t_dcom, 1);
						t->t_dflg |= FNICE;
					}
				else
					break;
			else if (eq(t->t_dcom[0], "nohup"))
				if (t->t_dcom[1]) {
					t->t_dflg |= FNOHUP;
					lshift(t->t_dcom, 1);
				} else
					break;
			else if (eq(t->t_dcom[0], "time"))
				if (t->t_dcom[1]) {
					t->t_dflg |= FTIME;
					lshift(t->t_dcom, 1);
				} else
					break;
			else
				break;
		/*
		 * Check if we have a builtin function and remember which one.
		 */
		bifunc = t->t_dtyp == TCOM ? isbfunc(t) : (struct biltins *) 0;
d86 29
d116 4
a119 5
		 * We fork only if we are timed, or are not the end of
		 * a parenthesized list and not a simple builtin function.
		 * Simple meaning one that is not pipedout, niced, nohupped,
		 * or &'d.
		 * It would be nice(?) to not fork in some of these cases.
d121 1
a121 2
		if (((t->t_dflg & FTIME) || (t->t_dflg & FPAR) == 0 &&
		     (!bifunc || t->t_dflg & (FPOU|FAND|FNICE|FNOHUP))))
d123 2
a124 1
		    if (t->t_dtyp == TPAR || t->t_dflg&(FREDO|FAND) || bifunc)
d126 1
a126 1
			{ forked++; pid = pfork(t, wanttty); }
d128 13
a140 58
		    else {
			int vffree();
			int ochild, osetintr, ohaderr, odidfds, odidcch;
			int oSHIN, oSHOUT, oSHDIAG, oOLDSTD, otpgrp;

			sighold(SIGCHLD);
			ochild = child; osetintr = setintr;
			ohaderr = haderr; odidfds = didfds; odidcch = didcch;
			oSHIN = SHIN; oSHOUT = SHOUT;
			oSHDIAG = SHDIAG; oOLDSTD = OLDSTD; otpgrp = tpgrp;
			Vsav = Vdp = 0; Vav = 0;
			pid = vfork();
			if (pid < 0) {
				sigrelse(SIGCHLD);
				error("No more processes");
			}
			forked++;
			if (pid) {
				child = ochild; setintr = osetintr;
				haderr = ohaderr; didfds = odidfds;
				didcch = odidcch; SHIN = oSHIN;
				SHOUT = oSHOUT; SHDIAG = oSHDIAG;
				OLDSTD = oOLDSTD; tpgrp = otpgrp;
				xfree(Vsav); Vsav = 0;
				xfree(Vdp); Vdp = 0;
				xfree(Vav); Vav = 0;
				/* this is from pfork() */
				palloc(pid, t);
				sigrelse(SIGCHLD);
			} else {
				/* this is from pfork() */
				int pgrp;
				bool ignint = 0;

				if (setintr)
					ignint =
					    (tpgrp == -1 && (t->t_dflg&FINT))
					    || gointr && eq(gointr, "-");
				pgrp = pcurrjob ? pcurrjob->p_jobid : getpid();
				child++;
				if (setintr) {
					setintr = 0;
#ifdef notdef
					sigsys(SIGCHLD, SIG_DFL);
#endif
					sigsys(SIGINT,
					    ignint ? SIG_IGN : vffree);
					sigsys(SIGQUIT,
					    ignint ? SIG_IGN : SIG_DFL);
					if (wanttty >= 0) {
						sigsys(SIGTSTP, SIG_DFL);
						sigsys(SIGTTIN, SIG_DFL);
						sigsys(SIGTTOU, SIG_DFL);
					}
					sigsys(SIGTERM, parterm);
				} else if (tpgrp == -1 && (t->t_dflg&FINT)) {
					sigsys(SIGINT, SIG_IGN);
					sigsys(SIGQUIT, SIG_IGN);
d142 16
a157 10
				if (wanttty > 0)
					ioctl(FSHTTY, TIOCSPGRP, &pgrp);
				if (wanttty >= 0 && tpgrp >= 0)
					setpgrp(0, pgrp);
				if (tpgrp > 0)
					tpgrp = 0;
				if (t->t_dflg & FNOHUP)
					sigsys(SIGHUP, SIG_IGN);
				if (t->t_dflg & FNICE)
					nice(t->t_nice);
a158 2

		}
d162 2
a163 5
			 * It would be better if we could wait for the
			 * whole job when we knew the last process
			 * had been started.  Pwait, in fact, does
			 * wait for the whole job anyway, but this test
			 * doesn't really express our intentions.
d165 1
a165 1
			if (didfds==0 && t->t_dflg&FPIN)
d167 15
a181 3
			if ((t->t_dflg & (FPOU|FAND)) == 0)
				pwait();
			break;
d183 9
d193 1
a193 1
		if (t->t_dflg & FPOU)
d197 4
a200 2
		 * Perform a builtin function.
		 * If we are not forked, arrange for possible stopping
d202 13
a214 5
		if (bifunc) {
			func(t, bifunc);
			if (forked)
				exitstat();
			break;
d216 1
a216 4
		if (t->t_dtyp != TPAR) {
			doexec(t);
			/*NOTREACHED*/
		}
d220 36
a255 9
		OLDSTD = dcopy(0, FOLDSTD);
		SHOUT = dcopy(1, FSHOUT);
		SHDIAG = dcopy(2, FSHDIAG);
		close(SHIN), SHIN = -1;
		didcch = 0, didfds = 0;
		wanttty = -1;
		t->t_dspr->t_dflg |= t->t_dflg & FINT;
		execute(t->t_dspr, wanttty);
		exitstat();
d258 8
a265 9
		t->t_dcar->t_dflg |= FPOU |
		    (t->t_dflg & (FPIN|FAND|FDIAG|FINT));
		execute(t->t_dcar, wanttty, pipein, pv);
		t->t_dcdr->t_dflg |= FPIN |
		    (t->t_dflg & (FPOU|FAND|FPAR|FINT));
		if (wanttty > 0)
			wanttty = 0;		/* got tty already */
		execute(t->t_dcdr, wanttty, pv, pipeout);
		break;
d268 6
a273 15
		if (t->t_dcar) {
			t->t_dcar->t_dflg |= t->t_dflg & FINT;
			execute(t->t_dcar, wanttty);
			/*
			 * In strange case of A&B make a new job after A
			 */
			if (t->t_dcar->t_dflg&FAND && t->t_dcdr &&
			    (t->t_dcdr->t_dflg&FAND) == 0)
				pendjob();
		}
		if (t->t_dcdr) {
			t->t_dcdr->t_dflg |= t->t_dflg & (FPAR|FINT);
			execute(t->t_dcdr, wanttty);
		}
		break;
d277 3
a279 3
		if (t->t_dcar) {
			t->t_dcar->t_dflg |= t->t_dflg & FINT;
			execute(t->t_dcar, wanttty);
d283 3
a285 5
		if (t->t_dcdr) {
			t->t_dcdr->t_dflg |= t->t_dflg & (FPAR|FINT);
			execute(t->t_dcdr, wanttty);
		}
		break;
a286 10
	/*
	 * Fall through for all breaks from switch
	 *
	 * If there will be no more executions of this
	 * command, flush all file descriptors.
	 * Places that turn on the FREDO bit are responsible
	 * for doing donefds after the last re-execution
	 */
	if (didfds && !(t->t_dflg & FREDO))
		donefds();
a301 4
/*
 * Perform io redirection.
 * We may or maynot be forked here.
 */
d308 1
d312 17
a328 14
	if ((flags & FHERE) == 0) {	/* FHERE already done */
		close(0);
		if (cp = t->t_dlef) {
			cp = globone(Dfix1(cp));
			xfree(cp);
			if (open(cp, 0) < 0)
				Perror(cp);
		} else if (flags & FPIN)
			dup(pipein[0]), close(pipein[0]), close(pipein[1]);
		else if ((flags & FINT) && tpgrp == -1)
			close(0), open("/dev/null", 0);
		else
			dup(OLDSTD);
	}
d331 2
a332 1
		cp = globone(Dfix1(cp));
d342 4
d348 1
d350 2
a351 4
	} else if (flags & FPOU)
		dup(pipeout[1]);
	else
		dup(SHOUT);
d356 21
@


0.0.1.0
log
@MNOS 1.2 version
@
text
@d1 2
a6 5
 *
 * $Log:	sh.sem.c,v $
 * Revision 1.1  86/02/24  20:23:47  sys
 * Initial revision
 * 
d31 1
a31 1
		if ((cp[0] & (0377)) == 0200)
d140 1
a140 2
					error(ediag("No more processes",
						    "Слишком много процессов"));
d280 1
a280 2
			if ((getn(value("status")) == 0) == (t->t_dtyp == TOR))
				/* Bug fixed by @@VG: 27.06.85: there was TAND */
d367 1
a367 2
		error(ediag("No more processes",
			    "Слишком много процессов"));
d390 1
a390 2
	error(ediag("Can't make pipe",
		    "Не могу создать трубу"));
d402 1
a402 2
	error(ediag("%s: File exists",
		    "%s: Файл существует"), cp);
@
