head     1.4;
access   ;
symbols  BSD29:1.1.2.9 AVG1:1.2 VAX:0.0.2.0 MNOS12:0.0.1;
locks    ;
comment  @ * @;


1.4
date     89.05.06.16.27.27;  author avg;  state Exp;
branches ;
next     1.3;

1.3
date     89.05.03.21.21.12;  author avg;  state Exp;
branches ;
next     1.2;

1.2
date     86.07.20.21.15.38;  author avg;  state Exp;
branches ;
next     1.1;

1.1
date     86.06.01.20.19.06;  author dmitry;  state Exp;
branches 1.1.2.9;
next     0.0;

0.0
date     86.06.01.19.16.56;  author dmitry;  state Exp;
branches 0.0.1.0 0.0.2.0;
next     ;

0.0.1.0
date     86.06.01.19.39.16;  author dmitry;  state Exp;
branches ;
next     ;

0.0.2.0
date     86.07.20.19.08.23;  author avg;  state Exp;
branches ;
next     ;

1.1.2.9
date     86.09.23.22.33.46;  author avg;  state Exp;
branches ;
next     ;


desc
@@


1.4
log
@Был вынесен perror.
@
text
@#ifndef lint
/*NOXSTR*/
static  char *rcsid = "$Header: sh.err.c,v 1.3 89/05/03 21:21:12 avg Exp $";
/*YESXSTR*/
#endif  lint

/*
 * $Log:	sh.err.c,v $
 * Revision 1.3  89/05/03  21:21:12  avg
 * Сделана подстановка переменных в prompt.
 * 
 * Revision 1.2  86/07/20  21:15:38  avg
 * Слита с версией alex-а из 4.2.
 * 
 * Revision 1.1  86/06/01  20:19:06  dmitry
 * DEMOS & MNOS 2 version
 *
 */

#include "sh.h"
#include <sys/ioctl.h>

/*
 * C Shell
 */

bool    errspl;                 /* Argument to error was spliced by seterr2 */
char    one[2] = { '1', 0 };
char    *onev[2] = { one, NOSTR };
/*
 * Print error string s with optional argument arg.
 * This routine always resets or exits.  The flag haderr
 * is set so the routine who catches the unwind can propogate
 * it if they want.
 *
 * Note that any open files at the point of error will eventually
 * be closed in the routine process in sh.c which is the only
 * place error unwinds are ever caught.
 */
error(s, arg)
	char *s;
{
	register char **v;
	register char *ep;
	extern char *pprompt;

	/*
	 * Must flush before we print as we wish output before the error
	 * to go on (some form of) standard output, while output after
	 * goes on (some form of) diagnostic output.
	 * If didfds then output will go to 1/2 else to FSHOUT/FSHDIAG.
	 * See flush in sh.print.c.
	 */
	flush();
	haderr = 1;             /* Now to diagnostic output */
	timflg = 0;             /* This isn't otherwise reset */
	if (v = pargv)
		pargv = 0, blkfree(v);
	if (v = gargv)
		gargv = 0, blkfree(v);

	/*
	 * A zero arguments causes no printing, else print
	 * an error diagnostic here.
	 */
	if (s)
		printf(s, arg), printf(".\n");

	didfds = 0;             /* Forget about 0,1,2 */
	if ((ep = err) && errspl) {
		errspl = 0;
		xfree(ep);
	}
	errspl = 0;

	/*
	 * Reset the state of the input.
	 * This buffered seek to end of file will also
	 * clear the while/foreach stack.
	 */
	btoeof();

	/*
	 * Go away if -e or we are a child shell
	 */
	if (exiterr || child)
		exit(1);

	setq("status", onev, &shvhed);
	if (tpgrp > 0)
		ioctl(FSHTTY, TIOCSPGRP, &tpgrp);
	if( pprompt ) {
		pprompt = 0;
		setquoted("prompt", "% ");
	}
	reset();                /* Unwind */
}

/*
 * Perror is the shells version of perror which should otherwise
 * never be called.
 */
Perror(s)
	char *s;
{
	extern errno;

	perror(s);
	errno = 0;
	error(NOSTR);           /* To exit or unwind */
}

bferr(cp)
	char *cp;
{
	flush();
	haderr = 1;
	printf("%s: ", bname);
	error(cp);
}

/*
 * The parser and scanner set up errors for later by calling seterr,
 * which sets the variable err as a side effect; later to be tested,
 * e.g. in process.
 */
seterr(s)
	char *s;
{

	if (err == 0)
		err = s, errspl = 0;
}

/* Set err to a splice of cp and dp, to be freed later in error() */
seterr2(cp, dp)
	char *cp, *dp;
{

	if (err)
		return;
	err = strspl(cp, dp);
	errspl++;
}

/* Set err to a splice of cp with a string form of character d */
seterrc(cp, d)
	char *cp, d;
{
	char chbuf[2];

	chbuf[0] = d;
	chbuf[1] = 0;
	seterr2(cp, chbuf);
}
@


1.3
log
@Сделана подстановка переменных в prompt.
@
text
@d3 1
a3 1
static  char *rcsid = "$Header: sh.err.c,v 1.2 86/07/20 21:15:38 avg Exp $";
d9 3
d106 1
a107 10
	/*
	 * Perror uses unit 2, thus if we didn't set up the fd's
	 * we must set up unit 2 now else the diagnostic will disappear
	 */
	if (!didfds) {
		register int oerrno = errno;

		dcopy(SHDIAG, 2);
		errno = oerrno;
	}
d109 1
a115 1

@


1.2
log
@Слита с версией alex-а из 4.2.
@
text
@d3 1
a3 1
static  char *rcsid = "$Header: sh.err.c,v 1.1 86/06/01 20:19:06 dmitry Exp $";
d8 4
a11 1
 * $Log:        sh.err.c,v $
d42 1
d89 4
@


1.1
log
@DEMOS & MNOS 2 version
@
text
@d3 1
a3 3

static  char *rcsid = "$Header: sh.err.c,v 0.0 86/04/20 21:24:09 root Exp $";

d8 4
a11 1
 * $Log$
@


1.1.2.9
log
@ORIGINAL 2.9 VERSION
@
text
@d1 2
a2 1
static	char *sccsid = "@@(#)sh.err.c 4.1 10/9/80";
d4 9
d20 3
a22 3
bool	errspl;			/* Argument to error was spliced by seterr2 */
char	one[2] = { '1', 0 };
char	*onev[2] = { one, NOSTR };
d47 2
a48 2
	haderr = 1;		/* Now to diagnostic output */
	timflg = 0;		/* This isn't otherwise reset */
d61 1
a61 1
	didfds = 0;		/* Forget about 0,1,2 */
d84 1
a84 1
	reset();		/* Unwind */
d106 1
a106 1
	error(NOSTR);		/* To exit or unwind */
@


0.0
log
@Basic version
@
text
@d1 12
a12 2
/*      @@(#)sh.err.c    2.1     SCCS id keyword */
/* Copyright (c) 1980 Regents of the University of California */
d14 1
d82 2
d106 1
a106 1
	error(0);               /* To exit or unwind */
a107 17

/*
 * For builtin functions, the routine bferr may be called
 * to print a diagnostic of the form:
 *      name: Diagnostic.
 * where name has been setup by setname.
 * (Made into a macro to save space)
 *
char    *bname;

setname(cp)
	char *cp;
{

	bname = cp;
}
 */
@


0.0.2.0
log
@VAX BSD 4.2 version by alex (8-bits)
@
text
@d1 2
a2 2
/* static  char *sccsid = "$Header: sh.err.c,v 2.1 86/03/12 23:47:28 alex Exp $/Kiae"; */

a3 1
#include <sys/ioctl.h>
d9 3
a11 3
bool	errspl;			/* Argument to error was spliced by seterr2 */
char	one[2] = { '1', 0 };
char	*onev[2] = { one, NOSTR };
d36 2
a37 2
	haderr = 1;		/* Now to diagnostic output */
	timflg = 0;		/* This isn't otherwise reset */
d50 1
a50 1
	didfds = 0;		/* Forget about 0,1,2 */
d71 1
a71 3
	if (tpgrp > 0)
		ioctl(FSHTTY, TIOCSPGRP, &tpgrp);
	reset();		/* Unwind */
d93 1
a93 1
	error(NOSTR);		/* To exit or unwind */
d95 17
@


0.0.1.0
log
@MNOS 1.2 version
@
text
@d1 2
a6 5
 *
 * $Log:	sh.err.c,v $
 * Revision 1.1  86/02/24  20:22:55  sys
 * Initial revision
 * 
@
