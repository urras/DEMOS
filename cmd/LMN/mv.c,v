head     1.2;
access   ;
symbols  ;
locks    abs:1.2;
comment  @ * @;


1.2
date     88.09.28.19.39.43;  author abs;  state Exp;
branches ;
next     1.1;

1.1
date     88.04.28.15.18.44;  author root;  state Exp;
branches ;
next     ;


desc
@
@


1.2
log
@правильнописание.
@
text
@/*
**
** Эта штука добавляется в исходный файл перед
** запуском rcs               Давидов 04.28.88
**
** $Header: mv.c,v 1.1 88/04/28 15:18:44 root Exp $
** $Log:        mv.c,v $
 * Revision 1.1  88/04/28  15:18:44  root
 * Initial revision
 *
*/

# ifndef        lint
/* NOXSTR  */
static char     Rcs_id[] = "$Header: mv.c,v 1.1 88/04/28 15:18:44 root Exp $";
/* YESXSTR */
# endif         lint


/*
 * mv file1 file2
 *
 *
 */

#include <stdio.h>
#include <sys/types.h>
#include <sys/stat.h>
#include <sys/dir.h>
#include <signal.h>
#include <ediag.h>

#define DOT     "."
#define DOTDOT  ".."
#define DELIM   '/'
#define SDELIM "/"
#define MAXN    100
#define MODEBITS 07777
#define ROOTINO 2

char    *pname();
char    *sprintf();
char    *dname();
struct  stat s1, s2;
int     iflag = 0;      /* interactive flag. If this flag is set,
			 * the user is queried before files are
			 * destroyed by cp.
			 */
int     fflag = 0;      /* force flag. supercedes all restrictions */

char    *ncom;

main(argc, argv)
register char *argv[];
{
	register i, r;
	register char *arg;

	/* get the flag(s) */

	ncom = *argv;
	if (argc < 2)
		goto usage;
	while (argc>1 && *argv[1] == '-') {
		argc--;
		arg = *++argv;

		/*
		 *  all files following a null option are considered file names
		 */
		if (*(arg+1) == '\0') break;

		while (*++arg != '\0')
			switch (*arg) {

			/* interactive mode */
			case 'i':
				iflag++;
				break;

			/* force moves */
			case 'f':
				fflag++;
				break;

			/* don't live with bad options */
			default:
				goto usage;
			}
	}
	if (argc < 3)
		goto usage;
	if (stat(argv[1], &s1) < 0) {
		fprintf(stderr, ediag("%s: cannot access %s\n","%s: файл %s недоступен или не существует\n"), ncom, argv[1]);
		return(1);
	}
	if ((s1.st_mode & S_IFMT) == S_IFDIR) {
		if (argc != 3)
			goto usage;
		return mvdir(argv[1], argv[2]);
	}
	setuid(getuid());
	if (argc > 3)
		if (stat(argv[argc-1], &s2) < 0 || (s2.st_mode & S_IFMT) != S_IFDIR)
			goto usage;
	r = 0;
	for (i=1; i<argc-1; i++)
		r |= move(argv[i], argv[argc-1]);
	return(r);
usage:
	fprintf(stderr, ediag("Usage: %s [-if] f1 f2; or %s [-if] d1 d2; or %s [-if] f1 ... fn d1\n",
			      "Вызов: %s [-if] ф1 ф2; или %s [-if] к1 к2; или %s [-if] ф1 ... фn к1\n"), ncom, ncom, ncom );
	return(1);
}

move(source, target)
char *source, *target;
{
	register c, i;
	int     status;
	char    buf[MAXN];

	if (stat(source, &s1) < 0) {
		fprintf(stderr, ediag("%s: cannot access %s\n","%s: файл %s недоступен или не существует\n"), ncom, source);
		return(1);
	}
	if ((s1.st_mode & S_IFMT) == S_IFDIR) {
		fprintf(stderr, ediag("%s: directory rename only\n","%s: каталоги только переименовываются\n"), ncom);
		return(1);
	}
	if (stat(target, &s2) >= 0) {
		if ((s2.st_mode & S_IFMT) == S_IFDIR) {
			sprintf(buf, "%s/%s", target, dname(source));
			target = buf;
		}
		if (stat(target, &s2) >= 0) {
			if ((s2.st_mode & S_IFMT) == S_IFDIR) {
				fprintf(stderr, ediag("%s: %s is a directory\n","%s: каталог %s\n"), ncom, target);
				return(1);
			} else if (iflag && !fflag) {
				fprintf(stderr, ediag("remove %s? ","уничтожить %s? "), target);
				i = c = getchar();
				while (c != '\n' && c != EOF)
					c = getchar();
				if (i != 'y')
					return(1);
			}
			if (s1.st_dev==s2.st_dev && s1.st_ino==s2.st_ino) {
				fprintf(stderr, ediag("%s: %s and %s are identical\n","%s: %s и %s - ссылки на один и тот же файл\n"), ncom, source, target);
				return(1);
			}
			if (access(target, 2) < 0 && !fflag && isatty(fileno(stdin))) {
				fprintf(stderr, ediag("override protection %o for %s? ","игнорировать защиту %o у %s? "), s2.st_mode & MODEBITS, target);
				i = c = getchar();
				while (c != '\n' && c != EOF)
					c = getchar();
				if (i != 'y')
					return(1);
			}
			if (unlink(target) < 0) {
				fprintf(stderr, ediag("%s: cannot unlink %s\n","%s: не могу уничтожить ссылку на %s\n"), ncom, target );
				return(1);
			}
		}
	}
	if (link(source, target) < 0) {
		i = fork();
		if (i == -1) {
			fprintf(stderr, ediag("%s: try again\n","%s: попробуйте повторить команду\n"), ncom );
			return(1);
		}
		if (i == 0) {
			execl("/bin/cp", "cp", source, target, 0);
			execl("/usr/bin/cp", "cp", source, target, 0);
			fprintf(stderr, ediag("%s: cannot exec cp\n","%s: не могу вызвать cp\n"), ncom );
			exit(1);
		}
		while ((c = wait(&status)) != i && c != -1)
			;
		if (status != 0)
			return(1);
		utime(target, &s1.st_atime);
	}
	if (unlink(source) < 0) {
		fprintf(stderr, ediag("%s: cannot unlink %s\n","%s: не могу уничтожить ссылку на %s\n"), ncom, source );
		return(1);
	}
	return(0);
}

mvdir(source, target)
char *source, *target;
{
	register char *p;
	register i;
	char buf[MAXN];

	if (stat(target, &s2) >= 0) {
		if ((s2.st_mode&S_IFMT) != S_IFDIR) {
			fprintf(stderr, ediag("%s: %s exists\n","%s: %s уже существует\n"), ncom, target);
			return(1);
		}
		if (strlen(target) > MAXN-DIRSIZ-2) {
			fprintf(stderr, ediag("%s: target name too long\n","%s: слишком длинное имя цели\n"), ncom );
			return(1);
		}
		strcpy(buf, target);
		target = buf;
		strcat(buf, SDELIM);
		strcat(buf, dname(source));
		if (stat(target, &s2) >= 0) {
			fprintf(stderr, ediag("%s: %s exists\n","%s: %s уже существует\n"), ncom, buf);
			return(1);
		}
	}
	if (strcmp(source, target) == 0) {
		fprintf(stderr, ediag("%s: ?? source == target, source exists and target doesnt\n",
				      "%s: ?! имя откуда == имя куда\n"), ncom);
		return(1);
	}
	p = dname(source);
	if (!strcmp(p, DOT) || !strcmp(p, DOTDOT) || !strcmp(p, "") || p[strlen(p)-1]=='/') {
		fprintf(stderr, ediag("%s: cannot rename %s\n","%s: не могу переименовать %s\n"), ncom, p);
		return(1);
	}
	if (stat(pname(source), &s1) < 0 || stat(pname(target), &s2) < 0) {
		fprintf(stderr, ediag("mv: cannot locate parent\n","mv: недоступен каталог\n"));
		return(1);
	}
	if (access(pname(target), 2) < 0) {
		fprintf(stderr, ediag("mv: no write access to %s\n",
				      "mv: запрещена запись в %s\n"), pname(target));
		return(1);
	}
	if (access(pname(source), 2) < 0) {
		fprintf(stderr, ediag("mv: no write access to %s\n",
				      "mv: запрещена запись в %s\n"), pname(source));
		return(1);
	}
	if (s1.st_dev != s2.st_dev) {
		fprintf(stderr, ediag("mv: cannot move directories across devices\n",
				      "mv: нельзя перемещать каталоги между носителями\n"));
		return(1);
	}
	if (s1.st_ino != s2.st_ino) {
		char dst[MAXN+5];

		if (chkdot(source) || chkdot(target)) {
			fprintf(stderr, ediag("mv: Sorry, path names including %s aren't allowed\n",
					      "mv: недопустимы имена, содержащие %s\n"), DOTDOT);
			return(1);
		}
		stat(source, &s1);
		if (check(pname(target), s1.st_ino))
			return(1);
		for (i = 1; i <= NSIG; i++)
			signal(i, SIG_IGN);
		if (link(source, target) < 0) {
			fprintf(stderr, ediag("mv: cannot link %s to %s\n",
					      "mv: не могу связать %s с %s\n"), target, source);
			return(1);
		}
		if (unlink(source) < 0) {
			fprintf(stderr, ediag("mv: %s: cannot unlink\n",
					      "mv: не могу уничтожить ссылку %s\n"), source);
			unlink(target);
			return(1);
		}
		strcpy(dst, target);
		strcat(dst, "/");
		strcat(dst, DOTDOT);
		if (unlink(dst) < 0) {
			fprintf(stderr, ediag("mv: %s: cannot unlink\n",
					      "mv: не могу уничтожить ссылку %s\n"), dst);
			if (link(target, source) >= 0)
				unlink(target);
			return(1);
		}
		if (link(pname(target), dst) < 0) {
			fprintf(stderr, ediag("mv: cannot link %s to %s\n",
					      "mv: не могу связать %s с %s\n"),
				dst, pname(target));
			if (link(pname(source), dst) >= 0)
				if (link(target, source) >= 0)
					unlink(target);
			return(1);
		}
		return(0);
	}
	if (link(source, target) < 0) {
		fprintf(stderr, ediag("mv: cannot link %s and %s\n",
				      "mv: не могу связать %s с %s\n"),
			source, target);
		return(1);
	}
	if (unlink(source) < 0) {
		fprintf(stderr, ediag("mv: ?? cannot unlink %s\n",
				      "mv: ?? не могу уничтожить ссылку %s\n"), source);
		return(1);
	}
	return(0);
}

char *
pname(name)
register char *name;
{
	register c;
	register char *p, *q;
	static  char buf[MAXN];

	p = q = buf;
	while (c = *p++ = *name++)
		if (c == DELIM)
			q = p-1;
	if (q == buf && *q == DELIM)
		q++;
	*q = 0;
	return( buf[0]? buf : DOT );
}

char *
dname(name)
register char *name;
{
	register char *p;

	p = name;
	while (*p)
		if (*p++ == DELIM && *p)
			name = p;
	return name;
}

check(spth, dinode)
char *spth;
ino_t dinode;
{
	char nspth[MAXN];
	struct stat sbuf;

	sbuf.st_ino = 0;

	strcpy(nspth, spth);
	while (sbuf.st_ino != ROOTINO) {
		if (stat(nspth, &sbuf) < 0) {
			fprintf(stderr, ediag("mv: cannot access %s\n",
					      "mv: недоступен %s\n"), nspth);
			return(1);
		}
		if (sbuf.st_ino == dinode) {
			fprintf(stderr, ediag("mv: cannot move a directory into itself\n",
					      "mv: невозможно перемещение каталога в себя\n") );
			return(1);
		}
		if (strlen(nspth) > MAXN-2-sizeof(DOTDOT)) {
			fprintf(stderr, ediag("mv: name too long\n", "mv: слишком длинное имя\n"));
			return(1);
		}
		strcat(nspth, SDELIM);
		strcat(nspth, DOTDOT);
	}
	return(0);
}

chkdot(s)
register char *s;
{
	do {
		if (strcmp(dname(s), DOTDOT) == 0)
			return(1);
		s = pname(s);
	} while (strcmp(s, DOT) != 0 && strcmp(s, SDELIM) != 0);
	return(0);
}
@


1.1
log
@Initial revision
@
text
@d6 5
a10 2
** $Header$
** $Log$
d15 1
a15 1
static char     Rcs_id[] = "$Header$";
d124 1
a124 1
		fprintf(stderr, ediag("%s: cannot access %s\n","%s: файл %s не доступен или не существует\n"), ncom, source);
@
