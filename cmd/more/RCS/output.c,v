head     1.5;
access   ;
symbols  ;
locks    ;
comment  @ * @;


1.5
date     88.09.17.23.08.10;  author avg;  state Exp;
branches ;
next     1.4;

1.4
date     88.09.10.21.33.04;  author ache;  state Exp;
branches ;
next     1.3;

1.3
date     88.06.05.17.16.10;  author avg;  state Exp;
branches ;
next     1.2;

1.2
date     88.04.10.19.13.47;  author avg;  state Exp;
branches ;
next     1.1;

1.1
date     88.02.13.16.41.24;  author korotaev;  state Exp;
branches ;
next     ;


desc
@
@


1.5
log
@Сделано выделение bold шрифта.
@
text
@/*
 * High level routines dealing with the output to the screen.
 */

#include "less.h"
#include <ctype.h>

extern int sigs;
extern int sc_width, sc_height;
extern int ul_width, ue_width;
extern int so_width, se_width;
extern int tabstop;
extern int twiddle;
extern char *line;
extern char *first_cmd;
extern clean_data;

/*
 * Display the line which is in the line buffer.
 */
	public void
put_line()
{
	register char *p;
	register int c;
	register int column;
	extern int auto_wrap, ignaw;

	if (sigs)
		/*
		 * Don't output if a signal is pending.
		 */
		return;

	if (line == NULL)
		line = (twiddle) ? "~" : "";

	column = 0;
	for (p = line;  *p != '\0';  p++)
	{
		switch (c = *p)
		{
		case UL_CHAR:
			ul_enter(0);
			column += ul_width;
			break;
		case UE_CHAR:
			ul_exit(0);
			column += ue_width;
			break;
		case BD_CHAR:
			ul_enter(1);
			break;
		case BE_CHAR:
			ul_exit(1);
			break;
		case '\t':
			do
			{
				putc(' ');
				column++;
			} while ((column % tabstop) != 0);
			break;
		case '\b':
			putbs();
			column--;
			break;
		default:
		Again:
			if (!clean_data && control_char(c))  {
				if (c & 0200 ) {
					putc('M');
					putc('-');
					column += 2;
					c &= ~0200;
					goto Again;
				}
				else {
					putc('^');
					putc(carat_char(c));
					column += 2;
				}
			} else
			{
				putc(c);
				column++;
			}
			break;
		}
	}
	if (column < sc_width || !auto_wrap || ignaw)
		putc('\n');
}

/*
 * Is a given character a "control" character?
 * {{ ASCII DEPENDENT }}
 */
	public int
control_char(c)
	register int c;
{
	c &= 0377;
	return (!isprint(c));
}

/*
 * Return the printable character used to identify a control character
 * (printed after a carat; e.g. '\3' => "^C").
 * {{ ASCII DEPENDENT }}
 */
	public int
carat_char(c)
	int c;
{
	c &= 0177;
	return ((c == '\177') ? '?' : (c | 0100));
}


static char obuf[1024];
static char *ob = obuf;

/*
 * Flush buffered output.
 */
	public void
flush()
{
	write(1, obuf, ob-obuf);
	ob = obuf;
}

/*
 * Discard buffered output.
 */
	public void
dropout()
{
	ob = obuf;
}

/*
 * Output a character.
 */
	public void
putc(c)
	int c;
{
	if (ob >= &obuf[sizeof(obuf)])
		flush();
	*ob++ = c;
}

/*
 * Output a string.
 */
	public void
puts(s)
	register char *s;
{
	while (*s != '\0')
		putc(*s++);
}

/*
 * Output a message in the lower left corner of the screen
 * and wait for carriage return.
 */

static char E_return_to_continue[] = " (press RETURN)";
static char R_return_to_continue[] = " (нажмите <ВК>)";

	public void
error(s)
	char *s;
{
	register int c;
	static char buf[2];

	lower_left();
	clear_eol();
	so_enter();
	puts(s);
	puts(ediag(E_return_to_continue, R_return_to_continue));
	so_exit();

#if ONLY_RETURN
	while ((c = getc()) != '\n' && c != '\r')
		bell();
#else
	c = getc();
	if (c != '\n' && c != '\r' && c != ' ')
	{
		buf[0] = c;
		first_cmd = buf;
	}
#endif

	if (strlen(s) > sc_width)
		repaint();
}

	public int
error_width()
{
	/*
	 * Don't use the last position, because some terminals
	 * will scroll if you write in the last char of the last line.
	 */
	return (sc_width - (sizeof(E_return_to_continue) + so_width + se_width + 1));
}
@


1.4
log
@Поправлена обработка непечатных символов
@
text
@d44 1
a44 1
			ul_enter();
d48 1
a48 1
			ul_exit();
d50 6
@


1.3
log
@Немного поправлен режим clean_data.
(для работы с выделениями в man-е).
@
text
@d6 1
d63 14
a76 7
			if (!clean_data && control_char(c))    /* #31.w */
		/*      if (c & 0200 )            #31.w */
			{
				putc('^');
			/*        putc(c & 0177);       #31.w */
				putc(c | 0100);   /* #31.w */
				column += 2;
d82 1
d98 1
a98 1
	return (c < ' ' || (0177 <= c && c < 0300));
d110 1
@


1.2
log
@Сделан ediag + исправлены некоторые ошибки
@
text
@d15 1
d62 1
a62 1
			if (control_char(c))    /* #31.w */
@


1.1
log
@Initial revision
@
text
@d85 1
a85 1
	int c;
d87 2
a88 2
	return ((c & 0377) < ' ' || c == '\177');  /* #31.w */
  /*    return (c < ' ' || c == '\177');     #31.w */
d154 2
a155 1
static char return_to_continue[] = "  нажмите <вк>";
d168 1
a168 1
	puts(return_to_continue);
d194 1
a194 2
	return (sc_width - 
		(sizeof(return_to_continue) + so_width + se_width + 1));
@
