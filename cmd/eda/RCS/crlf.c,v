head     1.7;
access   ;
symbols  ;
locks    ;
comment  @ * @;


1.7
date     88.01.19.16.57.14;  author avg;  state Exp;
branches ;
next     1.6;

1.6
date     86.12.03.18.08.26;  author avg;  state Exp;
branches ;
next     1.5;

1.5
date     86.11.12.13.12.40;  author avg;  state Exp;
branches ;
next     1.4;

1.4
date     86.11.11.23.00.56;  author avg;  state Exp;
branches ;
next     1.3;

1.3
date     86.11.11.22.36.05;  author avg;  state Exp;
branches ;
next     1.2;

1.2
date     86.11.11.21.53.10;  author avg;  state Exp;
branches ;
next     1.1;

1.1
date     86.11.11.17.50.43;  author avg;  state Exp;
branches ;
next     ;


desc
@Экранный редактор eda 2.4
@


1.7
log
@Если при записи нет свободного места на дисках, редактор
теперь останавливается и после перезапуска повторяет обмен.
@
text
@#ifndef lint
static char rcsid[] = "$Header: crlf.c,v 1.6 86/12/03 18:08:26 avg Exp $";
#endif

/*
 * $Log:        crlf.c,v $
 * Revision 1.6  86/12/03  18:08:26  avg
 * Изменена семантика операции 'возврат каретки':
 * она теперь ставит курсор не в начало строки, а под
 * начало предыдущей строки.
 *
 * Revision 1.5  86/11/12  13:12:40  avg
 * Все-таки лучше определять возможность приостанавливать редактор
 * по имени в environ-е: SHELL должен кончаться на csh.
 *
 * Revision 1.4  86/11/11  23:00:56  avg
 * Если ид. процесса не совпадает с ид. группы (т.е., shell не имеет
 * возможности управления заданиями), то запустить shell exec-ом.
 * используется при вызове редактора из Bourne sh.
 *
 * Revision 1.3  86/11/11  22:36:05  avg
 * Если редактор был приостановлен по сообщению 'нельзя пускать
 * в bg', то по запуску не надо снова его останавливать.
 *
 * Revision 1.2  86/11/11  21:53:10  avg
 * Вставлена проверка: не запущен ли редактор в фоновом режиме.
 * Если текущая группа процессов терминала не совпадает с
 * группой, к которой принадлежит редактор, то он выдает диагностику
 * и приостанавливается опять.
 *
 * Revision 1.1  86/11/11  17:50:43  avg
 * Initial revision
 *
 */

/*
 * Экранный редактор eda  ver 2.4
 *   Автор: Антонов В.Г. ВМК МГУ, ИПК Минавтопрома
 *   Последняя модификация: 09.04.1986
 */

#include NAME
#include "glob.h"
#include "io.h"

int     sigintr(), abort();

/*
 * Возврат в начало строки
 */
ret()
{
	pos(cl, 0);
}

/*
 * Перевод строки
 */
crlf(arg, narg)
{
	extern int insflag;

	if( lempty(cl, 0, width) )    /* строка не пуста */
		nonspace(MINUS);
	down(0, 1);
	if( insflag )
		il(NULL, narg);
	if( narg > 1 )
		down(0, narg-1);
}

/*
 * Очистка строки на экране
 */
clrl()
{
#ifdef S_clrl
	qpos(cl, csh);
	printx(S_clrl);
#else
	register int i;
	char s,*ss;

	qpos(cl, csh);
#ifdef S_dc
	for( i = SWID-1 ; i ; i-- )
		printx(S_dc);
#else
	for( i = SWID-2 ; i ; i-- )
		writex( " ", 1);
	ss = &(line(cl)[cc = SWID-2+csh]);
	s = *ss;
	*ss = ' ';
	pchar();
	*ss = s;
	qpos(cl, csh);
#endif S_dc
#endif S_clrl
}

int ErrFlag;

/*
 * Вызов интерпретатора shell
 */
Unix()
{
	extern int SINFD;
#ifdef V2
	extern  struct sgttyb1 tmode[];
#else
	extern  int            tmode[];
#endif

#ifdef V2
	int     ONCONT(), pid;
#endif
	char *getenv(), *Shell, *p;

	if( !ErrFlag )
		printx(S_erase);
#ifdef SYMSTOP
	printx(SYMSTOP);
#endif SYMSTOP
	if( !ErrFlag )
		printx("                           *** SHELL ***\r\n\n");
	fflush( stdout );
	Shell = getenv( "SHELL" );
#ifndef V2
	CALLSH( Shell );
#else V2
	if( Shell != NULL ) {
		p = Shell;
		while( *p ) p++;
		while( p >= Shell && *p != '/' ) p--;
		p++;

		/* Just new CSH has a job control */
		if( strcmp( p, "csh" ) ) {
			CALLSH( Shell );
			return;
		}
	} else {
		CALLSH( NULL );
		return;
	}
	ioctl( 0, TIOCSETA, &tmode );
	sigset( SIGCONT, ONCONT );
	kill( 0, SIGTSTP );
#endif V2
}

#ifdef V2
ONCONT()
{
	extern int rmode[],tmode[],SINFD;
	int ctpgrp, mypgrp;

	ioctl( 0, TIOCGPGRP, &ctpgrp );
	mypgrp = getpgrp( getpid() );
	if( ctpgrp != mypgrp ) {
		sigset( SIGCONT, SIG_DFL );     /* IN CASE OF TOSTOP */
		printx( ediag( "eda: can't work in background mode\n",
			       "eda: нельзя запускать как фоновое задание\n" ) );
		fflush( stdout );

		/* CAN BE STOPPED THERE */

		ioctl( 0, TIOCGPGRP, &ctpgrp );
		if( ctpgrp != mypgrp ) {
			sigset( SIGCONT, ONCONT );
			kill( 0, SIGTSTP );     /* And stop again */
			return;
		} else
			sleep(2);
	}
	sigset( SIGCONT, SIG_IGN );
	ioctl( 0, TIOCSETA, &rmode );
#ifdef SYMSTRT
	printx(SYMSTRT);
#endif SYMSTRT

	if( !ErrFlag )
	       rew();
}
#endif V2

CALLSH( Shell )
char   *Shell;
{
	int     pid, rpid, retc;
	extern
#ifdef V2
		struct sgttyb1
#else
		int
#endif
				rmode[],tmode[];

#ifndef V2
	stty(0, tmode);
#else V2
	ioctl( 0, TIOCSETA, &tmode );
#endif V2
	signal( SIGINT,  SIG_IGN );
	signal( SIGQUIT, SIG_IGN );
	if( (pid = fork()) == 0 ) {
#ifndef HPUX
#ifndef V2
		nice( 2 );      /* set back zero pri */
#endif V2
		dup2( SINFD, 0 );
#else
		close( 0 );
		dup( SINFD );
#endif
		for( retc = 3 ; retc < 20 ; retc++ )
			close( retc );

		signal(SIGINT,  SIG_DFL);
		signal(SIGQUIT, SIG_DFL);
		if( Shell )
			execl( Shell, Shell, 0) ;
		execl( SHELL, SHELL, 0 );
		exit(1);
	}
	while( (rpid = wait(&retc)) != -1 && pid != rpid );

#ifndef V2
	gtty(0, tmode);
	rmode[0] = tmode[0];
	rmode[1] = tmode[1];
	rmode[2] = (tmode[2] | RAWI | RAWO) & ~(ECHO | CRMOD | LCASE);
	stty(0, rmode);
#else V2
	ioctl( 0, TIOCSETA, &rmode );
#endif V2
	signal( SIGINT,  sigintr );
	signal( SIGQUIT, abort );
#ifdef SYMSTRT
	printx(SYMSTRT);
#endif SYMSTRT

	if( !ErrFlag )
		rew();
}

/*
 * Склейка/разрезание строк
 */
cat()
{
	char        *p, *q, *qq;
	int          cc1, clx, len, k, i1, sh, xsh, xy;
	register int i, j;
	extern   int texflag;

	if( cl == NLIN-1 ) {
		down( NULL, 1 );        /* To avoid IL on EOF */
		up( NULL, 1 );
	}

/* Проверить, в конце ли строки */
	i = cc;
	cc1 = cc;
	clx = cl;
	p = line(cl);
	j = llen(cl)+1;
	if( j > width ) {
		llen(cl) = width1;
		j = width;
	}
	if( i < j )
		while( p[i] == ' ' && ++i < j );
	if( i >= j ) {

/* Склеивание строк */
		q = line(cl+1);
		i1 = llen(cl+1)+1;
		if( i1 > width ) {
			llen(cl+1) = width1;
			i1 = width;
		}
		i = 0;
		while( q[i] == ' ' && ++i < i1 );    /* Поиск начала след. */
		if( i == i1 ) {                      /* строки             */
			pos(clx+1, cc1);
			dl(NULL, 1);
			pos(clx, cc1);
			return;
		}
		len = width - ((i>=cc) ? i : cc);
		while( q[--i1] == ' ' && i1 > 0 );
		xy = i1;
Dloop:
		if( len+i >= i1+1 )
			len = i1-i+1;
		else if( texflag ) {
			if( q[i1] != ' ' ) {
				i1--;
				while( i1 >= 0 && q[i1] != ' ' )
					i1--;
				if( i1 < i ) {
#ifdef S_bell
					printx( S_bell );
#endif S_bell
					return;
				}
			} else
				i1--;
			goto Dloop;
		}
		i1 = xy;
		while( j < cc )
			p[j++] = ' ';
		xy = i;
		for( j = len, k = cc ; j>0 ; j-- )
			p[k++] = q[i++];
		llen(cl) = --k;
#ifdef S_clrel
		printx( S_clrel );
		k = (k > csh+(SWID-1)) ? csh+(SWID-1) : k;
		while( k >= csh && p[k] == ' ' )
			k--;
		if( k >= cc ) {
#ifdef S_pos
			sh = cc;
			do {
				xsh = sh;
				while( p[sh] == ' ' ) {
					if( sh >= k )
					       goto X1;
					sh++;
				}
				qpos( clx, sh );
				xsh = cc;
				while( p[sh] != ' ' && sh < k )
					sh++;
				if( sh >= xsh )
					Pwrite( &p[xsh], xsh, sh-xsh+1 );
			} while( sh < k );
#else
			Pwrite( &p[csh], cc, k-cc+1 );
#endif S_pos
		}
X1:
#else
		typestr( clx );
#endif S_clrel
		len += xy;
		if( len > i1 ) {
			down( NULL, 1 );
			if( clx == cl )
				clx--;
			dl( NULL, 1 );
			pos( clx, cc1 );
			return;
		}

		for( j = len, i = 0 ; j <= i1 ; )
			q[i++] = q[j++];
		i1 -= len;
		for( i = 0; i <= i1 && q[i] == ' ' ; i++ );
		llen(clx+1) = i1-i;
		if( i > 0 ) {
			for( j = 0 ; i <= i1 ; )
				q[j++] = q[i++];
		}
		typestr( clx+1 );
		pos( clx, cc1 );
	} else {

/* Разрезание строк */
		if( cc1 == 0 ) {
			il(NULL, 1);
			return;
		}
		down(NULL, 1);
		if( clx == cl )
			clx--;
		il(NULL, 1);
		j = cc1;
		qq = p = line(clx+1);
		q = line(clx);
		while( j <= llen(clx) )
			*p++ = q[j++];
		llen(clx+1) = (p-qq) + 1;
		llen(clx) = cc1-1;
		typestr( clx+1 );
		pos(clx, cc1);
#ifdef S_clrel
		printx(S_clrel);
#else
		if( cc-csh > ((2*SWID)/3) ) {
			typestr( clx );
			pos(clx, cc1);
		} else {
			j = csh+SWID;
			if( j > width )
				j = width;
			icdc(MINUS, j-cc);
		}
#endif S_clrel
	}
}
@


1.6
log
@Изменена семантика операции 'возврат каретки':
она теперь ставит курсор не в начало строки, а под 
начало предыдущей строки.
@
text
@d2 1
a2 1
static char rcsid[] = "$Header: crlf.c,v 1.5 86/11/12 13:12:40 avg Exp $";
d7 5
d101 2
d120 2
a121 1
	printx(S_erase);
d125 2
a126 1
	printx("                           *** SHELL ***\r\n\n");
d183 2
a184 1
	rew();
d210 1
a210 1
		nice( 10 );
d244 2
a245 1
	rew();
@


1.5
log
@Все-таки лучше определять возможность приостанавливать редактор
по имени в environ-е: SHELL должен кончаться на csh.
@
text
@d2 1
a2 1
static char rcsid[] = "$Header: crlf.c,v 1.4 86/11/11 23:00:56 avg Exp $";
d7 4
d58 2
a59 1
	pos(cl, 0);
@


1.4
log
@Если ид. процесса не совпадает с ид. группы (т.е., shell не имеет
возможности управления заданиями), то запустить shell exec-ом.
используется при вызове редактора из Bourne sh.
@
text
@d2 1
a2 1
static char rcsid[] = "$Header: crlf.c,v 1.3 86/11/11 22:36:05 avg Exp $";
d7 5
d106 1
d114 1
d116 1
a116 1
	CALLSH();
d118 14
a131 7
	pid = getpid();
	if( pid != getpgrp(pid) )  /* shell has not process control */
		CALLSH();
	else {
		ioctl( 0, TIOCSETA, &tmode );
		sigset( SIGCONT, ONCONT );
		kill( 0, SIGTSTP );
d133 3
d161 1
a161 1
			sleep(1);
d173 2
a174 1
CALLSH()
a183 1
	char *getenv(), *Shell ;
d207 1
a207 1
		if( Shell = getenv( "SHELL" ))
@


1.3
log
@Если редактор был приостановлен по сообщению 'нельзя пускать
в bg', то по запуску не надо снова его останавливать.
@
text
@d2 1
a2 1
static char rcsid[] = "$Header: crlf.c,v 1.2 86/11/11 21:53:10 avg Exp $";
d7 4
a91 1
	extern
d93 1
a93 1
		struct sgttyb1
d95 1
a95 1
		int
a96 5
				rmode[],tmode[];
	int retc,rpid,pid;
#ifndef V2
	char *getenv(), *Shell ;
#endif
d99 1
a99 1
	int     ONCONT();
d109 9
a117 22
	stty(0, tmode);
	signal( SIGINT,  SIG_IGN );
	signal( SIGQUIT, SIG_IGN );
	if( (pid = fork()) == 0 ) {
#ifndef HPUX
		nice( 10 );
		dup2( SINFD, 0 );
#else
		close( 0 );
		dup( SINFD );
#endif
		/* Close all the files : @@VG 10.01.85 */

		for( retc = 3 ; retc < 20 ; retc++ )
			close( retc );

		signal(SIGINT,  SIG_DFL);
		signal(SIGQUIT, SIG_DFL);
		if( Shell = getenv( "SHELL" ))
			execl( Shell, Shell, 0) ;
		execl( SHELL, SHELL, 0 );
		exit(1);
d119 1
a119 5
	while( (rpid = wait(&retc)) != -1 && pid != rpid );
#else V2
	ioctl( 0, TIOCSETA, &tmode );
	sigset( SIGCONT, ONCONT );
	kill( 0, SIGTSTP );
d122 1
d148 6
d155 13
d169 29
d203 2
d206 2
a211 4
#ifndef V2
	signal( SIGINT,  sigintr );
	signal( SIGQUIT, abort );
#endif
@


1.2
log
@Вставлена проверка: не запущен ли редактор в фоновом режиме.
Если текущая группа процессов терминала не совпадает с
группой, к которой принадлежит редактор, то он выдает диагностику
и приостанавливается опять.
@
text
@d2 1
a2 1
static char rcsid[] = "$Header: crlf.c,v 1.1 86/11/11 17:50:43 avg Exp $";
d7 6
d143 2
a144 1
	extern int rmode[],tmode[],SINFD, ctpgrp;
d147 2
a148 1
	if( ctpgrp != getpgrp( getpid() ) ) {
d156 7
a162 2
		sigset( SIGCONT, ONCONT );
		kill( 0, SIGTSTP );     /* And stop again */
@


1.1
log
@Initial revision
@
text
@d2 1
a2 1
static char rcsid[] = "$Header$";
d6 4
a9 1
 * $Log$
a22 2
#define SIGINTR 2
#define SIGQUIT 3
d106 2
a107 2
	signal( SIGINTR, 1 );     я
	signal( SIGQUIT, 1 );
d118 1
a118 1
		for( retc = 3 ; retc < 16 ; retc++ )
d121 2
a122 2
		signal(SIGINTR, 0);
		signal(SIGQUIT, 0);
d137 15
a151 1
	extern int rmode[],tmode[],SINFD;
d166 1
a166 1
	signal( SIGINTR, sigintr );
@
