head     1.4;
access   ;
symbols  ;
locks    ;
comment  @ * @;


1.4
date     88.01.18.21.29.20;  author avg;  state Exp;
branches ;
next     1.3;

1.3
date     86.11.14.16.27.41;  author avg;  state Exp;
branches ;
next     1.2;

1.2
date     86.11.11.22.40.33;  author avg;  state Exp;
branches ;
next     1.1;

1.1
date     86.11.11.17.51.53;  author avg;  state Exp;
branches ;
next     ;


desc
@Экранный редактор eda 2.4
@


1.4
log
@Теперь не изменяется значение флажка TOSTOP - НАДОЕЛО!
@
text
@#ifndef lint
static char rcsid[] = "$Header: main.c,v 1.3 86/11/14 16:27:41 avg Exp $";
#endif

/*
 * $Log:        main.c,v $
 * Revision 1.3  86/11/14  16:27:41  avg
 * Для LCASE-терминалов SISO не снимается и по нему выставляется флаг
 * SISOF (используется в singlechar).
 * Кроме того, редактор теперь всегда ставит TOSTOP.
 *
 * Revision 1.2  86/11/11  22:40:33  avg
 * Теперь tostop не снимается, а ставится - чтобы всякие bg-задачи
 * не портили экран. Впрочем, если у csh стоит notify, он все равно
 * влезет.
 *
 * Revision 1.1  86/11/11  17:51:53  avg
 * Initial revision
 *
 */

/*
 * Экранный редактор eda  ver 2.4
 *   Автор: Антонов В.Г. ВМК МГУ, ИПК Минавтопрома
 *   Последняя модификация: 01.07.1986
 */

#include NAME
#include "glob.h"
#include "io.h"
#include <signal.h>

char *bname,*wname,*tname,*ofn,*bfn,*sfn,sfile,tflg,*sbrk();
int
#ifndef V2
	tmode[3],rmode[3],
#endif
	fmode;
#ifdef V2
struct sgttyb1 tmode, rmode;
#endif

FILE *obuf, *sbuf;
char amesg[]  = " <#      >";
int  SINFD;

int     sigintr();
#ifdef V2
int     SISOF = 0;      /* Флажок: надо преобразовывать русские буквы
			   в латинские соотвественно КОИ-8
			   в командных последовтельностях */
#endif V2

#ifndef UNSM
int     abort( i ) { stty( 0, tmode ); kill( getpid(), i ); }
#endif

/*
 * Главная процедура -- вызывается из eda.c
 *  Открывает файлы, устанавливает параметры терминала и зацикливается
 */
main(argc,argv)
char **argv;
{
	register int i;
	char sym;
	extern char eof;

/* Установить станд. вывод */
	SINFD = dup( 0 );
	if( (i = open( "/dev/tty", 2 )) != -1 ) {
#ifndef HPUX
		dup2( i, 0 );
#else
		close( 0 );
		dup( i );
#endif
		close( i );
	}

	stdout->_ptr  = stdout->_buf;
	stdout->_flag = _IOWRITE;
	stdout->_cnt  = 0;
	stdout->_chan = 0;

/* Прочитать из аргументов имена файлов и моду исх. файла */
	sfn = argv[1];
	ofn = argv[2];
	bfn = argv[3];
	wname = argv[4];
	bname = argv[5];
	tname = argv[6];
	fmode =  argv[7][0]-'0';fmode <<= 3;
	fmode += argv[7][1]-'0';fmode <<= 3;
	fmode += argv[7][2]-'0';fmode <<= 3;
	fmode += argv[7][3]-'0';
	width = (argv[8][0]-'0')*100+(argv[8][1]-'0')*10+(argv[8][2]-'0');
	tflg = (argv[8][3] != 't');

/* Выделить память для поля экрана */
	if( width > NCOL || ( scr.s = sbrk(width*(NLIN+1)) ) == (char *)(-1) ) {
		printx(ediag( "Screen field too wide.\n",
			      "Слишком широкий экран.\n"));
		goto EXIT;
	}
	width1 = width-1;

/* Открыть входной файл */
	sfile = ((sbuf = fopen(sfn, "r")) == NULL);
	eof = sfile? 1: 0;

/* Открыть стеки */
	if( stinit(&bstack, bname) || stinit(&wstack, wname) ) {
		printx(ediag( "Can't create temp files.\n",
			      "Не могу создать рабочие файлы.\n" ));
		goto EXIT;
	}

/* Создать  выходной файл */
	if( (obuf = fopen(ofn, "w")) == NULL ) {
		printx(ediag( "Can't create output file.\n",
			      "Нельзя создать выходной файл.\n"));
		unlink(wname);
		unlink(bname);
		goto EXIT;
	}

/* Установить моды терминала ( В V7 м.б. совсем по другому ) */

#ifndef V2
	gtty(0, tmode);
#else
	ioctl( 0, TIOCGETA, &tmode );
#endif V2

#ifndef DEBUG
	for( i = 4 ; i < NSIG ; i++ )
# ifndef UNSM
		signal( i, abort );
# else
		signal( i, SIG_DFL );
# endif
#endif
	signal( SIGHUP,  SIG_IGN );
	signal( SIGINT , SIG_IGN );
	signal( SIGQUIT, SIG_IGN );
	signal( SIGTERM, SIG_IGN );

#ifndef V2
	rmode[0] = tmode[0];
	rmode[1] = tmode[1];
#ifdef UPPERONLY
	rmode[2] = (tmode[2] | RAWI | RAWO) & ~(ECHO | CRMOD | LCASE);
#else
	rmode[2] = (tmode[2] | RAWI | RAWO) & ~(ECHO | CRMOD        );
#endif
	stty(0, rmode);
#else
	rmode = tmode;
	rmode.sg_intrc  = -1;
	rmode.sg_quitc  = -1;
	rmode.sg_suspc  = -1;
	rmode.sg_dsuspc = -1;
	rmode.sg_lnextc = -1;
	rmode.sg_flushc = -1;
	rmode.sg_width  = 0;
	if(!tandem(rmode.sg_startc, rmode.sg_stopc)) {
		rmode.sg_startc = -1;
		rmode.sg_stopc  = -1;
	}
	rmode.sg_flags |= CBREAK;
	rmode.sg_flags &= ~(ECHO|CRMOD);
	if( tmode.sg_flags & LCASE ) {
		if( tmode.sg_flags & SISO )
			SISOF = 1;
		rmode.sg_flags &= ~UCASE;
	}
	rmode.sg_local |= LLITOUT;
	ioctl( 0, TIOCSETA, &rmode );
#endif

#ifdef SYMSTRT
	printx(SYMSTRT);
#endif SYMSTRT

/* Очистить экран, читать буфер из входного файла */
	fillline();
	fillscr();
	signal( SIGINT , sigintr );
	signal( SIGTERM, sigintr );
	rew();

/* Главный цикл */
	for(;;) {
		readchar(&sym);
		execute(sym,1);
#ifdef ASSERT
		for( i = 0 ; i < NLIN ; i++ )
			if( llen(i) > width1 || llen(i) < 0 )
				write( 1, "ASSERTION BOTCHED\n", 18 );
#endif
	}
EXIT:
	fflush( stdout );
	exit( 1 );
}

/*
 * Расширение буфера экрана
 */
expand( newwid )
{
	register char *p,*q;
	int  i,j;

	if( sbrk((newwid-width)*NLIN) == (char *)(-1) ) {
		printx(ediag(
"\r\n\n      Not enough memory for extended screen !!! ",
"\r\n\n      Не хватает памяти для расширенного экрана !!! " ));
#ifdef S_bell
		printx( S_bell );
#endif S_bell
		fflush( stdout );
		sleep(2);
		return;
	}
	p = &scr.s[NLIN*newwid];
	q = &scr.s[NLIN*width];
	for( i = NLIN ; i ; i-- ) {
		for( j = newwid-width ; j ; j-- )
			*--p = ' ';
		for( j = width ; j ; j-- )
			*--p = *--q;
	}
	width1 = (width = newwid) - 1;
}

/*
 * Ввод числового аргумента команды
 */
na()
{
	char sym;
	int  narg;
	extern int  mdf,mdp,mlevel;
	extern char mtext[3][256];
	extern int  repflg;
	int  cc1,cl1,cc2;

	narg = 0;
	if( !mlevel ) {
		cc1 = cc;
		cl1 = cl;
		qpos( 0, csh+SWID-11 );
#ifdef VS
		printx(VS);
#endif VS
		printx( amesg );
		cc = csh+SWID-1;
		cc2 = csh+SWID-7 ;
		qpos( cl1, cc1 );
	}
	for(;;) {
		readchar(&sym);
		if( mdf && mlevel == 0 ) {
			if( mdp < 254 )
				mtext[mdf-1][mdp++] = sym;
#ifdef S_bell
			else
				printx(S_bell);
#endif S_bell
		}
		if( sym < '0' || sym > '9' ) {
			narg = narg ? narg : 1;
#ifdef VE
			printx(VE);
#endif VE
			if( !mlevel )
				clrmsg( cl1, cc1 );
			execute(sym, narg);
			repflg = 1;
			return;
		}
		if( narg <= 1000 ) {
			narg = narg*10 + (sym-'0');
			if( !mlevel ) {
				qpos( 0, cc2 );
				writex( &sym, 1 );
				cc++;
				cc2++;
				qpos( cl1, cc1 );
			}
		}
	}
}

/*
 * Затереть сообщение в конце верхней строки
 */
clrmsg( cln, ccn )
{
	int     i, l;

	qpos( 0, csh+SWID-11 );
#ifdef VE
	printx(VE);
#endif VE
	l = llen(0);
	for( i = 10 ; i ; i-- ) {
		if( cc <= l )
			pchar();
		else {
			writex( " ", 1 );
			cc++;
		}
	}
	qpos( cln, ccn );
}

/*
 * Обработка сигнала SIGINT или SIGTERM
 */
int sigintr( s )
{
	signal( s, SIG_IGN );
#ifdef VE
	printx( VE );
#endif VE
	printx( S_erase );
#ifdef S_bell
	printx( S_bell );
#endif S_bell
	printx( ediag( "\n  *** End of session. Save all modifications ? ",
		       "\n  *** Конец работы. Сохранить изменения ? " ));
	rexit( ask() ? PLUS : MINUS );
}
@


1.3
log
@Для LCASE-терминалов SISO не снимается и по нему выставляется флаг 
SISOF (используется в singlechar).
Кроме того, редактор теперь всегда ставит TOSTOP.
@
text
@d2 1
a2 1
static char rcsid[] = "$Header: main.c,v 1.2 86/11/11 22:40:33 avg Exp $";
d7 5
d178 1
a178 1
	rmode.sg_local |= LLITOUT | LTOSTOP;
@


1.2
log
@Теперь tostop не снимается, а ставится - чтобы всякие bg-задачи
не портили экран. Впрочем, если у csh стоит notify, он все равно
влезет.
@
text
@d2 1
a2 1
static char rcsid[] = "$Header: main.c,v 1.1 86/11/11 17:51:53 avg Exp $";
d7 5
d43 5
d55 1
a55 1
 *  Открывает файлы,устанавливает параметры терминала и зацикливается
d168 5
a172 2
	if( tmode.sg_flags & LCASE )
		rmode.sg_flags &= ~(UCASE|SISO);
@


1.1
log
@Initial revision
@
text
@d2 1
a2 1
static char rcsid[] = "$Header$";
d6 4
a9 1
 * $Log$
d160 1
a160 2
	rmode.sg_local |= LLITOUT;
	rmode.sg_local &= ~LTOSTOP;     /* 1.07.86 */
@
