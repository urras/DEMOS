head     1.3;
access   ;
symbols  ;
locks    ;
comment  @ * @;


1.3
date     88.01.19.16.56.20;  author avg;  state Exp;
branches ;
next     1.2;

1.2
date     88.01.19.11.51.39;  author avg;  state Exp;
branches ;
next     1.1;

1.1
date     86.11.11.17.51.47;  author avg;  state Exp;
branches ;
next     ;


desc
@Экранный редактор eda 2.4
@


1.3
log
@Если при записи нет свободного места на дисках, редактор
теперь останавливается и после перезапуска повторяет обмен.
@
text
@#ifndef lint
static char rcsid[] = "$Header: io.c,v 1.2 88/01/19 11:51:39 avg Exp $";
#endif

/*
 * $Log:        io.c,v $
 * Revision 1.2  88/01/19  11:51:39  avg
 * Теперь размер блока в define BufSIZE.
 *
 * Revision 1.1  86/11/11  17:51:47  avg
 * Initial revision
 *
 */

/*
 * Экранный редактор eda  ver 2.3
 *   Автор: Антонов В.Г. ВМК МГУ, ИПК Минавтопрома
 *   Последняя модификация: 26.03.1985
 */
#include NAME
#ifdef HPUX
# define int    short
#endif
#include "io.h"

long lseek();

/*
 * Имитатор библиотеки stdio
 */

/*
 * Открыть файл
 */
FILE   *fopen( nm, r )
char   *nm, *r;
{
	int     xbr;
	register FILE *f;

	for( xbr = 0 ; (f = &_bufs[xbr])->_flag != 0 ; xbr++ );
	if( *r == 'r' ) {
		if( (f->_chan = xbr = open( nm, 0 )) == -1 )
			return( (FILE *)0 );
		f->_flag = _IOREAD;
		if( (f->_cnt = read( xbr, f->_buf, BufSIZE ))
		     != BufSIZE )
			f->_flag |= _IOEOF;
		if( f->_cnt == -1 )
			diskerror();
	} else { /* "w" */
		if( (f->_chan = creat( nm, 0644 )) == -1 )
			return( (FILE *)0 );
		f->_flag = _IOWRITE;
		f->_cnt = 0;
	}
	f->_ptr = f->_buf;
	return( f );
}

/*
 * Закрыть файл
 */
fclose( f )
FILE    *f;
{
	long cptr;

	if( f == (FILE *)0 )
		return;
	if( f->_flag & _IOWRITE && f->_cnt ) {
		cptr = lseek(f->_chan, 0l, 1);
		while( write( f->_chan, f->_buf, f->_cnt ) != f->_cnt ) {
			diskerror();
			lseek(f->_chan, cptr, 0);
		}
	}
	close( f->_chan );
	f->_flag = 0;
}

/*
 * Опустошить буфер
 */
fflush( f )
FILE   *f;
{
	long cptr;

	if( f == (FILE *)0 )
		return;
	if( f->_flag & _IOWRITE && f->_cnt ) {
		cptr = lseek(f->_chan, 0l, 1);
		while( write( f->_chan, f->_buf, f->_cnt ) != f->_cnt ) {
			diskerror();
			lseek(f->_chan, cptr, 0);
		}
	}
	f->_cnt = 0;
	f->_ptr = f->_buf;
}

/*
 * Читать символ
 */
int     getc( f )
FILE    *f;
{
	if( f->_cnt-- <= 0 ) {
		if( f->_flag & _IOEOF )
			return( EOF );
		if( (f->_cnt = read( f->_chan, f->_buf, BufSIZE )) != BufSIZE )
			f->_flag |= _IOEOF;
		if( f->_cnt == -1 )
			diskerror();
		else if( f->_cnt == 0 )
			return( EOF );
		f->_cnt--;
		f->_ptr = f->_buf;
	}
	return( *(f->_ptr)++ & 0377);
}

/*
 * Писать символ
 */
putc( ch, f )
char    ch;
FILE   *f;
{
	long cptr;

	if( f->_cnt++ >= BufSIZE ) {
		cptr = lseek(f->_chan, 0l, 1);
		while( write( f->_chan, f->_buf, BufSIZE ) != BufSIZE ) {
			diskerror();
			lseek(f->_chan, cptr, 0);
		}
		f->_ptr = f->_buf;
		f->_cnt = 1;
	}
	*(f->_ptr)++ = ch;
}
@


1.2
log
@Теперь размер блока в define BufSIZE.
@
text
@d2 1
a2 1
static char rcsid[] = "$Header: io.c,v 1.1 86/11/11 17:51:47 avg Exp $";
d7 3
d26 2
d67 2
d71 3
a73 2
	if( f->_flag & _IOWRITE && f->_cnt )
		if( write( f->_chan, f->_buf, f->_cnt ) == -1 )
d75 3
d88 2
d92 3
a94 2
	if( f->_flag & _IOWRITE && f->_cnt )
		if( write( f->_chan, f->_buf, f->_cnt ) == -1 )
d96 3
d131 2
d134 2
a135 1
		if( write( f->_chan, f->_buf, BufSIZE ) == -1 )
d137 2
@


1.1
log
@Initial revision
@
text
@d2 1
a2 1
static char rcsid[] = "$Header$";
d6 4
a9 1
 * $Log$
d41 2
a42 2
		if( (f->_cnt = read( xbr, f->_buf, 512 ))
		     != 512 )
d95 1
a95 1
		if( (f->_cnt = read( f->_chan, f->_buf, 512)) != 512 )
d114 2
a115 2
	if( f->_cnt++ >= 512 ) {
		if( write( f->_chan, f->_buf, 512 ) == -1 )
@
