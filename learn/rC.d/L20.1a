#print
Напишите программу, читающую список положительных
чисел и сортирующую его в возрастающем порядке.
Распечатайте этот отсортированный список с
одним числом на каждой строке. Числа стоит представить
пятью знаками, т.е. со спецификацией %5d в printf.
Чтение чисел заканчивается, когда getnum возвращает
своим значением ноль.
Скомпилируйте и прогоните программу, после чего ответьте "готов".
#once #create Ref
    1
    3
    4
    9
   11
   12
   13
   14
   15
   16
   17
   20
   34
   71
  200
  225
  250
  275
  300
 4095
 7111
16384
#once cp %s/getnum.o .
#once #create input
4 20 3 200 16384 4095 71 11 12 13 14
15 16 17 34 9 7111 300 275 250 225 1
#user
a.out  <input >xxx
#cmp xxx Ref
#succeed
main()
{
	getlist();
	sortlist();
	printlist();
}

int n;
int list[1000];

getlist()
{
	while (list[n]=getnum())
		n++;
}

sortlist()
{
	shellsort(list,n);
}

/* Это программа сортировки по методу Шелла, упрощенная
   для сортировки только целых чисел. Хотя Вы можете и
   не знать как написать такую программу самостоятельно,
   Вам следует знать, где ее найти. Эта программа не на
   много больше, чем сортировка методом пузырька, но
   много быстрее: (n**1.5 к n**2) по времени. */

shellsort(array, nitem)
int *array;
shellsort(v, n)  /* сортировка v[0]...v[n-1] в убывающем порядке */
int v[], n;
{
    int gap, i, j, temp;

    for (gap = n/2; gap > 0; gap /= 2)
        for (i = gap; i < n; i++)
            for (j=i-gap; j>=0 && v[j]>v[j+gap]; j-=gap) {
                temp = v[j];
                v[j] = v[j+gap];
                v[j+gap] = temp;
            }
}

printlist()
{
	int i;
	for(i=0; i<n; i++)
		printf("%5d\n",list[i]);
}
/* Это кондовая программа сортировки
   методом пузырька, которая очень
   хорошо работает, но, к сожалению,
   она не может использоваться для
   больших массивов.
sortlist()
{
	int i, j, k;

	for(i=0; i<n; i++)
		for(j=n-1; j>0; j--)
			if (list[j-1] > list[j]) {
				k = list[j];
				list[j] = list[j-1];
				list[j-1] = k;
			}
}
 ****/
#log
#next
30.1a 10
