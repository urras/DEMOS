head     1.9;
access   avg dmitry flerov davidov alex fox korotaev nms ache dvolodin;
symbols  Архыз1:1.7.2 Архыз0:1.6.1;
locks    ;
comment  @ * @;


1.9
date     90.12.12.17.05.32;  author korotaev;  state Exp;
branches ;
next     1.8;

1.8
date     90.11.12.18.52.28;  author root;  state Exp;
branches ;
next     1.7;

1.7
date     88.08.30.13.42.19;  author korotaev;  state Exp;
branches 1.7.2.1;
next     1.6;

1.6
date     88.06.23.21.23.47;  author ache;  state Exp;
branches 1.6.1.1;
next     1.5;

1.5
date     88.04.21.21.44.20;  author nms;  state Exp;
branches ;
next     1.4;

1.4
date     88.03.23.14.13.12;  author korotaev;  state Exp;
branches ;
next     1.3;

1.3
date     88.01.04.20.39.24;  author korotaev;  state Exp;
branches ;
next     1.2;

1.2
date     86.11.23.22.48.25;  author alex;  state Exp;
branches ;
next     1.1;

1.1
date     86.04.19.15.02.25;  author avg;  state Exp;
branches ;
next     ;

1.6.1.1
date     88.11.01.18.47.33;  author dvolodin;  state Exp;
branches ;
next     ;

1.7.2.1
date     88.11.16.14.36.11;  author dvolodin;  state Exp;
branches ;
next     ;


desc
@
Стандартные вектора прерываний и интерфейсы векторов прерываний.
@


1.9
log
@Правки под ДВК.
@
text
@/*
 *	Low Core
 *
 * $Log:	l.s,v $
 * Revision 1.8  90/11/12  18:52:28  root
 * Новые вещи для СМ 1425 и перемещение некоторых include'ов.
 * 
 * Revision 1.7  88/08/30  13:42:19  korotaev
 * Введена обработка конфликтных векторов. 
 * Вектора всех загрузочных дисков инициируются по мажору
 * полученному из boot'а.
 * 
 * Revision 1.6  88/06/23  21:23:47  ache
 * + 31 оверлей в ядре
 * 
 * Revision 1.5  88/04/21  21:44:20  nms
 * Освобожден ложно занятый вектор 120
 * 
 * Revision 1.4  88/03/23  14:13:12  korotaev
 * Состояние после слияния с АЗЛК, Э-85 и Бурковским планировщиком
 * 
 * Revision 1.3  88/01/04  20:39:24  korotaev
 * Слияние версий с АЗЛК.
 * 
 * Revision 1.2  86/11/23  22:48:25  alex
 * Добавлен dj
 * 
 * Revision 1.1  86/04/19  15:02:25  avg
 * Initial revision
 * 
 */

#define		LOCORE
#include        "h/whoami.h"              /* for localopts */
#include	"../include/trap.h"
#include	"../include/iopage.m"
#include	"../include/koverlay.h"	/* for definition of OVLY_TABLE_BASE */

#include "h/dh.h"
#include "h/dhu.h"
#include "h/dj.h"
#include "h/dn.h"
#include "h/dw.h"
#include "h/dz.h"
#include "h/fd.h"
#include "h/hk.h"
#include "h/hp.h"
#include "h/hs.h"
#include "h/ht.h"
#include "h/kl.h"
#include "h/ks.h"
#include "h/kx.h"
#include "h/ky.h"
#include "h/lp.h"
#include "h/mk.h"
#include "h/my.h"
#include "h/pc.h"
#include "h/ra.h"
#include "h/rk.h"
#include "h/rl.h"
#include "h/rm.h"
#include "h/rp.h"
#include "h/rw.h"
#include "h/rx.h"
#include "h/tm.h"
#include "h/ts.h"
#include "h/video.h"
#include "h/wl.h"
#include "h/xp.h"

	.globl	call, trap, buserr, start, _panic
#ifdef	NONFP
	.globl	instrap
#else
#	define	instrap		trap
#endif
	.globl	emt
	.globl	powrdown

#ifndef	KERN_NONSEP
	.data
#endif

ZERO:

br4 = 200
br5 = 240
br6 = 300
br7 = 340

. = ZERO+0
#ifdef	KERN_NONSEP
	/  If vectors at 110 and 444 are unused,
	/  autoconfig will set these to something more reasonable.
	/  On jump, this will branch to 112, which branches to 50.
	/  On trap, will vector to 444, where a ZEROTRAP will be simulated.
	42				/ illegal instruction if jump
	777				/ trace trap at high priority if trap
#else
	trap; br7+ZEROTRAP.		/ trap-to-zero trap
#endif

/ trap vectors
. = ZERO+4
	buserr; br7+BUSFLT.		/ bus error
	instrap; br7+INSTRAP.		/ illegal instruction
	trap; br7+BPTTRAP.		/ bpt-trace trap
	trap; br7+IOTTRAP.		/ iot trap
	powrdown; br7+POWRFAIL.		/ power fail
	emt; br7+EMTTRAP.		/ emulator trap
	start;br7+SYSCALL.		/ system  (overlaid by 'syscall')

. = ZERO+40
.globl	do_panic
	jmp	do_panic

.globl	 dump
. = ZERO+44
	jmp	dump
#ifdef	KERN_NONSEP
	/  Handler for jump-to-zero panic.
. = ZERO+50
	mov	$zjmp, -(sp)
	jsr	pc, _panic
#endif

#if     NKL > 0
. = ZERO+60
	klin; br5
	klou; br4
#endif

. = ZERO+100
#if PDP11 == 23
	kwlp23; br7                     / Тест на включение часов ДВК-4
#else
	kwlp; br6
#endif
	kwlp; br6

. = ZERO+114
	trap; br7+PARITYFLT.            / 11/70 parity (and other CPUs also)

#if     NMY > 0
. = ZERO+170
	myio; br5
#endif

#if     NVI > 0
. = ZERO+200
	viin; br4
	viou; br4
#endif

#if     NKY > 0
. = ZERO+210
	kyio; br4
#endif

#if     NKX > 0
. = ZERO+220
	kxin; br4
	kxou; br4
#endif

#if     NVI > 0
. = ZERO+230
	kwlp85; br6
#endif

. = ZERO+240
	trap; br7+PIRQ.			/ programmed interrupt
	trap; br7+ARITHTRAP.		/ floating point
	trap; br7+SEGFLT.		/ segmentation violation

#if NRW > 0
. = ZERO+300
	rwio; br5+0.
	rwpd; br5+0.
#else
#if     NDW > 0
. = ZERO+300
	dwio; br7
#endif

#endif

#if NFD > 0
. = ZERO+310
	fdio; br5
#endif

#if NVI > 0
. = ZERO+320
	vifr; br5
#endif

#if NRW > 1
. = ZERO+330
	rwio; br5+1.
	rwpd; br5+1.
#endif

#if     NWL > 0
. = ZERO+770
	wlin; br5
	wlou; br5
#endif

/ floating vectors
. = ZERO + 1000
endvec = .				/ endvec should be past vector space
					/ (if NONSEP, should be at least 450)

/ overlay descriptor tables
. = ZERO+OVLY_TABLE_BASE
.globl	ova, ovd, ovend
#ifdef  IPK_XKOV
ova:    .=.+100                         / overlay addresses
ovd:    .=.+100                         / overlay sizes
#else
ova:	.=.+20				/ overlay addresses
ovd:	.=.+20				/ overlay sizes
#endif
ovend:	.=.+2				/ end of overlays

//////////////////////////////////////////////////////
/		interface code to C
//////////////////////////////////////////////////////

/
/ Ниже описана структура для C ( см. sys/main.c (vect_conflict()) )
/
/       struct vecconfl {
/               int vc_name;
/               int *vc_vect;
/               int vc_major;
/       };
/
.globl _vecconfl
_vecconfl:
#if     NRA > 0
	raio; 154; 14.
#endif
#if	NRL > 0
	rlio; 160; 8.
#endif
#if	NHK > 0
	hkio; 210; 4.
#endif
#if	NRK > 0
	rkio; 220; 0.
#endif
#if	NXP > 0
	xpio; 254; 6.
#endif
#if	NHP > 0
	hpio; 254; 6.
#endif
#if	NRM > 0
	rmio; 254; 6.
#endif
#if	NRP > 0
	rpio; 254; 1.
#endif
#if     NRX > 0
	rxio; 264; 11.
#endif
	0;    0;   0

#ifndef	KERN_NONSEP
.text
	/  This is text location 0 for separate I/D kernels.
	mov     $zjmp, -(sp)
	jsr	pc, _panic
	/*NOTREACHED*/

	/  Unmap is called from _doboot to turn off memory management.
	/  The "return" is arranged by putting a jmp at unmap+2 (data space).

	reset=	5
	.globl unmap
unmap:
	reset
	/  The next instruction executed is from unmap+2 in physical memory,
	/  which is unmap+2 in data space.

#endif	KERN_NONSEP

	.data
zjmp:	<jump to 0\0>
	.text

/  CGOOD and CBAD are used by autoconfig.
/  All unused vectors are set to CBAD
/  before probing the devices.

.globl	CGOOD, CBAD, _conf_int
	rtt = 6
CGOOD:	mov	$1, _conf_int ; rtt
CBAD:	mov	$-1,_conf_int ; rtt

#if NKL > 0
.globl	_klrint
klin:	jsr	r0,call; jmp _klrint
.globl	_klxint
klou:	jsr	r0,call; jmp _klxint
#endif

#if NWL > 0
.globl  _wlrint
wlin:   jsr     r0,call; jmp _wlrint
.globl  _wlxint
wlou:   jsr     r0,call; jmp _wlxint
#endif

#if NKX > 0
.globl  _kxrint
kxin:   jsr     r0,call; jmp _kxrint
.globl  _kxxint
kxou:   jsr     r0,call; jmp _kxxint
#endif

#if NKY > 0
.globl _kyintr
kyio:   jsr     r0,call; jmp _kyintr
#endif

.globl	_clock
#if NVI > 0     /* этой проверкой мы устанавливаем Эл-ку-85 */
kwlp85: tst     *$173030  / DEC Professional timer register C
#else
#ifdef DVK4
/ Тест для включения clock-ов. Ячейка isclock проверяется clkstart
/ на предмет определения "включен ли таймер". Чечик И.Е., ЛГУ Физ.фак.
.globl  _isclock
kwlp23: bis     $br7, 2(sp)     / Восстановить 7 приоритет "main"
	mov     KISD0, -(sp)    / Спрятать состояние страницы
	movb    $RW, KISD0      / Разрешить запись в младший лист
	mov     $kwlp, *$100    / Записать адрес и приоритет...
	mov     $br6, *$102     / ...собственно п/пр-мы обработки тиков
	mov     (sp)+, KISD0    / Вытащить нормальное состояние страницы
	clr     _isclock        / Зачистить флаг запроса
	rtt
#endif
#endif
kwlp:	jsr	r0,call; jmp _clock

#if NVI > 0
.globl  _virint
viin:   jsr     r0,call; jmp _virint
.globl  _vixint
viou:   jsr     r0,call; jmp _vixint
.globl  _softroll
vifr:   jsr     r0,call; jmp _softroll
#endif

#if	NDH > 0
.globl	_dhrint
dhin:	jsr	r0,call; jmp _dhrint
.globl	_dhxint
dhou:	jsr	r0,call; jmp _dhxint
#endif

#if     NDHU > 0
.globl  _dhurint
uhin:   jsr     r0,call; jmp _dhurint
.globl  _dhuxint
uhou:   jsr     r0,call; jmp _dhuxint
#endif

#if     NPC > 0
.globl  _pcrint
pcin:   jsr     r0,call; jmp _pcrint
.globl  _pcxint
pcou:   jsr     r0,call; jmp _pcxint
#endif

#if	NDJ > 0
.globl	_djrint
djin:	jsr	r0,call; jmp _djrint
.globl	_djxint
djou:	jsr	r0,call; jmp _djxint
#endif

#if	NDM > 0
.globl	_dmintr
dmin:	jsr	r0,call; jmp _dmintr
#endif

#if	NDZ > 0
.globl	_dzrint
dzin:	jsr	r0,call; jmp _dzrint
#ifndef	DZ_PDMA
.globl	_dzxint
dzou:	jsr	r0,call; jmp _dzxint
#endif	DZ_PDMA
#endif	NDZ

#if	NHK > 0
.globl	_hkintr
hkio:	jsr	r0,call; jmp _hkintr
#endif

#if	NHP > 0
.globl	_hpintr
hpio:	jsr	r0,call; jmp _hpintr
#endif

#if	NHS > 0
.globl	_hsintr
hsio:	jsr	r0,call; jmp _hsintr
#endif

#if	NHT > 0
.globl	_htintr
htio:	jsr	r0,call; jmp _htintr
#endif

#if	NLP > 0
.globl	_lpintr
lpio:	jsr	r0,call; jmp _lpintr
#endif

#if	NRK > 0
.globl	_rkintr
rkio:	jsr	r0,call; jmp _rkintr
#endif

#if     NRX > 0
.globl  _rxintr
rxio:   jsr     r0,call; jmp _rxintr
#endif

#if     NRW > 0
.globl  _rwintr, _rwpdma
rwio:   jsr     r0,call; jmp _rwintr
rwpd:   jsr     r0,call; jmp _rwpdma
#endif

#if     NFD > 0
.globl _fdintr
fdio:   jsr     r0,call; jmp _fdintr
#endif

#if	NRL > 0
.globl	_rlintr
rlio:	jsr	r0,call; jmp _rlintr
#endif

#if     NMY > 0
.globl  _myintr
myio:   jsr     r0,call; jmp _myintr
#endif

#if	NRM > 0
.globl	_rmintr
rmio:	jsr	r0,call; jmp _rmintr
#endif

#if	NRP > 0
.globl	_rpintr
rpio:	jsr	r0,call; jmp _rpintr
#endif

#if	NTM > 0
.globl	_tmintr
tmio:	jsr	r0,call; jmp _tmintr
#endif

#if	NTS > 0
.globl	_tsintr
tsio:	jsr	r0,call; jmp _tsintr
#endif

#if	NXP > 0
.globl	_xpintr
xpio:	jsr	r0,call; jmp _xpintr
#endif

#if     NDW > 0
.globl	_dwintr
dwio:   jsr     r0,call; jmp _dwintr
#endif

#if     NKS > 0
.globl  _ksrint
ksin:   jsr     r0,call; jmp _ksrint
.globl  _ksxint
ksou:   jsr     r0,call; jmp _ksxint
#endif  NKS

#if     NMK > 0
.globl	_mkrint
mkin:	jsr	r0,call; jmp _mkrint
.globl	_mkxint
mkou:	jsr	r0,call; jmp _mkxint
#endif  NMK

#if     NRA > 0
.globl  _udintr
raio:   jsr     r0,call; jmp _udintr
#endif

#if	NVP > 0
.globl  _vpintr
vpio:	jsr	r0,call; jmp _vpintr
#endif
@


1.8
log
@Новые вещи для СМ 1425 и перемещение некоторых include'ов.
@
text
@d5 3
d43 1
d51 1
d55 2
d134 3
d138 1
d144 5
d180 4
d186 2
d332 13
d346 1
d451 5
d480 19
@


1.7
log
@Введена обработка конфликтных векторов. 
Вектора всех загрузочных дисков инициируются по мажору
полученному из boot'а.
@
text
@d5 5
d31 4
a34 4
#include	"whoami.h"		/* for localopts */
#include	<sys/trap.h>
#include	<sys/iopage.m>
#include	<sys/koverlay.h>	/* for definition of OVLY_TABLE_BASE */
d36 27
a62 26
#include "dh.h"
#include "dhu.h"
#include "dj.h"
#include "dn.h"
#include "dz.h"
#include "fd.h"
#include "hk.h"
#include "hp.h"
#include "hs.h"
#include "ht.h"
#include "kl.h"
#include "kx.h"
#include "ky.h"
#include "lp.h"
#include "pc.h"
#include "ra.h"
#include "rk.h"
#include "rl.h"
#include "rm.h"
#include "rp.h"
#include "rw.h"
#include "rx.h"
#include "tm.h"
#include "ts.h"
#include "video.h"
#include "xp.h"
a69 1
#ifdef	MENLO_OVLY
a70 4
#else
#	define	emt		trap
#endif
#ifdef	UCB_AUTOBOOT
a71 3
#else
#	define	powrdown	trap
#endif
a106 1
#ifdef	UCB_AUTOBOOT
a108 3
#else
	br	.
#endif
d182 5
a192 1
#ifdef	MENLO_KOV
a203 1
#endif
d286 7
@


1.7.2.1
log
@Еще САО.
@
text
@a4 9
 *
 * Revision 1.?  88/10/18            mlm
 * Добавлен cc
 * 
 * Revision 1.7  88/08/30  13:42:19  korotaev
 * Введена обработка конфликтных векторов. 
 * Вектора всех загрузочных дисков инициируются по мажору
 * полученному из boot'а.
 * 
a56 1
#include "cc.h"
a443 8
#endif

#if     NCC > 0
.globl  _ccint
cctr1:  jsr     r5,trap
	mov     $164000,-(sp)
	jsr     pc,_ccint
	rts     pc
@


1.6
log
@+ 31 оверлей в ядре
@
text
@d5 3
a138 10
#if     NRA > 0
. = ZERO+154
	raio; br5
#endif

#if	NRL > 0
. = ZERO+160
	rlio; br5
#endif

a149 10
#if	NHK > 0
. = ZERO+210
	hkio; br5
#endif

#if	NRK > 0
. = ZERO+220
	rkio; br5
#else

a154 1
#endif
a165 22
. = ZERO+254
#if	NXP > 0
	xpio; br5
#else
#if	NHP > 0
	hpio; br5
#else
#if	NRM > 0
	rmio; br5
#else
#if	NRP > 0
	rpio; br5
#endif
#endif
#endif
#endif

#if     NRX > 0
. = ZERO+264
	rxio; br5
#endif

d212 40
a444 1

@


1.6.1.1
log
@Правки из САО (для 1630).
@
text
@a4 3
 * Revision 1.6  88/06/23  21:23:47  ache
 * + 31 оверлей в ядре
 * 
a38 1
#include "ais.h"
a205 6
#if NAIS > 0
. = ZERO+300
	aisint; br4+1.
	aisint; br4+0.
#endif /* NAIS */

a445 4
#if NAIS > 0
.globl  _aisint
aisint: jsr     r0,call; jmp _aisint
#endif
@


1.5
log
@Освобожден ложно занятый вектор 120
@
text
@d5 3
d238 4
d244 1
@


1.4
log
@Состояние после слияния с АЗЛК, Э-85 и Бурковским планировщиком
@
text
@d5 3
d131 1
a131 2
	trap; br7+PARITYFLT.		/ 11/70 parity
	trap; br7+SEGFLT.		/ segmentation violation
@


1.3
log
@Слияние версий с АЗЛК.
@
text
@d5 3
d27 1
d33 2
d36 2
d42 2
d46 1
a46 1
#include "vp.h"
a47 3
#include "rx.h"
#include "pc.h"
#include "ra.h"
d117 1
d121 1
d141 11
d160 6
d167 1
d169 5
d201 23
a244 1
/       0
d274 1
d279 1
d281 12
d294 3
d299 9
d385 11
a420 5
#if	NVP > 0
.globl  _vpintr
vpio:	jsr	r0,call; jmp _vpintr
#endif

d430 6
@


1.2
log
@Добавлен dj
@
text
@d5 3
d20 1
d38 3
d111 1
a111 1
	klin; br4
d122 5
d164 5
d235 14
d300 5
d331 1
a331 1
.globl	_vpintr
d338 5
@


1.1
log
@Initial revision
@
text
@d2 1
a2 1
 *      Low Core
d4 4
a7 1
 * $Log$
d10 5
a14 5
#define         LOCORE
#include        "whoami.h"              /* for localopts */
#include        <sys/trap.h>
#include        <sys/iopage.m>
#include        <sys/koverlay.h>        /* for definition of OVLY_TABLE_BASE */
d17 1
d35 3
a37 3
	.globl  call, trap, buserr, start, _panic
#ifdef  NONFP
	.globl  instrap
d39 1
a39 1
#       define  instrap         trap
d41 2
a42 2
#ifdef  MENLO_OVLY
	.globl  emt
d44 1
a44 1
#       define  emt             trap
d46 2
a47 2
#ifdef  UCB_AUTOBOOT
	.globl  powrdown
d49 1
a49 1
#       define  powrdown        trap
d52 1
a52 1
#ifndef KERN_NONSEP
d64 1
a64 1
#ifdef  KERN_NONSEP
d69 2
a70 2
	42                              / illegal instruction if jump
	777                             / trace trap at high priority if trap
d72 1
a72 1
	trap; br7+ZEROTRAP.             / trap-to-zero trap
d77 7
a83 7
	buserr; br7+BUSFLT.             / bus error
	instrap; br7+INSTRAP.           / illegal instruction
	trap; br7+BPTTRAP.              / bpt-trace trap
	trap; br7+IOTTRAP.              / iot trap
	powrdown; br7+POWRFAIL.         / power fail
	emt; br7+EMTTRAP.               / emulator trap
	start;br7+SYSCALL.              / system  (overlaid by 'syscall')
d86 3
a88 3
#ifdef  UCB_AUTOBOOT
.globl  do_panic
	jmp     do_panic
d90 1
a90 1
	br      .
d93 1
a93 1
.globl   dump
d95 2
a96 2
	jmp     dump
#ifdef  KERN_NONSEP
d99 2
a100 2
	mov     $zjmp, -(sp)
	jsr     pc, _panic
d112 2
a113 2
	trap; br7+PARITYFLT.            / 11/70 parity
	trap; br7+SEGFLT.               / segmentation violation
d115 1
a115 1
#if     NRL > 0
d120 1
a120 1
#if     NHK > 0
d125 1
a125 1
#if     NRK > 0
d131 3
a133 3
	trap; br7+PIRQ.                 / programmed interrupt
	trap; br7+ARITHTRAP.            / floating point
	trap; br7+SEGFLT.               / segmentation violation
d136 1
a136 1
#if     NXP > 0
d139 1
a139 1
#if     NHP > 0
d142 1
a142 1
#if     NRM > 0
d145 1
a145 1
#if     NRP > 0
d154 1
a154 1
endvec = .                              / endvec should be past vector space
d157 1
a157 1
#ifdef  MENLO_KOV
d160 4
a163 4
.globl  ova, ovd, ovend
ova:    .=.+20                          / overlay addresses
ovd:    .=.+20                          / overlay sizes
ovend:  .=.+2                           / end of overlays
d167 1
a167 1
/               interface code to C
d170 1
a170 1
#ifndef KERN_NONSEP
d173 1
d175 1
a175 1
	jsr     pc, _panic
d181 1
a181 1
	reset=  5
d188 1
a188 1
#endif  KERN_NONSEP
d191 1
a191 1
zjmp:   <jump to 0\0>
d198 1
a198 1
.globl  CGOOD, CBAD, _conf_int
d200 2
a201 2
CGOOD:  mov     $1, _conf_int ; rtt
CBAD:   mov     $-1,_conf_int ; rtt
d203 4
a206 4
.globl  _klrint
klin:   jsr     r0,call; jmp _klrint
.globl  _klxint
klou:   jsr     r0,call; jmp _klxint
d208 2
a209 2
.globl  _clock
kwlp:   jsr     r0,call; jmp _clock
d211 5
a215 5
#if     NDH > 0
.globl  _dhrint
dhin:   jsr     r0,call; jmp _dhrint
.globl  _dhxint
dhou:   jsr     r0,call; jmp _dhxint
d218 5
a222 3
#if     NDM > 0
.globl  _dmintr
dmin:   jsr     r0,call; jmp _dmintr
d225 4
a228 8
#if     NDZ > 0
.globl  _dzrint
dzin:   jsr     r0,call; jmp _dzrint
#ifndef DZ_PDMA
.globl  _dzxint
dzou:   jsr     r0,call; jmp _dzxint
#endif  DZ_PDMA
#endif  NDZ
d230 12
a241 3
#if     NHK > 0
.globl  _hkintr
hkio:   jsr     r0,call; jmp _hkintr
d244 3
a246 3
#if     NHP > 0
.globl  _hpintr
hpio:   jsr     r0,call; jmp _hpintr
d249 3
a251 3
#if     NHS > 0
.globl  _hsintr
hsio:   jsr     r0,call; jmp _hsintr
d254 3
a256 3
#if     NHT > 0
.globl  _htintr
htio:   jsr     r0,call; jmp _htintr
d259 3
a261 3
#if     NLP > 0
.globl  _lpintr
lpio:   jsr     r0,call; jmp _lpintr
d264 3
a266 3
#if     NRK > 0
.globl  _rkintr
rkio:   jsr     r0,call; jmp _rkintr
d269 3
a271 3
#if     NRL > 0
.globl  _rlintr
rlio:   jsr     r0,call; jmp _rlintr
d274 3
a276 3
#if     NRM > 0
.globl  _rmintr
rmio:   jsr     r0,call; jmp _rmintr
d279 3
a281 3
#if     NRP > 0
.globl  _rpintr
rpio:   jsr     r0,call; jmp _rpintr
d284 3
a286 3
#if     NTM > 0
.globl  _tmintr
tmio:   jsr     r0,call; jmp _tmintr
d289 3
a291 3
#if     NTS > 0
.globl  _tsintr
tsio:   jsr     r0,call; jmp _tsintr
d294 3
a296 3
#if     NVP > 0
.globl  _vpintr
vpio:   jsr     r0,call; jmp _vpintr
d299 3
a301 3
#if     NXP > 0
.globl  _xpintr
xpio:   jsr     r0,call; jmp _xpintr
@
