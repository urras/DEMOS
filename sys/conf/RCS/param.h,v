head     1.12;
access   avg dmitry flerov davidov alex fox korotaev dvolodin abs;
symbols  Архыз0:1.7.1;
locks    ;
comment  @ * @;


1.12
date     89.04.11.20.07.00;  author korotaev;  state Exp;
branches ;
next     1.11;

1.11
date     89.03.06.16.28.51;  author avg;  state Exp;
branches ;
next     1.10;

1.10
date     89.03.04.14.10.44;  author abs;  state Exp;
branches ;
next     1.9;

1.9
date     89.01.11.14.40.54;  author korotaev;  state Exp;
branches ;
next     1.8;

1.8
date     88.11.16.14.04.05;  author dvolodin;  state Exp;
branches ;
next     1.7;

1.7
date     88.07.15.22.13.31;  author korotaev;  state Exp;
branches ;
next     1.6;

1.6
date     88.07.05.14.26.05;  author avg;  state Exp;
branches ;
next     1.5;

1.5
date     88.06.06.14.47.24;  author korotaev;  state Exp;
branches ;
next     1.4;

1.4
date     88.04.02.17.30.57;  author korotaev;  state Exp;
branches ;
next     1.3;

1.3
date     87.12.08.13.03.38;  author root;  state Exp;
branches ;
next     1.2;

1.2
date     87.11.16.13.09.47;  author avg;  state Exp;
branches ;
next     1.1;

1.1
date     86.04.19.15.02.37;  author avg;  state Exp;
branches ;
next     ;


desc
@
Разные глобальные константы.
@


1.12
log
@Этот файл канонизирован и сносится отсюда по причине наличия
только фундаментальных констант.
@
text
@/*
 * $Log:	param.h,v $
 * Revision 1.11  89/03/06  16:28:51  avg
 * Если установлен IPK_KPROF, splx вызывается как процедура.
 * 
 * Revision 1.10  89/03/04  14:10:44  abs
 * добавлены маска приоритетов PMASK и флаг PCATCH (see slp.c)
 *
 * Revision 1.9  89/01/11  14:40:54  korotaev
 * Вставлен NSYMLNK.
 *
 * Revision 1.8  88/11/16  14:04:05  dvolodin
 * *** empty log message ***
 *
 * Revision 1.7  88/07/15  22:13:31  korotaev
 * Был пропущен один #endif.
 *
 * Revision 1.6  88/07/05  14:26:05  avg
 * Для программ с IPK_XOVLY сделан MAXMEM == 400 Kb
 *
 * Revision 1.5  88/06/06  14:47:24  korotaev
 * Вставлен IPK_SELECT (from TCP/IP).
 *
 * Revision 1.4  88/04/02  17:30:57  korotaev
 * Включен новый планировщик и изменены некоторые умолчания.
 *
 * Revision 1.3  87/12/08  13:03:38  root
 * Вставлен новый приоритет процесса PLOCK для сист. вызова flock.
 *
 * Revision 1.2  87/11/16  13:09:47  avg
 * В случае использования IPK_XOVLY размер USER должен быть 2Кб.
 *
 * Revision 1.1  86/04/19  15:02:37  avg
 * Initial revision
 *
 */

#include        "whoami.h"
#include        <signal.h>
#include        <sys/psw.h>
#include        <sys/types.h>
#include        <sys/iopage.h>

#define MAXMEM  (400*16)        /* max core per process - first # is Kb */
#define MAXUPRC 20              /* max processes per user */
#define SSIZE   20              /* initial stack size (*64 bytes) */
#define SINCR   20              /* increment of stack (*64 bytes) */
#define NOFILE  20              /* max open files per process */
#define CANBSIZ 256             /* max size of typewriter line */
#define MSGBUFS 128             /* Characters saved from error messages */
#define NCARGS  5120            /* # characters in exec arglist */
#ifdef  UCB_METER
#define MAXSLP  20              /* max time a process is considered sleeping */
#endif

/*
 * priorities
 * probably should not be
 * altered too much
 */
#define PMASK 0177
#define PCATCH 0400

#ifdef  CGL_RTP
#define PRTP    0
#define PSWP    5
#else
#define PSWP    0
#endif
#define PINOD   10
#define PRIBIO  20
#define PZERO   25
#define PPIPE   26
#define PWAIT   30
#define PLOCK   35
#define PSLEP   40
#define PUSER   50
#define PIDLE   127

#define NZERO   20

#define ULEVEL  7
#define RTLEVEL 16
#define MAXLEVEL 31

/*
 * fundamental constants of the implementation--
 * cannot be changed easily
 */

#define NBPW    sizeof(int)     /* number of bytes in an integer */
#define NBBY    8               /* number of bit in a byte */

#define BSLOP   0               /* BSLOP can be 0 unless you have a TIU/Spider*/

#ifndef UCB_NKB
#define BSIZE   512             /* size of secondary block (bytes) */
#define NINDIR  (BSIZE/sizeof(daddr_t))
#define BMASK   0777            /* BSIZE-1 */
#define BSHIFT  9               /* LOG2(BSIZE) */
#define NMASK   0177            /* NINDIR-1 */
#define NSHIFT  7               /* LOG2(NINDIR) */
#endif

#if     UCB_NKB == 1
#define CLSIZE  2               /* number of blocks / cluster */
#define BSIZE   1024            /* size of secondary block (bytes) */
#define NINDIR  (BSIZE/sizeof(daddr_t))
#define BMASK   01777           /* BSIZE-1 */
#define BSHIFT  10              /* LOG2(BSIZE) */
#define NMASK   0377            /* NINDIR-1 */
#define NSHIFT  8               /* LOG2(NINDIR) */
#endif

#define UBSIZE  512             /* block size visible to users */
#ifdef  UCB_QUOTAS
#define QCOUNT  (BSIZE/UBSIZE)  /* BSIZE must always be a multiple of UBSIZE */
#endif

#define USIZE   32              /* size of user block (*64) */
#define NULL    0
#define CMASK   0               /* default mask for file creation */
#define NODEV   (dev_t)(-1)
#define ROOTINO ((ino_t)2)      /* i number of all roots */
#define SUPERB  ((daddr_t)1)    /* block number of the super block */
#define DIRSIZ  14              /* max characters per directory */

#define NICINOD 100             /* number of superblock inodes */
#define NICFREE 50              /* number of superblock free blocks */

#define CBSIZE  14              /* number of chars in a clist block */
				/* CBSIZE+sizeof(int *) must be a power of 2 */
#define CROUND  017             /* clist rounding: sizeof(int *) + CBSIZE - 1*/

#define PGSIZE  512             /* bytes per addressable disk sector */
#define PGSHIFT 9               /* LOG2(PGSIZE) */

/*
 * Some macros for units conversion
 */

/* Core clicks (64 bytes) to segments and vice versa */
#define ctos(x)         (((x)+127)/128)
#define stoc(x)         ((x)*128)

/* Core clicks (64 bytes) to disk blocks */
#define ctod(x)         (((x)+7)>>3)

/* I number to disk address */
#ifndef UCB_NKB
#define itod(x)         (daddr_t)((((unsigned)(x)+15)>>3))
#else
#define itod(x)         ((daddr_t)((((unsigned)(x)+2*INOPB-1)/INOPB)))
#endif

/* I number to disk offset */
#ifndef UCB_NKB
#define itoo(x)         (int)(((x)+15)&07)
#else
#define itoo(x)         ((int)(((x)+2*INOPB-1)%INOPB))
#endif

/* file system blocks to disk blocks and back */
#ifndef UCB_NKB
#define fsbtodb(b)      ((daddr_t)(b))
#define dbtofsb(b)      ((daddr_t)(b))
#else
#define fsbtodb(b)      ((daddr_t)((daddr_t)(b)<<1))
#define dbtofsb(b)      ((daddr_t)((daddr_t)(b)>>1))
#endif

/* round a number of clicks up to a whole cluster */
#ifdef  UCB_NKB
#define clrnd(i)        (((i) + (CLSIZE-1)) & ~(CLSIZE-1))
#endif

/* clicks to bytes */
#define ctob(x)         ((x)<<6)

/* bytes to clicks */
#define btoc(x)         ((((unsigned)(x)+63)>>6))

/* low int of a long */
#define loint(l)        ((int) (l) & 0177777)

/* high int of a long */
#define hiint(l)        ((int) ((l) >> 16))

/*
 * Machine-dependent bits and macros
 */

/*
 * Treat PS as byte, to allow restoring value from mfps/movb
 * (see :splfix.*)
 */
#define PS_LOBYTE       ((char *) 0177776)
#ifndef IPK_KPROF
#define splx(ops)       (*PS_LOBYTE = ((char) (ops)))
#endif

#ifndef MIN
#define MIN(a,b)        (((a)<(b))? (a):(b))
#endif
#define MAX(a,b)        (((a)>(b))? (a):(b))

/*
 * Return values from tsleep().
 */
#define TS_OK   0       /* normal wakeup */
#define TS_TIME 1       /* timed-out wakeup */
#define TS_SIG  2       /* asynchronous signal wakeup */

#define NSYMLNK 8       /* максимальная глубина симв. ссылок */
@


1.11
log
@Если установлен IPK_KPROF, splx вызывается как процедура.
@
text
@d2 4
a5 1
 * $Log:        param.h,v $
a37 1
#ifndef _WHOAMI
a38 2
#endif
#ifndef NSIG
a39 1
#endif
a43 1
#ifdef IPK_XOVLY
a44 7
#else
# ifdef  UNIBUS_MAP
# define MAXMEM  (200*16)       /* max core per process - first # is Kb */
# else
# define MAXMEM  (128*16)       /* max core per process - first # is Kb */
# endif
#endif
a119 1
#if defined(UCB_NET) || defined(IPK_XOVLY)
a120 3
#else
#define USIZE   16              /* size of user block (*64) */
#endif
a162 1
#if     UCB_NKB == 1
a163 3
#define fsbtodb(b)      ((daddr_t)((daddr_t)(b)<<1))
#define dbtofsb(b)      ((daddr_t)((daddr_t)(b)>>1))
#endif
d167 3
d172 1
a173 1
/* round a number of clicks up to a whole cluster */
a206 1
#if defined( UCB_NET ) || defined( IPK_SELECT )
a212 1
#endif
@


1.10
log
@добавлены маска приоритетов PMASK и флаг PCATCH (see slp.c)
@
text
@d2 4
a5 1
 * $Log:	param.h,v $
d8 1
a8 1
 * 
d11 1
a11 1
 * 
d14 1
a14 1
 * 
d17 1
a17 1
 * 
d212 1
d214 1
@


1.9
log
@Вставлен NSYMLNK.
@
text
@d3 3
d67 3
d84 1
@


1.8
log
@*** empty log message ***
@
text
@d3 3
d217 2
@


1.7
log
@Был пропущен один #endif.
@
text
@d3 3
a71 1
#ifdef IPK_FLOCK
a72 1
#endif
@


1.6
log
@Для программ с IPK_XOVLY сделан MAXMEM == 400 Kb
@
text
@d2 4
a5 1
 * $Log:        param.h,v $
d40 1
@


1.5
log
@Вставлен IPK_SELECT (from TCP/IP).
@
text
@d2 4
a5 1
 * $Log:	param.h,v $
d8 1
a8 1
 * 
d11 1
a11 1
 * 
d30 2
a31 2
#ifdef  UNIBUS_MAP
#define MAXMEM  (200*16)        /* max core per process - first # is Kb */
d33 4
a36 1
#define MAXMEM  (128*16)        /* max core per process - first # is Kb */
@


1.4
log
@Включен новый планировщик и изменены некоторые умолчания.
@
text
@d3 3
d77 1
d195 1
a195 1
#ifdef  UCB_NET
@


1.3
log
@Вставлен новый приоритет процесса PLOCK для сист. вызова flock.
@
text
@d2 4
a5 1
 * $Log:        param.h,v $
d63 4
@


1.2
log
@В случае использования IPK_XOVLY размер USER должен быть 2Кб.
@
text
@d3 3
d53 3
@


1.1
log
@Initial revision
@
text
@d2 4
a5 1
 * $Log$
d88 3
a90 1
#ifndef UCB_NET
a91 2
#else
#define USIZE   32              /* size of user block (*64) */
@
