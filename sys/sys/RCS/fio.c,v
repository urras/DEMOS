head     22.3;
access   avg dmitry flerov davidov alex fox korotaev dvolodin abs;
symbols  Архыз0:1.5.1;
locks    ;
comment  @ * @;


22.3
date     90.11.12.19.10.12;  author root;  state Exp;
branches ;
next     22.2;

22.2
date     89.07.24.19.26.03;  author korotaev;  state Exp;
branches ;
next     22.1;

22.1
date     89.04.12.15.18.55;  author korotaev;  state Exp;
branches ;
next     22.0;

22.0
date     89.03.30.13.41.58;  author korotaev;  state Exp;
branches ;
next     1.7;

1.7
date     89.01.07.20.39.52;  author korotaev;  state Exp;
branches ;
next     1.6;

1.6
date     88.11.17.19.14.32;  author dvolodin;  state Exp;
branches ;
next     1.5;

1.5
date     88.07.15.19.05.52;  author korotaev;  state Exp;
branches ;
next     1.4;

1.4
date     88.06.29.15.44.55;  author korotaev;  state Exp;
branches ;
next     1.3;

1.3
date     87.12.12.18.12.52;  author korotaev;  state Exp;
branches ;
next     1.2;

1.2
date     87.04.18.13.28.41;  author avg;  state Exp;
branches ;
next     1.1;

1.1
date     86.04.19.15.49.43;  author avg;  state Exp;
branches ;
next     ;


desc
@Ядро системы.  Машинно-независимая часть.
@


22.3
log
@Новые вещи для СМ1425 и перемещение include.
@
text
@/*
 * $Log:	fio.c,v $
 * Revision 22.2  89/07/24  19:26:03  korotaev
 * Исправлен flock.
 * 
 * Revision 22.1  89/04/12  15:18:55  korotaev
 * "param.h" ==> <sys/param.h>
 * 
 * Revision 22.0  89/03/30  13:41:58  korotaev
 * Begining DEMOS 2.2.
 * 
 * Revision 1.7  89/01/07  20:39:52  korotaev
 * Слияние с исправлениями насчет FIFO, +fcntl, + разные режимы открытия
 * 
 * (from VAX/UTS SV.2)
 * 
 * Revision 1.6  88/11/17  19:14:32  dvolodin
 * *** empty log message ***
 * 
 * Revision 1.5  88/07/15  19:05:52  korotaev
 * Добавлены новые устройства: root(255,0) и swap(255,1).
 * При работе с ними используются текущие rootdev и swapdev.
 * 
 * Revision 1.4  88/06/29  15:44:55  korotaev
 * Исправлено поле в <sys/inode.h>
 * 
 * Revision 1.3  87/12/12  18:12:52  korotaev
 * Вставлен системный вызов flock.
 * 
 * Revision 1.2  87/04/18  13:28:41  avg
 * Сделаны правки под EXMOUNT.
 *
 * Revision 1.1  86/04/19  15:49:43  avg
 * Initial revision
 *
 */

#include <sys/param.h>
#include <sys/systm.h>
#include <sys/dir.h>
#include <sys/user.h>
#include <sys/filsys.h>
#include <sys/file.h>
#include <sys/conf.h>
#include <sys/inode.h>
#include "../include/reg.h"
#include <sys/acct.h>

/*
 * Convert a user supplied
 * file descriptor into a pointer
 * to a file structure.
 * Only task is to check range
 * of the descriptor.
 */
struct file *
getf(f)
register int f;
{
	register struct file *fp;

	if(0 <= f && f < NOFILE) {
		fp = u.u_ofile[f];
		if(fp != NULL)
			return(fp);
	}
	u.u_error = EBADF;
	return(NULL);
}

/*
 * Internal form of close.
 * Decrement reference count on
 * file structure.
 * Also make sure the pipe protocol
 * does not constipate.
 *
 * Decrement reference count on the inode following
 * removal to the referencing file structure.
 * Call device handler on last close.
 */
#ifdef  UCB_NET
closef(fp, nouser)
#else
closef(fp)
#endif
register struct file *fp;
{
	register struct inode *ip;
	int flag;
	dev_t dev;
	register int (*cfunc)();

	if(fp == (struct file *) NULL)
		return;
	if (fp->f_count > 1) {
		fp->f_count--;
		return;
	}
	flag = fp->f_flag;
	if( flag & (FSHLOCK|FEXLOCK) )
		ino_unlock(fp, FSHLOCK|FEXLOCK);
#ifdef UCB_NET
	if (flag & FSOCKET) {
		u.u_error = 0;                  /* XXX */
		soclose(fp->f_socket, nouser);
		if (nouser == 0 && u.u_error)
			return;
		fp->f_socket = 0;
		fp->f_count = 0;
		u.u_error = 0;
		return;
	}
#endif
	ip = fp->f_inode;
	fp->f_count = 0;
	plock(ip);
	switch(ip->i_mode&IFMT) {
	case IFCHR:
		dev = ip->i_un.i_rdev;
		cfunc = cdevsw[major(dev)].d_close;
		break;
	case IFBLK:
		dev = ip->i_un.i_rdev;
		if( major(dev) == 255 )
			dev = (minor(dev)==0)?rootdev:swapdev;
		cfunc = bdevsw[major(dev)].d_close;
		break;
	case IFIFO:
		closep(ip,flag);
	default:
		iput(ip);
		return;
	}
	iput(ip);
	for(fp = file; fp < fileNFILE; fp++) {
#ifdef  UCB_NET
		if (fp->f_flag & FSOCKET)
			continue;
#endif
		if (fp->f_count && fp->f_inode==ip)
			return;
	}
	(*cfunc)(dev, flag);
}

/*
 * openi called to allow handler
 * of special files to initialize and
 * validate before actual IO.
 */
openi(ip, rw)
register struct inode *ip;
{
	register dev_t dev;
	register unsigned int maj;

	dev = ip->i_un.i_rdev;
	maj = major(dev);
	switch(ip->i_mode&IFMT) {

	case IFCHR:
		if(maj >= nchrdev)
			goto bad;
		(*cdevsw[maj].d_open)(dev, rw & FWRITE);
		break;

	case IFBLK:
		if( maj == 255 ){
			dev = (minor(dev)==0)?rootdev:swapdev;
			maj = major(dev);
		} else if(maj >= nblkdev)
			goto bad;
		(*bdevsw[maj].d_open)(dev, rw & FWRITE);
		break;

	case IFIFO:
		openp(ip, rw);
		break;
	}
	return;

bad:
	u.u_error = ENXIO;
}

/*
 * Check mode permission on inode pointer.
 * Mode is READ, WRITE or EXEC.
 * In the case of WRITE, the
 * read-only status of the file
 * system is checked.
 * Also in WRITE, prototype text
 * segments cannot be written.
 * The mode is shifted to select
 * the owner/group/other fields.
 * The super user is granted all
 * permissions.
 */
access(ip, mode)
register mode;
register struct inode *ip;
{
#ifdef EXMOUNT
	register struct buf *fp;
	int i;
#else
	register struct filsys *fp;
#endif

	if(mode == IWRITE) {
		if ((fp = getfs(ip->i_dev)) == NULL) {
			u.u_error = ENOENT;
			return(1);
		} else {
#ifdef EXMOUNT
			i = ((struct filsys *)mapin(fp))->s_ronly;
			mapout(fp);
			if (i != 0) {
				u.u_error = EROFS;
				return(1);
			}
#else
			if (fp->s_ronly != 0) {
				u.u_error = EROFS;
				return(1);
			}
#endif EXMOUNT
		}
		if (ip->i_flag&ITEXT)           /* try to free text */
			xrele(ip);
		if(ip->i_flag & ITEXT) {
			u.u_error = ETXTBSY;
			return(1);
		}
	}
	if(u.u_uid == 0)
		return(0);
#ifdef  UCB_GRPMAST
	if(u.u_uid != ip->i_uid && !(grpmast() && u.u_gid == ip->i_gid))
#else
	if(u.u_uid != ip->i_uid)
#endif
		{
		mode >>= 3;
		if(u.u_gid != ip->i_gid)
			mode >>= 3;
	}
	if((ip->i_mode&mode) != 0)
		return(0);
bad:
	u.u_error = EACCES;
	return(1);
}

/*
 * Look up a pathname and test if
 * the resultant inode is owned by the
 * current user.
 * If not, try for super-user.
 * If permission is granted,
 * return inode pointer.
 */
struct inode *
owner(follow)
int follow;
{
	register struct inode *ip;

	ip = namei(uchar, LOOKUP, follow);
	if(ip == (struct inode *) NULL)
		return((struct inode *) NULL);
#ifdef  UCB_GRPMAST
	if(own(ip))
		return(ip);
#else
	if(u.u_uid == ip->i_uid)
		return(ip);
	if(suser())
		return(ip);
#endif
	iput(ip);
	return((struct inode *) NULL);
}

own(ip)
register struct inode *ip;
{
	if(ip->i_uid == u.u_uid)
		return(1);
#ifdef  UCB_GRPMAST
	if(grpmast() && u.u_gid == ip->i_gid)
		return(1);
#endif
	if(suser())
		return(1);
	return(0);
}

/*
 * Test if the current user is the
 * super user.
 */
suser()
{

	if(u.u_uid == 0) {
#ifdef  ACCT
		u.u_acflag |= ASU;
#endif
		return(1);
	}
	u.u_error = EPERM;
	return(0);
}

/*
 * Allocate a user file descriptor.
 */
ufalloc(i)
register i;
{
	for(; i<NOFILE; i++)
		if(u.u_ofile[i] == NULL) {
			u.u_r.r_val1 = i;
			u.u_pofile[i] = 0;
			return(i);
		}
	u.u_error = EMFILE;
	return(-1);
}

/*
 * Allocate a user file descriptor
 * and a file structure.
 * Initialize the descriptor
 * to point at the file structure.
 */
struct file *
falloc()
{
	register struct file *fp;
	register i;
	static struct  file *lastf = file;

	i = ufalloc(0);
	if (i < 0)
		return((struct file *) NULL);
	for (fp = lastf; fp < fileNFILE; fp++)
		if (fp->f_count == 0)
			goto slot;
	for (fp = file; fp < lastf; fp++)
		if (fp->f_count == 0)
			goto slot;
	tablefull("file");
	u.u_error = ENFILE;
	return((struct file *) NULL);
slot:
	u.u_ofile[i] = fp;
	fp->f_count++;
	fp->f_un.f_offset = 0;
	lastf = fp + 1;
	return (fp);
}

/*
 *      F R O M   B S D 4.2
 */

/*
 * Unlock a file.
 */
ino_unlock(fp, kind)
register struct file *fp;
int kind;
{
	register struct inode *ip = fp->f_inode;
	register int flags;

	kind &= fp->f_flag;
	if( kind == 0 )
		return;
	flags = ip->i_flag;
	if( kind & FSHLOCK ){
		if( (flags & ISHLOCK) == 0 )
			panic("i_unlock: SH");
		if( --ip->i_lockc == 0 ){
			ip->i_flag &= ~ISHLOCK;
			if( flags & ILWAIT)
				wakeup((caddr_t)&ip->i_lockc);
		}
		fp->f_flag &= ~FSHLOCK;
	}
	if( kind & FEXLOCK ){
		if( (flags & IEXLOCK) == 0 )
			panic("i_unlock: EX");
		if( --ip->i_lockc == 0 ){
			ip->i_flag &= ~(IEXLOCK|ILWAIT);
			if( flags & ILWAIT)
				wakeup((caddr_t)&ip->i_lockc);
		}
		fp->f_flag &= ~FEXLOCK;
	}
}

/*
 * Place an advisory lock on an inode.
 */
ino_lock(fp, cmd)
register struct file *fp;
register int cmd;
{
	int priority = PLOCK;
	register struct inode *ip = fp->f_inode;

	if( cmd & LOCK_EX )
		priority++;
again:
	while( ip->i_flag & (IEXLOCK|ILWAIT) ){
		if( cmd & LOCK_NB )
			return(EWOULDBLOCK);
		if( fp->f_flag & FEXLOCK ){
			ino_unlock(fp, FEXLOCK);
			goto again;
		}
		ip->i_flag |= ILWAIT;
		sleep((caddr_t)&ip->i_lockc, priority);
	}
	if( cmd & LOCK_EX ){
		cmd &= ~LOCK_SH;
		while( ip->i_flag & ISHLOCK ){
			if( cmd & LOCK_NB )
				return(EWOULDBLOCK);
			if( fp->f_flag & FSHLOCK ){
				ino_unlock(fp, FSHLOCK);
				goto again;
			}
			ip->i_flag |= ILWAIT;
			sleep((caddr_t)&ip->i_lockc, PLOCK);
		}
	}
	if( fp->f_flag & (FSHLOCK|FEXLOCK) )
		panic("i_lock");
	if( cmd & LOCK_SH ){
		ip->i_lockc++;
		ip->i_flag |= ISHLOCK;
		fp->f_flag |= FSHLOCK;
	}
	if( cmd & LOCK_EX ){
		ip->i_lockc++;
		ip->i_flag |= IEXLOCK;
		fp->f_flag |= FEXLOCK;
	}
	return(0);
}

@


22.2
log
@Исправлен flock.
@
text
@d3 3
d46 1
a46 1
#include <sys/reg.h>
@


22.1
log
@"param.h" ==> <sys/param.h>
@
text
@d3 3
d97 2
a98 1
	if( fp->f_flag & (FSHLOCK|FEXLOCK) )
a99 1
	flag = fp->f_flag;
d383 6
a388 1
			panic("unlock: SHLOCK");
d390 2
a391 3
		if( --ip->i_lockc == 0 )
			ip->i_flag &= ~(ISHLOCK|ILWAIT);
	} else if( kind & FEXLOCK ){
d393 6
a398 1
			panic("unlock: EXLOCK");
a399 2
		if( --ip->i_lockc == 0 )
			ip->i_flag &= ~(IEXLOCK|ILWAIT);
a400 2
	if( flags & ILWAIT)
		wakeup((caddr_t)&ip->i_lockc);
d413 1
a413 1
	if( cmd == LOCK_EX )
a414 3
	else if( cmd == LOCK_NB ){
		return((ip->i_flag&(IEXLOCK|ISHLOCK))?EWOULDBLOCK:0);
	}
d416 3
a418 1
	while( ip->i_flag & IEXLOCK ){
d421 1
a421 3
		} else {
			ip->i_flag |= ILWAIT;
			sleep((caddr_t)&ip->i_lockc, priority);
d423 2
d426 5
a430 2
	if( cmd == LOCK_EX ){
		if( ip->i_flag & ISHLOCK ){
d433 1
a433 3
			} else {
				ip->i_flag |= ILWAIT;
				sleep((caddr_t)&ip->i_lockc, PLOCK);
d435 2
a436 1
			goto again;
d438 4
d443 5
a449 4
	} else if( cmd == LOCK_SH ){
		ip->i_lockc++;
		ip->i_flag |= ISHLOCK;
		fp->f_flag |= FSHLOCK;
@


22.0
log
@Begining DEMOS 2.2.
@
text
@d3 3
d32 1
a32 1
#include "param.h"
@


1.7
log
@Слияние с исправлениями насчет FIFO, +fcntl, + разные режимы открытия

(from VAX/UTS SV.2)
@
text
@d3 5
@


1.6
log
@*** empty log message ***
@
text
@d3 3
d76 1
a76 1
	int flag, mode;
a78 3
#ifdef  MPX_FILS
	struct chan *cp;
#endif
a85 1
#ifdef IPK_FLOCK
a87 1
#endif IPK_FLOCK
d102 1
a102 6
#ifdef  MPX_FILS
	cp = fp->f_un.f_chan;
#endif
	dev = ip->i_un.i_rdev;
	mode = ip->i_mode;

d104 1
a104 10
	fp->f_count = 0;
	if(flag & FPIPE) {
		ip->i_mode &= ~(IREAD|IWRITE);
		wakeup((caddr_t)ip+1);
		wakeup((caddr_t)ip+2);
	}
	iput(ip);

	switch(mode&IFMT) {

d106 1
a106 3
#ifdef  MPX_FILS
	case IFMPC:
#endif
a108 1

d110 1
a110 3
#ifdef  MPX_FILS
	case IFMPB:
#endif
d115 2
d118 1
d121 1
a121 8

#ifdef  MPX_FILS
	if ((flag & FMP) == 0)
		for(fp = file; fp < fileNFILE; fp++)
			if (fp->f_count && fp->f_inode==ip)
				return;
	(*cfunc)(dev, flag, cp);
#else
a130 1
#endif
a148 3
#ifdef  MPX_FILS
	case IFMPC:
#endif
d151 1
a151 1
		(*cdevsw[maj].d_open)(dev, rw);
a154 3
#ifdef  MPX_FILS
	case IFMPB:
#endif
d160 6
a165 1
		(*bdevsw[maj].d_open)(dev, rw);
a250 3
#ifndef UCB_SYMLINKS
owner()
#else
a252 1
#endif
a255 3
#ifndef UCB_SYMLINKS
	ip = namei(uchar, LOOKUP);
#else
a256 1
#endif
d306 2
a307 1
ufalloc()
d309 1
a309 3
	register i;

	for(i=0; i<NOFILE; i++)
a318 1
struct  file *lastf;
d330 1
d332 1
a332 1
	i = ufalloc();
d334 1
a334 3
		return(NULL);
	if (lastf == (struct file *) NULL)
		lastf = file;
d352 3
a354 1
#ifdef IPK_FLOCK
d371 2
a372 2
		/* if( (flags & ISHLOCK) == 0 )
			panic("unlock: SHLOCK"); */
d377 2
a378 2
		/* if( (flags & IEXLOCK) == 0 )
			panic("unlock: EXLOCK"); */
a431 1
#endif IPK_FLOCK
@


1.5
log
@Добавлены новые устройства: root(255,0) и swap(255,1).
При работе с ними используются текущие rootdev и swapdev.
@
text
@d3 4
d187 1
a187 1
		if( maj == 255 )
d189 2
a190 1
		else if(maj >= nblkdev)
@


1.4
log
@Исправлено поле в <sys/inode.h>
@
text
@d3 3
d128 2
d183 3
a185 1
		if(maj >= nblkdev)
@


1.3
log
@Вставлен системный вызов flock.
@
text
@d2 4
a5 1
 * $Log:        fio.c,v $
d100 1
a100 1
	dev = (dev_t)ip->i_un.i_rdev;
d161 1
a161 1
	dev = (dev_t)ip->i_un.i_rdev;
@


1.2
log
@Сделаны правки под EXMOUNT.
@
text
@d3 3
d76 4
d374 80
@


1.1
log
@Initial revision
@
text
@d2 4
a5 1
 * $Log$
d195 4
d200 1
d206 9
a214 2
		}
		else
d219 2
@
