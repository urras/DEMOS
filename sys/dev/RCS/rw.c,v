head     22.4;
access   korotaev dvolodin avg;
symbols  Архыз0:1.2.1;
locks    ;
comment  @ * @;


22.4
date     90.11.12.19.13.35;  author root;  state Exp;
branches ;
next     22.3;

22.3
date     89.05.05.20.10.15;  author avg;  state Exp;
branches ;
next     22.2;

22.2
date     89.04.27.13.52.47;  author korotaev;  state Exp;
branches ;
next     22.1;

22.1
date     89.04.12.14.34.12;  author korotaev;  state Exp;
branches ;
next     22.0;

22.0
date     89.03.25.12.32.41;  author korotaev;  state Exp;
branches ;
next     1.2;

1.2
date     88.01.21.11.49.31;  author korotaev;  state Exp;
branches ;
next     1.1;

1.1
date     86.12.30.14.47.04;  author alex;  state Exp;
branches ;
next     ;


desc
@
Драйвер винчестерских дисков для Электроники-85
@


22.4
log
@Новые вещи для СМ1425 и перемещение include.
@
text
@/*
 * Драйвер Винчестера Электроники-85
 *
 * $Log:        rw.c,v $
 * Revision 22.3  89/05/05  20:10:15  avg
 * Оказавается (это выяснилось только сейчас!), что не нужно
 * ждать готовности контроллера для выборки каждого последующего слова.
 * Небольшой хак позволил ускорить обмены с диском в 2 раза!
 *
 * Revision 22.2  89/04/27  13:52:47  korotaev
 * Изменения связанные с небольшим перемещением каталогов и файлов
 *
 * Revision 22.1  89/04/12  14:34:12  korotaev
 * "param.h" ==> <sys/param.h>
 *
 * Revision 22.0  89/03/25  12:32:41  korotaev
 * Отсюда начинается версия 2.2
 *
 * Revision 1.2  88/01/21  11:49:31  korotaev
 * Изменения с Э-85.
 *
 */

#include "h/rw.h"
#if     NRW > 0
#include <sys/param.h>
#include <sys/systm.h>
#include "../include/buf.h"
#include <sys/conf.h>
#include <sys/dir.h>
#include <sys/user.h>
#include <sys/seg.h>
#include "../include/iopage.h"

#define RWWCHK                  /* Enable Write Check */

#define SET_IE  030
#define RES_IE  070
#define CLR_IN  0170

#define RB(x)   *((char *)(x))

#define RWSLOT(adr)  (((int)(adr) >> 7) & 07)

struct rwdevice {
	short   rw_rid;         /* регистр идентификации          */
	short   rw_m1;          /* unused                         */
	short   rw_err;         /* регистр ошибок/предкомпенсации */
	short   rw_sec;         /* номер сектора                  */
	short   rw_data;        /* регистр данных                 */
	short   rw_cyl;         /* номер цилиндра                 */
	short   rw_trk;         /* номер поверхности              */
	short   rw_rks2;        /* РКС 2                          */
	short   rw_stat;        /* регистр состояния/установки    */
};

#if RWTRK == 4
int rwcyloffs[] = {
	0,      /* 0 - */
	281,
	306,
	1024,
	1024,
	1024,
	1024,
	1024,
	32767
};
#else
 **** WARNING: OTHER NUMBS OF TRACKS ARE INVALID  ****
#endif

int rwWPC = -1;

#define NRWBLK  (RWCYL*RWSEC*RWTRK)

struct  rwdevice *RWADDR[NRW];

struct  buf     rwtab;
struct  buf     rrwbuf;
static short    rwwchk = 0, rwwcerr;

rwattach(addr, unit)
struct rwdevice *addr;
{
	if (unit > NRW)
		return(0);
	RWADDR[unit] = addr;
	return(1);
}

rwstrategy(bp)
register struct buf *bp;
{
	register s, unit, drive;
	register struct buf *dp;

	drive = minor(bp->b_dev) >> 3;
	unit = minor(bp->b_dev) & 07;
	if (drive >= NRW || RWADDR[drive] == (struct rwdevice *) NULL) {
		bp->b_error = ENXIO;
		goto errexit;
	}

	if( bp->b_blkno < 0 ||
	    bp->b_blkno >= (long)(RWSEC*RWTRK)*
			   (rwcyloffs[unit+1]-rwcyloffs[unit]) )  {
		printf( "rw%d%c: bad block %D\n", drive, 'A'+unit, bp->b_blkno );
		bp->b_error = EINVAL;
errexit:
		bp->b_flags |= B_ERROR;
		iodone(bp);
		return;
	}

	bp->av_forw = (struct buf *)NULL;
	bp->b_cylin = bp->b_blkno/(RWSEC*RWTRK) + rwcyloffs[unit];
	s = spl5();
	dp = &rwtab;
	disksort(dp, bp);
	if(dp->b_active == NULL)
		rwstart(0);
	splx(s);
}

/*
 * Программные регистры для псевдо-DMA
 */
static unsigned rw_addr, rwbytec, rwxmem, rwisread, rwactive = 0, rwdev;

/*
 * Запустить операцию на накопителе
 *
 *      0 - с блоком из bp->b_blkno (начало обмена)
 *      1 - с тем же номером блока  (повтор обмена)
 *      2 - со след. номером блока  (прод. обмена)
 */
rwstart(arg)
{
	register struct rwdevice *rwaddr;
	register struct buf *bp;
	static daddr_t bn;
	int tn, cn, sn, cyloff, slot, dev;

	if ((bp = rwtab.b_actf) == NULL)
		return;
	rwtab.b_active++;
	rwaddr = RWADDR[dev = (minor(bp->b_dev) >> 3)];
	slot   = RWSLOT(rwaddr);

	/* CLEAR CONTROLLER */
	tn = rwaddr->rw_sec;

	if( arg == 0 ) {
		bn = bp->b_blkno;
		rwbytec  = bp->b_bcount;
		rw_addr  = bp->b_un.b_addr;
		rwxmem   = bp->b_xmem;
		rwisread = ((bp->b_flags & B_READ) != 0);
		rwdev    = dev;
	} else if( arg == 2 )
		bn++;

	cn = rwcyloffs[minor(bp->b_dev) & 07];
	cn +=            (bn/(RWTRK*RWSEC));
	sn = bn         % RWSEC;
	tn = (bn/RWSEC) % RWTRK;
	rwaddr->rw_sec = sn;
	rwaddr->rw_cyl = cn;
	rwaddr->rw_trk = tn;

	rwactive = 1;
	if( rwisread || rwwchk ) {
		RB(I85_CR2) = SET_IE | slot;
		RB(I85_CR2) = CLR_IN | slot;
		RB(I85_CR3) = SET_IE | slot;
		RB(I85_CR3) = CLR_IN | slot;
		rwaddr->rw_rks2 = 040;
	} else {
		if( rwWPC != -1 )
			rwaddr->rw_err = rwWPC >> 2;
		RB(I85_CR3) = RES_IE | slot;
		rwaddr->rw_rks2 = 060;
	}

#ifdef  RW_DKN
	dk_busy |= 1 << RW_DKN;
	dk_numb[RW_DKN]++;
	dk_wds[RW_DKN] += bp->b_bcount >> 6;
#endif  RW_DKN

	if( !(rwisread || rwwchk) ) {
		RB(I85_CR2) = CLR_IN | slot;
		rwpdma();
	}
}

#define PROTO5  ((15<<8) | RW)

/*
 * Запрос обмена "Б"
 *   'требование данных'
 */
rwpdma()
{
	struct rwdevice *rwaddr;
	register *a, i, *rwData;
	segm    save5;
	int     cnt, slot;
	short   count4, count1, skips;
	int     *savea;

	if( rwactive == 0 )
		return;
	rwaddr = RWADDR[rwdev];
	slot   = RWSLOT(rwaddr);

	if( rwisread || rwwchk )
		RB(I85_CR3) = RES_IE | slot;
	saveseg5(save5);
	a = (rw_addr & 077) | SEG5;
	mapseg5( (rwxmem<<10) | ((rw_addr>>6) & 01777), PROTO5 );
	i = rwbytec/2;
	if( i > 256 )
		i = 256;

	count4 = i/4;           /* Копирование группами по 4 слова */
	count1 = i & 03;        /* Копирование по одному слову */
	skips  = 256-i;         /* Лишние слова */

	cnt = -1;
	while( (rwaddr->rw_stat & 0200) == 0 && --cnt );
	rwData = &(rwaddr->rw_data);

	i = count4;

	if( rwisread ) {
		do {
			*a++ = *rwData;
			*a++ = *rwData;
			*a++ = *rwData;
			*a++ = *rwData;
		} while( --i != 0 );
		switch( count1 ) {
		    case 3:
			*a++ = *rwData;
		    case 2:
			*a++ = *rwData;
		    case 1:
			*a++ = *rwData;
		    case 0: ;
		}
		if( skips ) {
			a = &cnt;
			i = skips;
			do {
				*a = *rwData;
			} while( --i != 0 );
		}
#ifdef RWWCHK
	} else if( rwwchk ) {
		savea = a;
		do {
			if( *rwData != *a++ ||
			    *rwData != *a++ ||
			    *rwData != *a++ ||
			    *rwData != *a++ )
				goto Err;
		} while( --i != 0 );
		switch( count1 ) {
		    case 3:
			if( *rwData != *a++ )
				goto Err;
		    case 2:
			if( *rwData != *a++ )
				goto Err;
		    case 1:
			if( *rwData != *a++ )
				goto Err;
		    case 0: ;
		}
		rwwcerr = 0;
		goto Ok;
	Err:
		rwwcerr = 1;
		skips = savea - a;
	Ok:
		if( skips ) {
			a = &cnt;
			i = skips;
			do {
				*a = *rwData;
			} while( --i != 0 );
		}
#endif RWWCHK
	} else {
		do {
			*rwData = *a++;
			*rwData = *a++;
			*rwData = *a++;
			*rwData = *a++;
		} while( --i != 0 );
		switch( count1 ) {
		    case 3:
			*rwData = *a++;
		    case 2:
			*rwData = *a++;
		    case 1:
			*rwData = *a++;
		    case 0: ;
		}
		if( skips ) {
			i = skips;
			do {
				*rwData = 0;
			} while( --i != 0 );
		}
		RB(I85_CR2) = SET_IE | slot;
	}

	restorseg5(save5);
	rwactive = 0;
}

/*
 * Запрос обмена "A"
 *   'операция завершена'
 */
rwintr()
{
	register struct rwdevice *rwaddr;
	register struct buf *bp;
	int     cnt, slot;
	static rwERR, rwRKS2;
	static char *rwSTRING;

	if (rwtab.b_active == NULL)
		return;
	rwaddr = RWADDR[rwdev];
	slot = RWSLOT(rwaddr);
	RB(I85_CR2) = RES_IE | slot;
	RB(I85_CR3) = RES_IE | slot;
	rwactive = 0;
#ifdef  RW_DKN
	dk_busy &= ~(1 << RW_DKN);
#endif  RW_DKN
	bp = rwtab.b_actf;
	rwtab.b_active = NULL;

	if ( (rwaddr->rw_rks2 & 020400) || rwwcerr ) {
		if( rwtab.b_errcnt == 0 ) {
			rwERR    = rwaddr->rw_err;
			rwRKS2   = rwaddr->rw_rks2;
			rwSTRING = rwwchk? (rwwcerr? " wchk-data\n" : " wchk-csum\n") : "\n";
		}
		rwwchk = rwwcerr = 0;
		rwaddr->rw_stat = 010;  /* RESET THE CONTROLLER */
		cnt = 0;
		while ((rwaddr->rw_stat & 0100000) && --cnt) {
			cnt++; cnt--; cnt++; cnt--;
		}
		cnt = rwaddr->rw_rid;
		if (++rwtab.b_errcnt <= 30) {
			rwstart(1);
			return;
		}
#ifdef UCB_DEVERR
		harderr(bp, "rw");
		printf( "er=%o ds2=%o %s", rwERR, rwRKS2, rwSTRING );
#else
		deverror(bp, rwERR, rwRKS2);
		printf( rwSTRING );
#endif
		bp->b_flags |= B_ERROR;
	}
	if( rwbytec > 512 ) {
		rwbytec -= 512;
		if( (rw_addr+512) < rw_addr )
			rwxmem++;
		rw_addr += 512;
		rwstart(2);
		return;
	}
#ifdef RWWCHK
	if( !(bp->b_flags & (B_READ|B_ERROR)) && !rwwchk ) {
		rwwchk++;
		rwstart(0);
		return;
	}
	rwwchk = 0;
#endif RWWCHK
#ifdef UCB_DEVERR
	if( rwtab.b_errcnt > 7 && !(bp->b_flags&B_ERROR) ) {
		harderr(bp, "rw"); printf(" (soft, er=%o)\n", rwERR);
	}
#endif
	rwtab.b_errcnt = 0;
	rwtab.b_actf = bp->av_forw;
	bp->b_resid = 0;
	iodone(bp);
	rwstart(0);
}

rwread(dev)
dev_t   dev;
{
	physio(rwstrategy, &rrwbuf, dev, B_READ);
}

rwwrite(dev)
dev_t   dev;
{
	physio(rwstrategy, &rrwbuf, dev, B_WRITE);
}
#endif  NRW
@


22.3
log
@Оказавается (это выяснилось только сейчас!), что не нужно
ждать готовности контроллера для выборки каждого последующего слова.
Небольшой хак позволил ускорить обмены с диском в 2 раза!
@
text
@d5 5
d28 1
a28 1
#include <sys/buf.h>
d33 1
a33 1
#include <sys/iopage.h>
d35 2
a56 13
#if RWTRK == 2
int rwcyloffs[] = {
	0,      /* 0 - */
	175,    /* 8400*2 root */
	200,    /* 900*2  swap */
	225,    /* 900*2  tmp  */
	440,    /* 10320*2 user */
	0,
	0,
	0,
	32767
};
#else
a71 1
#endif
d73 2
d180 2
d334 2
d351 4
a354 10
		if( rwtab.b_errcnt > 1 ) {
#ifdef UCB_DEVERR
			harderr(bp, "rw");
			printf( "er=%o ds2=%o", rwaddr->rw_err, rwaddr->rw_rks2 );
			if( rwwchk ) printf( " WCHK (%s)\n", rwwcerr?"data":"csum" );
			else         printf( "\n" );
#else
			deverror(bp, rwaddr->rw_err, rwaddr->rw_rks2);
			if( rwwchk ) printf( "RWWCHK (%s)\n", rwwcerr?"data":"csum" );
#endif
d363 1
a363 1
		if (++rwtab.b_errcnt <= 10) {
d367 7
d392 5
@


22.2
log
@Изменения связанные с небольшим перемещением каталогов и файлов
@
text
@d4 4
a7 1
 * $Log:	rw.c,v $
d10 1
a10 1
 * 
d13 1
a13 1
 * 
d16 1
a16 1
 * 
d209 2
a210 2
	register struct rwdevice *rwaddr;
	register *a, i;
d212 3
a214 1
	int     cnt, j, slot;
d229 11
a239 1
	j = i;
d242 4
a245 3
			cnt = -1;
			while( (rwaddr->rw_stat & 0200) == 0 && --cnt );
			*a++ = rwaddr->rw_data;
d247 12
a258 1
		if( (i = 256-j) > 0 ) {
d260 1
a260 3
				cnt = -1;
				while( (rwaddr->rw_stat & 0200) == 0 && --cnt );
				cnt = rwaddr->rw_data;
d265 1
a265 1
		rwwcerr = 0;
d267 5
a271 4
			cnt = -1;
			while( (rwaddr->rw_stat & 0200) == 0 && --cnt );
			if( rwaddr->rw_data != *a++ )
				rwwcerr = 1;
d273 21
a293 1
		if( (i = 256-j) > 0 ) {
d295 1
a295 3
				cnt = -1;
				while( (rwaddr->rw_stat & 0200) == 0 && --cnt );
				cnt = rwaddr->rw_data;
d301 4
a304 3
			cnt = -1;
			while( (rwaddr->rw_stat & 0200) == 0 && --cnt );
			rwaddr->rw_data = *a++;
d306 11
a316 1
		if( (i = 256-j) > 0 ) {
d318 1
a318 3
				cnt = -1;
				while( (rwaddr->rw_stat & 0200) == 0 && --cnt );
				rwaddr->rw_data = 0;
@


22.1
log
@"param.h" ==> <sys/param.h>
@
text
@d5 3
d16 1
a16 1
#include "rw.h"
@


22.0
log
@Отсюда начинается версия 2.2
@
text
@d5 3
d15 1
a15 1
#include "param.h"
@


1.2
log
@Изменения с Э-85.
@
text
@d4 4
a7 1
 * $Log$
@


1.1
log
@Initial revision
@
text
@d2 3
a4 1
 * дПЮИБЕП бХМВЕЯРЕПЮ щКЕЙРПНМХЙХ-85
d18 3
a20 3
#ifndef RWSLOT
#define RWSLOT 0
#endif
a21 4
#define SET_IE  (RWSLOT | 030)
#define RES_IE  (RWSLOT | 070)
#define CLR_IN  (RWSLOT | 0170)

d24 2
d27 1
a27 1
	short   rw_rid;         /* ПЕЦХЯРП ХДЕМРХТХЙЮЖХХ          */
d29 7
a35 7
	short   rw_err;         /* ПЕЦХЯРП НЬХАНЙ/ОПЕДЙНЛОЕМЯЮЖХХ */
	short   rw_sec;         /* МНЛЕП ЯЕЙРНПЮ                  */
	short   rw_data;        /* ПЕЦХЯРП ДЮММШУ                 */
	short   rw_cyl;         /* МНЛЕП ЖХКХМДПЮ                 */
	short   rw_trk;         /* МНЛЕП ОНБЕПУМНЯРХ              */
	short   rw_rks2;        /* пйя 2                          */
	short   rw_stat;        /* ПЕЦХЯРП ЯНЯРНЪМХЪ/СЯРЮМНБЙХ    */
d38 1
a38 4
#ifndef RWCYLOFF
# define RWCYLOFF 0
#endif

d40 5
a45 2
	2,
	289,
d47 2
d50 17
d70 1
a70 1
struct  rwdevice *RWADDR;
a72 3
#ifdef  UCB_DBUFS
struct  buf     rrwbuf[NRW];
#else
d74 1
a74 1
#endif
d79 1
a79 1
	if (unit != 0)
d81 1
a81 1
	RWADDR = addr;
d88 2
a89 1
	register s;
d91 3
a93 1
	if (RWADDR == (struct rwdevice *) NULL) {
d97 5
a101 1
	if (bp->b_blkno >= NRWBLK || minor(bp->b_dev) > 3 ) {
d108 1
d110 1
d112 3
a114 6
	if(rwtab.b_actf == NULL)
		rwtab.b_actf = bp;
	else
		rwtab.b_actl->av_forw = bp;
	rwtab.b_actl = bp;
	if(rwtab.b_active == NULL)
d120 1
a120 1
 * оПНЦПЮЛЛМШЕ ПЕЦХЯРПШ ДКЪ ОЯЕБДН-DMA
d122 1
a122 1
static unsigned rw_addr, rwbytec, rwxmem, rwisread, rwactive = 0;
d125 1
a125 1
 * гЮОСЯРХРЭ НОЕПЮЖХЧ МЮ МЮЙНОХРЕКЕ
d127 3
a129 3
 *      0 - Я АКНЙНЛ ХГ bp->b_blkno (МЮВЮКН НАЛЕМЮ)
 *      1 - Я РЕЛ ФЕ МНЛЕПНЛ АКНЙЮ  (ОНБРНП НАЛЕМЮ)
 *      2 - ЯН ЯКЕД. МНЛЕПНЛ АКНЙЮ  (ОПНД. НАЛЕМЮ)
d133 1
a133 1
	register struct rwdevice *rwaddr = RWADDR;
d136 1
a136 1
	int tn, cn, sn, cyloff;
d141 2
d153 1
d157 1
a157 1
	cn = rwcyloffs[minor(bp->b_dev) & 03];
d166 6
a171 5
	if( rwisread ) {
		RB(I85_CR2) = SET_IE;
		RB(I85_CR2) = CLR_IN;
		RB(I85_CR3) = SET_IE;
		RB(I85_CR3) = CLR_IN;
d173 2
a174 1
		RB(I85_CR3) = RES_IE;
a175 1
	rwaddr->rw_rks2 = rwisread? 040 : 060;
d183 2
a184 2
	if( !rwisread ) {
		RB(I85_CR2) = CLR_IN;
d192 2
a193 2
 * гЮОПНЯ НАЛЕМЮ "а"
 *   'РПЕАНБЮМХЕ ДЮММШУ'
d197 1
a197 1
	register struct rwdevice *rwaddr = RWADDR;
d200 1
a200 1
	int     cnt, j;
d204 2
d207 2
a208 2
	if( rwisread )
		RB(I85_CR3) = RES_IE;
d229 17
d259 1
a259 1
		RB(I85_CR2) = SET_IE;
d267 2
a268 2
 * гЮОПНЯ НАЛЕМЮ "A"
 *   'НОЕПЮЖХЪ ГЮБЕПЬЕМЮ'
d272 1
a272 1
	register struct rwdevice *rwaddr = RWADDR;
d274 1
a274 1
	int     cnt;
d278 4
a281 2
	RB(I85_CR2) = RES_IE;
	RB(I85_CR3) = RES_IE;
d289 2
a290 2
	if (rwaddr->rw_rks2 & 020400) {

d292 4
a295 2
		harderr(bp, "rw");
		printf( "er=%o ds2=%o\n", rwaddr->rw_err, rwaddr->rw_rks2 );
d297 2
a298 1
		deverror(bp, rwaddr->rw_err, rwaddr->rw_rks2);
d300 2
a313 1
	rwtab.b_errcnt = 0;
d322 9
@
