head     1.6;
access   dvolodin;
symbols  Архыз0:1.5.1;
locks    ;
comment  @ * @;


1.6
date     90.12.12.17.15.58;  author korotaev;  state Exp;
branches ;
next     1.5;

1.5
date     88.06.23.21.39.41;  author ache;  state Exp;
branches ;
next     1.4;

1.4
date     87.10.01.13.55.05;  author avg;  state Exp;
branches ;
next     1.3;

1.3
date     87.03.04.14.27.38;  author avg;  state Exp;
branches ;
next     1.2;

1.2
date     86.12.03.22.04.48;  author alex;  state Stab;
branches ;
next     1.1;

1.1
date     86.11.27.23.01.36;  author alex;  state Exp;
branches ;
next     ;


desc
@
Параметры настройки на конфигурацию
@


1.6
log
@Правки под ДВК.
@
text
@/*
 * ОБРАБОТКА ПАРАМЕТРОВ ВЫЗОВА ТИПА:
 *  BOOT: rk(0,0)demos r=rk2 s=rk4 su
 */

#include <sys/types.h>
#include <sys/reboot.h>

#define P(s) /* printf(s) */

/*
 * Таблица параметров и типов
 */
#define PDEV  1
#define PUNS  2
#define PLONG 3
#define PFLAG 4
#define PBOOT 5

#define BOOT(set, unset) (long)((set) + (unset)*0400l)

extern int bootopts;
int        waspar;      /* Не 0, если были параметры */

#define ROOTK   keytab[0]
#define SWAPK   keytab[1]
#define SWAPLOK keytab[2]
#define SWAPLEK keytab[3]
#define SUK     keytab[4]
#define PIPEK   keytab[5]

struct keyts {
	char   *keyw;   /* имя параметра */
	char    typew;  /* тип параметра */
	char    flagw;  /* флажок установлен */
	long    valuew; /* значение */
} keytab[] = {
	{"r",      PDEV,   0, 0l},
	{"s",      PDEV,   0, 0l},
	{"slo",    PLONG,  0, 0l},
	{"slen",   PUNS,   0, 0l},
	{" su",    PFLAG,  0, 0l},
	{"p",      PDEV,   0, 0l},
	{"fast",   PBOOT,  0, BOOT(RB_NOFSCK, RB_SINGLE)   },
	{"auto",   PBOOT,  0, BOOT(0, RB_SINGLE|RB_ASKNAME)},
	{"nosu",   PBOOT,  0, BOOT(0, RB_SINGLE)           },
	{"su",     PBOOT,  0, BOOT(RB_SINGLE|RB_ASKNAME, 0)},
	{"fault",  PBOOT,  0, BOOT(RB_POWRFAIL, 0)         },
	{(char*)0, 0,      0, 0l}
};

/*
 * Общие описания
 */
extern long  atodl();
extern dev_t getdev();

#define MAXU  0177777l
#define NODEV (dev_t)(-1)

/* Разбор строки параметров */
getpar(line)
register char *line;
{
	register char *key, *val;
	char  razd;
	long  vl;
	int   rkod = 1;

/*      initpar();      */

	/*
	 * Выделяем имя файла
	 */
	while(*line != ' ' && *line)
		line++;
	if(*line == 0)
		return(1);     /* Нет параметров */
	*line++ = 0;

	while(*line == ' ')
		line++;

	/*
	 * Цикл по параметрам
	 */
	while(*line) {
		key = line;
		while(*line && *line != ' ' && *line != '=')
			line++;
		razd = *line;
		if(*line)
			*line++ = 0;
		if(razd != '=')
			val = 0;
		else {
			val = line;
			while(*line != ' ' && *line)
				line++;
			if(*line)
				*line++ = 0;
		}
		if(!setpar(key, val))
			rkod = 0;
		while(*line == ' ')
			line++;
	}
	return(rkod);
}

/*
 * Макро для работы с таблицей параметров
 */

#define REGPT   register struct keyts *
#define FORT(k) for(k = keytab; k->keyw ; k++)

/*
 * Инициализация таблицы
 */
initpar()
{
	REGPT k;

	FORT(k) {
		k->flagw = 0;
		if(k->typew != PBOOT)
			k->valuew = 0;
	}
	waspar = 0;
}

/*
 * Засылка одного параметра в таблицу
 */
setpar(key, val)
register char *key, *val;
{
	REGPT k;

	char *val0 = val;
	long  vl;

	FORT(k) {
		if(!strcmp(k->keyw, key))
			goto found;
	}
	printf("%s: illegal key\n", key);
	return(0);
found:
	switch(k->typew) {
	    case PDEV:
		if(!val)
			goto noverr;
		if((k->valuew = getdev(val)) == NODEV)
			goto errv;
		break;

	    case PFLAG:
		if(val)
			goto errv;
		k->valuew = 1;
		break;

	    case PUNS:
		if(!val)
			goto noverr;
		if((vl = atodl(val)) < 0 || vl > MAXU)
			goto errv;
		k->valuew = (unsigned)vl;
		break;

	    case PLONG:
		if(!val)
			goto noverr;
		if((vl = atodl(val)) < 0)
			goto errv;
		k->valuew = vl;
		break;

	    case PBOOT:
		if(val)
			goto errv;
		bootopts |=  (int)(k->valuew%0400l);
		bootopts &= ~(int)(k->valuew/0400l);
		break;

	    default:
		printf("Error in parameter\n");
		return(0);
	}
	k->flagw = 1;
	waspar++ ;
	return(1);
noverr:
	printf("No value!\n");
	return(0);
errv:
	printf("Illegal  %s\n",  val);
	return(0);
}

long atodl(s)
register char *s;
{
	int      ib = 10; /* Основание счисления */
	register i;
	long     vl = 0;

	if(*s == '0') {
		ib = 8;
		if(*++s == 'x' || *s == 'X') {
			ib = 16;
			s++;
		}
	}
	while(*s) {
		if(*s>='0' && *s <='9') i = *s - '0';
		else if(ib == 16 && *s>='a' && *s<='f') i = *s -'a' + 10;
		else if(ib == 16 && *s>='A' && *s<='F') i = *s -'A' + 10;
		else return(-1l);
		vl = vl*ib + i;
		s++;
	}
	return(vl);
}

int atodn(s)
register char *s;
{
	register i;
	int      vl = 0;

	while(*s && *s >= '0' && *s <='9') {
		i  = *s - '0';
		vl = vl*10 + i;
		s++;
	}
	if ( *s >= 'a' && *s <= 'h' )
		vl = vl*8 + *s++ - 'a';
	else if( *s == '.' && *(s+1) == 'd' ){
		vl += 128;
		s += 2;
	}
	return(*s==0 ? vl : -1);
}

/*
 * Эта таблица согласовывается с mkconfig.c
 */
struct tdevs {
	char *devt;     /* имя типа */
	int   ndevt;    /* мажор типа */
} tdev[] = {
	{"rk",      0},
	{"rp",      1},
	{"my",      2},
	{"tm",      3},
	{"hk",      4},
	{"hs",      5},
	{"xp",      6},
	{"hp",      6},
	{"rm",      6},
	{"ht",      7},
	{"rl",      8},
	{"ts",      9},
#ifdef DVK4
	{"dw",     10},
#else
	{"rw",     10},
#endif
	{"rx",     11},
	{"fd",     12},
	{"vd",     13},
	{"ra",     14},
	{(char*)0,  0}
};

/*
 * Засылка кода устройства
 */
dev_t getdev(s)
register char *s;
{
	register struct tdevs *k;
	char  *dev = s;
	int    mi, mg;

	/* Выделение имени и номера */
	mi = 0;
	while((*s>='a' && *s<='z') ||
	      (*s>='A' && *s<='Z'))
		s++;
	if(*s>='0' && *s<='9') {
		mi = atodn(s);
		if(mi < 0)
			return(NODEV);
		*s = 0;
	} else if(*s)
			return(NODEV);
	for(k = tdev; k->devt ; k++) {
		if(!strcmp(dev, k->devt))
			break;
	}
	if( !k->devt )
		return(NODEV);
	mg = k->ndevt;
	return  makedev(mg, mi);
}

/*
 * НАСТРОЙКА ЗАГРУЖЕННОЙ КОМПОНЕНТЫ (ядра ОС)
 * Заголовок должен быть считан и находиться в "exec"
 * Заголовок оверлея должен находиться в ovlhdr
 * Признак overlayd используется для определения "overlay"
 * В таблицу переменных записываем не истинный адрес, а адрес
 * переменной в сегмента данных.
 */
#include <a.out.h>
#define SPACE 100               /* number of symbols read at a time */

extern bool_t          overlaid;
extern bool_t          xoverlaid;
extern struct  exec    exec;
extern struct  xovlhdr ovlhdr;

/* Число регистров, которые занимает сегмент */
#define ator(a) (((unsigned)a+017777)/020000)

nlisti(f, list)
int f;
struct nlist *list;
{
	register struct nlist *p, *q;
	int n, m, i, nnames = 0;
	long sa;
	extern struct exec exec;
	unsigned data_base;
	int ovl_par, txt_par, tpar;
	static struct nlist space[SPACE];

	for(p = list; p->n_name[0]; p++) {
		p->n_type = 0;
		p->n_value = 0;
	}
	if(f < 0)
		return(-1);
	sa = (long)exec.a_text + (long)exec.a_data;
	txt_par = ator(exec.a_text);
	tpar = ovl_par = 0;
	if ( overlaid )
		for(n=0; n<(xoverlaid?NXOVL:NOVL); n++)
			{
			sa += (long)ovlhdr.xov_siz[n];
			if ((tpar=ator(ovlhdr.xov_siz[n])) > ovl_par)
				ovl_par = tpar;
			}
	if ( exec.a_magic == A_MAGIC1 ||
	     exec.a_magic == A_MAGIC3 ||
	     exec.a_magic == A_MAGIC6 ) data_base = 0;
	else data_base = (txt_par+ovl_par) * (unsigned)020000;
#ifdef TEST
	printf("data_base= %o \n",data_base);
#endif
	if(exec.a_flag != 1) sa *= 2;
	sa += N_TXTOFF(exec);
	lseek(f, sa, 0);
	n = exec.a_syms;
	while(n){
		m = sizeof space;
		if(n < sizeof space)
			m = n;
		read(f, (char *)space, m);
		n -= m;
		for(q = space; (m -= sizeof(struct nlist)) >= 0; q++) {
			for(p = list; p->n_name[0]; p++) {
				for(i=0;i<8;i++)
					if(p->n_name[i] != q->n_name[i]) goto cont;
				p->n_value = q->n_value;
				p->n_type = q->n_type;
				if(p->n_type == (N_EXT|N_DATA) ||
				p->n_type == (N_EXT|N_BSS))
					{
					p->n_value -= data_base;
					nnames++;
					}
				break;
		cont:           ;
			}
		}
	}
	return(nnames);
}

/*
 * Таблица имен для настройки ядра
 */
#define SROOTD  tabsym[0]
#define SSWAPD  tabsym[1]
#define SPIPED  tabsym[2]
#define SSWAPLO tabsym[3]
#define SSWAPLE tabsym[4]
#define SSU     tabsym[5]
#define SMAX           6

struct nlist tabsym[] = {
	{"_rootdev", 0, 0},
	{"_swapdev", 0, 0},
	{"_pipedev", 0, 0},
	{"_swplo",   0, 0},
	{"_nswap",   0, 0},
	{"_suboot",  0, 0},
	{"\0",       0, 0}
};

/*
 * Разные макро, в том числе для отладки
 */
#ifdef TEST
#define setpwl(to,wl) (printf("%O->%s %o\n",wl,to.n_name,to.n_value), \
	mtpi((unsigned)(wl>>16),to.n_value),mtpi((unsigned)wl,to.n_value+2))
#define setpw(to,w) (printf("%o->%s %o\n",(unsigned)w, to.n_name,to.n_value), \
	mtpi((unsigned)w, to.n_value))
#define getpw(from) mfpi(from.n_value)
#else
#define setpwl(to,wl) (mtpi((unsigned)(wl>>16),to.n_value),\
		mtpi((unsigned)wl,to.n_value+2))
#define setpw(to,w) (mtpi((unsigned)w, to.n_value))
#define getpw(from) mfpi(from.n_value)
#endif

/* Настройка ядра
 *
 * В момент обращения приписка должна быть установлена так,
 * чтобы 0 соответствовал началу сегмента данных + bss
 */
nastroi(io) int io;
{
	int i, nossu=0;
	unsigned rootw;

	if(!waspar) return(1);
	P("start of nlist\n");
	i = nlisti(io,tabsym);
	P("end of nlist\n");
#if defined(DEBUG) || defined(TEST)
	printf("boot opts=%o\n",bootopts);
	{
		register struct nlist *k;
		for(k=tabsym;k->n_name[0];k++)
		if(k->n_value) printf("%s:\t %o \t %o w=%o\n", k->n_name,
			k->n_type, k->n_value, getpw((*k)));
	}
#endif
	if(i != SMAX) {
		if(i==SMAX-1 && SSU.n_type == 0) nossu=1;
		else {
			printf("No apropriate names found\n");
			return(0);
		}
	}
	if(ROOTK.flagw)
	{
		rootw = getpw(SROOTD);
		if(getpw(SSWAPD) == rootw) setpw(SSWAPD,ROOTK.valuew);
		if(getpw(SPIPED) == rootw) setpw(SPIPED,ROOTK.valuew);
		setpw(SROOTD,ROOTK.valuew);
	}
	if(SWAPK.flagw)   setpw(SSWAPD,SWAPK.valuew);
	if(PIPEK.flagw)   setpw(SPIPED,PIPEK.valuew);
	if(SWAPLOK.flagw) setpwl(SSWAPLO,SWAPLOK.valuew);
	if(SWAPLEK.flagw) setpw(SSWAPLE,SWAPLEK.valuew);
	if(SUK.flagw) {
		if(nossu) {
			printf("No '_suser' found");
			return(0);
		}
		setpw(SSU,SUK.valuew);
	}
#if defined(DEBUG) || defined(TEST)
	printf("boot opts=%o\n",bootopts);
	{
		register struct nlist *k;
		for(k=tabsym;k->n_name[0];k++)
	     if(k->n_value) printf("%s:\t %o \t %o w=%o\n", k->n_name,
			k->n_type, k->n_value, getpw((*k)));
	}
#endif
	P("end of nastroi\n");
	return(1);
}
@


1.5
log
@+ 31 оверлей в ядре
@
text
@d241 4
d257 1
a257 1
	{"rf",      2},
d267 3
d271 1
@


1.4
log
@Добавлено устройство vd = maj 13
@
text
@d1 4
a4 3
/* ОБРАБОТКА ПАРАМЕТРОВ ВЫЗОВА ТИПА:
  BOOT: rk(0,0)demos r=rk2 s=rk4 su
*/
d8 1
a8 1
/* Таблица параметров и типов */
d11 5
a15 2
#define PDEV 1
#define PUNS 2
a18 1
#define BOOT(set,unset) (long)(set + unset*0400)
d20 2
d23 4
a26 7
int waspar; /* Не 0, если были параметры */
struct keyts {char *keyw; char typew, flagw; long valuew;}
	keytab[]= {
#define ROOTK keytab[0]
{"r", PDEV},
#define SWAPK keytab[1]
{"s", PDEV},
a27 1
{"slo",PLONG},
d29 2
a30 11
{"slen",PUNS},
#define SUK keytab[4]
{" su",PFLAG},
#define PIPEK keytab[5]
{"p", PDEV},
{"fast",PBOOT,0, BOOT(RB_NOFSCK,RB_SINGLE)},
{"auto",PBOOT,0, BOOT(0,RB_SINGLE|RB_ASKNAME)},
{"nosu",PBOOT,0, BOOT(0,RB_SINGLE)},
{"su",PBOOT,  0, BOOT(RB_SINGLE|RB_ASKNAME,0)},
{"fault",PBOOT,0, BOOT(RB_POWRFAIL,0)},
{0,0} };
d32 24
a55 2
/* Общие описания */
extern long atodl();
d57 2
a58 1
#define MAXU 0177777l
d66 4
a69 3
	char razd;
	long vl;
	int rkod=1;
d71 8
a78 3
	/* Выделяем имя файла */
	while( *line!=' ' && *line) line++;
	if( *line==0 ) return(1); /*  Нет параметров */
d80 4
d85 3
a87 4
	 Цикл по параметрам
	*/
	while(*line)
	{
d89 2
a90 1
		while(*line && *line!=' ' && *line!='=')  line++;
d92 4
a95 2
		if( *line ) *line++ = 0;
		if(razd != '=') val=0;
d98 4
a101 2
			while(*line != ' ' && *line ) line++;
			if(*line ) *line++ = 0;
d103 4
a106 1
		if( !setpar(key,val)) rkod=0;
d111 3
a113 3
/* Работа с таблицей параметров */
#define REGPT register struct keyts *
#define FORT(k) for(k=keytab;k->keyw;k++)
d115 6
a120 1
/* Инициализация таблицы */
d122 9
a130 3
{ REGPT k;
  FORT(k) { k->flagw =0; if ( k->typew != PBOOT ) k->valuew = 0; }
  waspar = 0;
d133 5
a137 3
/* Засылка одного параметра в таблицу */
setpar(key,val)
register char *key,*val;
d140 4
a143 2
	char *val0=val;
	long vl;
d145 2
a146 1
		if( !strcmp(k->keyw, key) ) goto find;
d148 1
a148 1
	printf("%s: illegal key\n",key);
d150 1
a150 1
find:
d152 5
a156 3
	case PDEV:
		if(!val) goto noverr;
		if((k->valuew=getdev(val))==NODEV) goto errv;
d158 4
a161 2
	case PFLAG:
		if(val) goto errv;
d164 6
a169 3
	case PUNS:
		if( !val ) goto noverr;
		if((vl=atodl(val))<0 || vl > MAXU) goto errv;
d172 6
a177 3
	case PLONG:
		if(!val) goto noverr;
		if((vl = atodl(val)) <0) goto errv;
d180 6
a185 3
	case PBOOT:
		if(val) goto errv;
		bootopts = (bootopts|(k->valuew%0400))& ~(k->valuew/0400);
d187 2
a188 1
	default:
d203 2
a204 1
long atodl(s) register char *s;
d206 1
a206 1
	int ib=10; /* Основание счисления */
d208 3
a210 2
	long vl=0;
	if( *s == '0') {
d218 3
a220 3
		if(*s>='0' && *s <='9') i = *s-'0';
		else if(ib == 16 && *s>='a' && *s<='f') i = *s -'a' +10;
		else if(ib == 16 && *s>='A' && *s<='F') i = *s -'A' +10;
d222 1
a222 1
		vl = vl*ib+i;
d228 2
a229 1
int atodn(s) register char *s;
d232 5
a236 3
	int vl=0;
	while(*s && *s>='0' && *s <='9') { i = *s-'0';
		vl = vl*10+i;
d241 1
a241 1
	return(*s==0?vl:-1);
a243 1
/* Засылка кода устройства */
d245 25
a269 18
Эта таблица согласовывается с mkconfig.c
*/
struct tdevs { char *devt; int ndevt;} tdev[]={
{"rk",0},
{"rp",1},
{"rf",2},
{"tm",3},
{"hk",4},
{"hs",5},
{"xp",6},{"hp",6},{"rm",6},
{"ht",7},
{"rl",8},
{"ts",9},
{"rw",10},
{"rx",11},
{"fd",12},
{"vd",13},
{0,0} };
d271 5
a275 1
dev_t getdev(s) register char *s;
a276 1
	char *dev=s;
d278 3
a280 1
	int mi,mg;
d282 3
a284 2
	mi = mg = 0;
	while((*s>='a' && *s<='z' ) || (*s>='A' && *s<='Z'))
d288 2
a289 1
		if(mi<0) return(NODEV);
d291 5
d297 2
a298 5
	else if( *s ) return(NODEV);
	for(k=tdev; k->devt; k++){
		if(!strcmp(dev,k->devt)) break;
	}
	if(!k->devt) return(NODEV);
d300 1
a300 1
	return(makedev(mg,mi));
d304 7
a310 7
  НАСТРОЙКА ЗАГРУЖЕННОЙ КОМПОНЕНТЫ (ядра ОС)
  Заголовок должен быть считан и находиться в "exec"
  Заголовок оверлея должен находиться в ovlhdr
  Признак overlayd используется для определения "overlay"
  В таблицу переменных записываем не истинный адрес, а адрес
  переменной в сегмента данных.
*/
d312 4
a315 2
#define SPACE 100		/* number of symbols read at a time */
extern bool_t  overlaid;
d317 2
a318 1
extern struct  ovlhdr  ovlhdr;
d327 1
a327 1
	int n, m, i, nnames=0;
d330 2
d333 1
a333 1
	unsigned data_base; int ovl_par,txt_par,tpar;
d344 1
a344 1
		for(n=0; n<NOVL; n++)
d346 2
a347 2
			sa += (long)ovlhdr.ov_siz[n];
			if ((tpar=ator(ovlhdr.ov_siz[n])) > ovl_par)
d380 1
a380 1
		cont:		;
d387 6
a392 8
/* Таблица имен для настройки ядра */
struct nlist tabsym[]={
#define SROOTD tabsym[0]
{"_rootdev",0,0},
#define SSWAPD tabsym[1]
{"_swapdev",0,0},
#define SPIPED tabsym[2]
{"_pipedev",0,0},
a393 1
{"_swplo",0,0},
d395 2
a396 5
{"_nswap",0,0},
#define SSU tabsym[5]
{"_suboot",0,0},
#define SMAX 6
{"\0",0,0}  };
d398 13
a410 1
/* Разные макро, в том числе для отладки */
d430 1
a430 1
{ 
d433 1
d440 1
a440 1
	{ 
d443 1
a443 1
	     if(k->n_value) printf("%s:\t %o \t %o w=%o\n", k->n_name,
d449 1
a449 1
		else { 
d455 1
a455 1
	{ 
d461 2
a462 2
	if(SWAPK.flagw) setpw(SSWAPD,SWAPK.valuew);
	if(PIPEK.flagw) setpw(SPIPED,PIPEK.valuew);
d466 3
a468 3
		if(nossu) { 
			printf("No '_suser' found"); 
			return(0); 
d474 1
a474 1
	{ 
@


1.3
log
@Добавлен драйвер fd (Э-85).
@
text
@d195 1
@


1.2
log
@Добавлен режим отладочной печати DEBUG
@
text
@d31 2
d34 2
a35 1
{"auto",PBOOT,0, BOOT(0,RB_SINGLE)},
d93 1
a93 1
{ 
d104 1
a104 1
	case PDEV: 
d108 1
a108 1
	case PFLAG: 
d112 1
a112 1
	case PUNS: 
d117 1
a117 1
	case PLONG: 
d120 1
a120 1
		k->valuew = vl; 
d126 2
a127 2
	default: 
		printf("Error in parameter\n"); 
d130 1
a130 1
	k->flagw = 1; 
d134 1
a134 1
	printf("No value!\n"); 
d137 1
a137 1
	printf("Illegal  %s\n",  val); 
d149 2
a150 2
			ib = 16; 
			s++; 
d190 5
a194 1
{"ts",8},
d367 1
@


1.1
log
@Initial revision
@
text
@d237 1
a237 1
	struct nlist space[SPACE];
d336 1
a336 1
#ifdef TEST
d369 9
@
